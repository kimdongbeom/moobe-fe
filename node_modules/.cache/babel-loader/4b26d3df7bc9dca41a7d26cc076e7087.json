{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/mobile/map/MobileKakaoMap.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport MoobeKakaoMap from \"components/common/map/MoobeKakaoMap\";\nimport MarkerClusterer, { MarkerClustererCalculator, MarkerClustererStyles } from \"components/common/map/MarkerClusterer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport MarkerImageSm from \"assets/images/marker_arrow_sm.svg\";\nimport MarkerImagePin from \"assets/images/marker_arrow_pin.svg\";\nimport MarkerImagePinFavorite from 'assets/images/marker_arrow_pin_favorite.png';\nimport CustomOverlay from \"components/common/map/CustomOverlay\";\nimport MapLocationOverlay from \"components/common/map/MapLocationOverlay\";\nimport { isEmpty as _isEmpty, isNil as _isNil } from 'lodash';\nimport Marker from \"components/common/map/Marker\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { buildContentPath } from \"data/util\";\nimport { setFocusedLocation } from \"data/redux/action/location\";\nimport { forceCleanMarkerClusterer } from \"data/redux/action/map\";\nimport { getContent } from \"data/api\";\nimport ClusterMarker from \"components/common/map/ClusterMarker\";\nimport MapLocation from \"data/redux/model/MapLocation\";\n\nconst MobileKakaoMap = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        focusedLocationLiked = _useState2[0],\n        setFocusedLocationLiked = _useState2[1];\n\n  const _useSelector = useSelector(state => state.mapClusterLocation),\n        mapClusterLocationList = _useSelector.mapClusterLocationList,\n        mapClusterLocationMarkerSize = _useSelector.mapClusterLocationMarkerSize,\n        mapClusterLocationMarkerList = _useSelector.mapClusterLocationMarkerList;\n\n  const _useSelector2 = useSelector(state => state.map),\n        map = _useSelector2.map,\n        mapLevel = _useSelector2.mapLevel,\n        mapLoading = _useSelector2.mapLoading;\n\n  const _useSelector3 = useSelector(state => state.mapLocation),\n        mapLocationList = _useSelector3.mapLocationList,\n        mapLocationLoading = _useSelector3.mapLocationLoading,\n        focusedMapLocation = _useSelector3.focusedMapLocation;\n\n  const dispatch = useDispatch();\n\n  const getLocationListWithoutFocusedContent = () => {\n    if (!_isNil(focusedMapLocation)) {\n      return mapLocationList.filter(mapLocation => mapLocation.id != focusedMapLocation.id);\n    } else {\n      return mapLocationList;\n    }\n  };\n\n  const getClusterLocationListWithoutFocusedContent = () => {\n    if (!_isNil(focusedMapLocation)) {\n      return mapClusterLocationMarkerList.filter(location => location.id != focusedMapLocation.id);\n    } else {\n      return mapClusterLocationMarkerList;\n    }\n  };\n\n  useEffect(() => {\n    if (focusedMapLocation) {\n      getContent(focusedMapLocation.id).then(response => {\n        if (response && response.data) {\n          setFocusedLocationLiked(response.data.liked);\n        }\n      });\n    }\n\n    return () => setFocusedLocationLiked(false);\n  }, [focusedMapLocation]);\n\n  const onClickMarker = mapLocation => {\n    dispatch(setFocusedLocation(mapLocation));\n  };\n\n  const onClusterClick = cluster => {\n    if (map) {\n      const bounds = new kakao.maps.LatLngBounds();\n      cluster.getMarkers().map(m => {\n        bounds.extend(new kakao.maps.LatLng(m.mapLocation.latitude, m.mapLocation.longitude));\n      });\n      dispatch(forceCleanMarkerClusterer());\n      dispatch(setFocusedLocation(null));\n      map.setBounds(bounds, 0, 0, 0, 0);\n    }\n  };\n\n  const renderSingleClusterMarker = mapClusterLocation => {\n    let mapLocation = new MapLocation(mapClusterLocation.markerList[0]);\n    return alwaysShowLocationOverlay ? React.createElement(MarkerWithCustomOverlay, {\n      key: mapLocation.id,\n      mapLocation: mapLocation,\n      hasShadow: false,\n      markerOptions: {\n        imageUrl: MarkerImageSm,\n        imageOption: {\n          width: 30,\n          height: 32\n        }\n      },\n      onClick: e => onClickMarker(mapLocation),\n      overlayOffsetY: 38,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }) : React.createElement(Marker, {\n      key: mapLocation.id,\n      onClick: marker => onClickMarker(mapLocation),\n      options: {\n        lat: mapLocation.latitude,\n        lng: mapLocation.longitude,\n        content: mapLocation.name,\n        imageUrl: MarkerImageSm,\n        imageOption: {\n          width: 30,\n          height: 32\n        }\n      },\n      attributes: {\n        mapLocation\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    });\n  };\n\n  const renderClusterFocusedMarker = mapLocation => {\n    return React.createElement(MarkerWithCustomOverlay, {\n      key: focusedMapLocation.id,\n      mapLocation: focusedMapLocation,\n      markerOptions: {\n        imageUrl: focusedLocationLiked ? MarkerImagePinFavorite : MarkerImagePin,\n        imageOption: {\n          width: 46,\n          height: 61\n        }\n      },\n      zIndex: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    });\n  };\n\n  const alwaysShowLocationOverlay = !mapLocationLoading && !_isEmpty(mapLocationList) && !mapLoading && (mapLevel < 5 || mapLocationList.length <= 6);\n  const alwaysShowClusterLocationOverlay = !mapLoading && (mapClusterLocationMarkerSize <= 6 || mapLevel < 5);\n  return React.createElement(React.Fragment, null, React.createElement(MoobeKakaoMap, {\n    className: \"column is-paddingless kakao-map is-fullheight-with-navbar-mobile is-marginless\",\n    zoom: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(MarkerClusterer, {\n    options: {\n      averageCenter: false,\n      minLevel: 5,\n      disableClickZoom: true,\n      minClusterSize: 3,\n      calculator: MarkerClustererCalculator,\n      styles: MarkerClustererStyles\n    },\n    onClusterClick: onClusterClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, getLocationListWithoutFocusedContent().map(mapLocation => alwaysShowLocationOverlay ? React.createElement(MarkerWithCustomOverlay, {\n    key: mapLocation.id,\n    mapLocation: mapLocation,\n    hasShadow: false,\n    markerOptions: {\n      imageUrl: MarkerImageSm,\n      imageOption: {\n        width: 30,\n        height: 32\n      }\n    },\n    onClick: e => onClickMarker(mapLocation),\n    overlayOffsetY: 38,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }) : React.createElement(Marker, {\n    key: mapLocation.id,\n    onClick: marker => onClickMarker(mapLocation),\n    options: {\n      lat: mapLocation.latitude,\n      lng: mapLocation.longitude,\n      content: mapLocation.name,\n      imageUrl: MarkerImageSm,\n      imageOption: {\n        width: 30,\n        height: 32\n      }\n    },\n    attributes: {\n      mapLocation\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }))), !_isNil(focusedMapLocation) ? React.createElement(MarkerWithCustomOverlay, {\n    key: focusedMapLocation.id,\n    mapLocation: focusedMapLocation,\n    markerOptions: {\n      imageUrl: focusedLocationLiked ? MarkerImagePinFavorite : MarkerImagePin,\n      imageOption: {\n        width: 46,\n        height: 61\n      }\n    },\n    zIndex: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }) : null, alwaysShowClusterLocationOverlay ? getClusterLocationListWithoutFocusedContent().map(mapLocation => React.createElement(MarkerWithCustomOverlay, {\n    key: mapLocation.id,\n    mapLocation: mapLocation,\n    hasShadow: false,\n    markerOptions: {\n      imageUrl: MarkerImageSm,\n      imageOption: {\n        width: 30,\n        height: 32\n      }\n    },\n    onClick: e => onClickMarker(mapLocation),\n    overlayOffsetY: 38,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })) : mapClusterLocationList.map(m => React.createElement(ClusterMarker, {\n    key: m.centerLatitude + \"\" + m.centerLongitude + \"\" + m.markerListSize,\n    mapClusterLocation: m,\n    renderFocusedMarker: renderClusterFocusedMarker,\n    renderSingleMarker: renderSingleClusterMarker,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }))));\n};\n\nconst MarkerWithCustomOverlay = ({\n  mapLocation,\n  hasShadow = true,\n  showTag = true,\n  showArrow = true,\n  onClick = null,\n  markerOptions = {},\n  overlayOffsetY = 72,\n  zIndex = 1\n}) => {\n  const _useSelector4 = useSelector(state => state.channel),\n        activeChannel = _useSelector4.activeChannel;\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const updateOverlayContent = mapLocation => {\n    if (onClick) {\n      onClick();\n    } else {\n      history.push({\n        pathname: buildContentPath(activeChannel, mapLocation),\n        search: location.search\n      });\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Marker, {\n    onClick: marker => updateOverlayContent(mapLocation),\n    options: Object.assign({\n      lat: mapLocation.latitude,\n      lng: mapLocation.longitude,\n      content: mapLocation.name,\n      imageUrl: MarkerImagePin,\n      imageOption: {\n        width: 46,\n        height: 61\n      },\n      zIndex: zIndex\n    }, markerOptions),\n    attributes: {\n      mapLocation\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), React.createElement(CustomOverlay, {\n    lat: mapLocation.latitude,\n    lng: mapLocation.longitude,\n    visible: true,\n    options: {\n      offsetY: overlayOffsetY,\n      zIndex: zIndex\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(MapLocationOverlay, {\n    mapLocation: mapLocation,\n    hasShadow: hasShadow,\n    handleClick: onClick,\n    showTag: showTag,\n    showArrow: showArrow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  })));\n};\n\nexport default MobileKakaoMap;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/mobile/map/MobileKakaoMap.jsx"],"names":["React","useEffect","useState","MoobeKakaoMap","MarkerClusterer","MarkerClustererCalculator","MarkerClustererStyles","useDispatch","useSelector","MarkerImagePinFavorite","CustomOverlay","MapLocationOverlay","isEmpty","_isEmpty","isNil","_isNil","Marker","useHistory","useLocation","buildContentPath","setFocusedLocation","forceCleanMarkerClusterer","getContent","ClusterMarker","MapLocation","MobileKakaoMap","focusedLocationLiked","setFocusedLocationLiked","state","mapClusterLocation","mapClusterLocationList","mapClusterLocationMarkerSize","mapClusterLocationMarkerList","map","mapLevel","mapLoading","mapLocation","mapLocationList","mapLocationLoading","focusedMapLocation","dispatch","getLocationListWithoutFocusedContent","filter","id","getClusterLocationListWithoutFocusedContent","location","then","response","data","liked","onClickMarker","onClusterClick","cluster","bounds","kakao","maps","LatLngBounds","getMarkers","m","extend","LatLng","latitude","longitude","setBounds","renderSingleClusterMarker","markerList","alwaysShowLocationOverlay","imageUrl","MarkerImageSm","imageOption","width","height","e","marker","lat","lng","content","name","renderClusterFocusedMarker","MarkerImagePin","length","alwaysShowClusterLocationOverlay","averageCenter","minLevel","disableClickZoom","minClusterSize","calculator","styles","centerLatitude","centerLongitude","markerListSize","MarkerWithCustomOverlay","hasShadow","showTag","showArrow","onClick","markerOptions","overlayOffsetY","zIndex","channel","activeChannel","history","updateOverlayContent","push","pathname","search","Object","assign","offsetY"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport MoobeKakaoMap from \"components/common/map/MoobeKakaoMap\";\nimport MarkerClusterer, {MarkerClustererCalculator, MarkerClustererStyles} from \"components/common/map/MarkerClusterer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport MarkerImageSm from 'assets/images/marker_arrow_sm.svg';\nimport MarkerImagePin from 'assets/images/marker_arrow_pin.svg';\nimport MarkerImagePinFavorite from 'assets/images/marker_arrow_pin_favorite.png';\nimport CustomOverlay from \"components/common/map/CustomOverlay\";\nimport MapLocationOverlay from \"components/common/map/MapLocationOverlay\";\nimport {isEmpty as _isEmpty, isNil as _isNil} from 'lodash'\nimport Marker from \"components/common/map/Marker\";\nimport {useHistory, useLocation} from \"react-router\";\nimport {buildContentPath} from \"data/util\";\nimport {setFocusedLocation} from \"data/redux/action/location\";\nimport {forceCleanMarkerClusterer} from \"data/redux/action/map\";\nimport {getContent} from \"data/api\";\nimport ClusterMarker from \"components/common/map/ClusterMarker\";\nimport MapLocation from \"data/redux/model/MapLocation\";\n\nconst MobileKakaoMap = () => {\n    const [focusedLocationLiked, setFocusedLocationLiked] = useState(false);\n    const {mapClusterLocationList, mapClusterLocationMarkerSize, mapClusterLocationMarkerList} = useSelector(state => state.mapClusterLocation);\n    const {map, mapLevel, mapLoading} = useSelector(state => state.map);\n    const {mapLocationList, mapLocationLoading, focusedMapLocation} = useSelector(state => state.mapLocation);\n    const dispatch = useDispatch();\n\n    const getLocationListWithoutFocusedContent = () => {\n        if (!_isNil(focusedMapLocation)) {\n            return mapLocationList.filter(mapLocation => mapLocation.id != focusedMapLocation.id)\n        } else {\n            return mapLocationList;\n        }\n    }\n\n    const getClusterLocationListWithoutFocusedContent = () => {\n        if (!_isNil(focusedMapLocation)) {\n            return mapClusterLocationMarkerList.filter(location => location.id != focusedMapLocation.id)\n        } else {\n            return mapClusterLocationMarkerList\n        }\n    }\n\n    useEffect(() => {\n        if (focusedMapLocation) {\n            getContent(focusedMapLocation.id).then(response => {\n                if (response && response.data) {\n                    setFocusedLocationLiked(response.data.liked)\n                }\n            })\n        }\n        return () => setFocusedLocationLiked(false)\n    }, [focusedMapLocation])\n\n    const onClickMarker = (mapLocation) => {\n        dispatch(setFocusedLocation(mapLocation))\n    }\n\n    const onClusterClick = (cluster) => {\n        if(map) {\n            const bounds = new kakao.maps.LatLngBounds();\n            cluster.getMarkers().map(m => {\n                bounds.extend(new kakao.maps.LatLng(m.mapLocation.latitude, m.mapLocation.longitude))\n            })\n            dispatch(forceCleanMarkerClusterer());\n            dispatch(setFocusedLocation(null));\n            map.setBounds(bounds, 0, 0, 0, 0)\n        }\n    }\n\n    const renderSingleClusterMarker = (mapClusterLocation) => {\n        let mapLocation = new MapLocation(mapClusterLocation.markerList[0])\n        return alwaysShowLocationOverlay\n            ? <MarkerWithCustomOverlay key={mapLocation.id} mapLocation={mapLocation} hasShadow={false}\n                                       markerOptions={{imageUrl: MarkerImageSm, imageOption: {width: 30, height: 32}}} onClick={(e) => onClickMarker(mapLocation)}\n                                       overlayOffsetY={38}/>\n            : <Marker key={mapLocation.id} onClick={(marker) => onClickMarker(mapLocation)}\n                      options={{lat: mapLocation.latitude, lng: mapLocation.longitude, content: mapLocation.name, imageUrl: MarkerImageSm, imageOption: {width: 30, height: 32}}}\n                      attributes={{mapLocation}}/>\n    }\n\n    const renderClusterFocusedMarker = (mapLocation) => {\n        return (\n            <MarkerWithCustomOverlay key={focusedMapLocation.id}\n                                     mapLocation={focusedMapLocation}\n                                     markerOptions={{imageUrl: focusedLocationLiked ? MarkerImagePinFavorite : MarkerImagePin, imageOption: {width: 46, height: 61}}}\n                                     zIndex={3} />\n        )\n    }\n\n    const alwaysShowLocationOverlay =  !mapLocationLoading && !_isEmpty(mapLocationList) && !mapLoading && (mapLevel < 5 || mapLocationList.length <= 6)\n    const alwaysShowClusterLocationOverlay = !mapLoading && (mapClusterLocationMarkerSize <= 6 || mapLevel < 5)\n\n    return (\n        <>\n            <MoobeKakaoMap className=\"column is-paddingless kakao-map is-fullheight-with-navbar-mobile is-marginless\" zoom={false}>\n                {/*single marker*/}\n                <MarkerClusterer options={{\n                    averageCenter: false,\n                    minLevel: 5,\n                    disableClickZoom: true,\n                    minClusterSize: 3,\n                    calculator: MarkerClustererCalculator,\n                    styles: MarkerClustererStyles\n                }} onClusterClick={onClusterClick}>\n                    {getLocationListWithoutFocusedContent().map(mapLocation =>\n                        alwaysShowLocationOverlay\n                        ? <MarkerWithCustomOverlay key={mapLocation.id} mapLocation={mapLocation} hasShadow={false}\n                                                   markerOptions={{imageUrl: MarkerImageSm, imageOption: {width: 30, height: 32}}} onClick={(e) => onClickMarker(mapLocation)}\n                                                   overlayOffsetY={38}/>\n                        : <Marker key={mapLocation.id} onClick={(marker) => onClickMarker(mapLocation)}\n                                options={{lat: mapLocation.latitude, lng: mapLocation.longitude, content: mapLocation.name, imageUrl: MarkerImageSm, imageOption: {width: 30, height: 32}}}\n                                attributes={{mapLocation}}/>\n                    )}\n                </MarkerClusterer>\n                {/*focused marker overlay (after click marker)*/}\n                {!_isNil(focusedMapLocation) ? <MarkerWithCustomOverlay key={focusedMapLocation.id}\n                                                                        mapLocation={focusedMapLocation}\n                                                                        markerOptions={{imageUrl: focusedLocationLiked ? MarkerImagePinFavorite : MarkerImagePin, imageOption: {width: 46, height: 61}}}\n                                                                        zIndex={3} /> : null}\n                {alwaysShowClusterLocationOverlay\n                    ? getClusterLocationListWithoutFocusedContent().map(mapLocation =>\n                        <MarkerWithCustomOverlay key={mapLocation.id} mapLocation={mapLocation} hasShadow={false}\n                                                 markerOptions={{imageUrl: MarkerImageSm, imageOption: {width: 30, height: 32}}} onClick={(e) => onClickMarker(mapLocation)}\n                                                 overlayOffsetY={38}/>)\n                    : mapClusterLocationList.map(m => <ClusterMarker key={m.centerLatitude + \"\" + m.centerLongitude + \"\" + m.markerListSize}\n                                                                mapClusterLocation={m}\n                                                                renderFocusedMarker={renderClusterFocusedMarker}\n                                                                renderSingleMarker={renderSingleClusterMarker} />)}\n            </MoobeKakaoMap>\n        </>\n    )\n};\n\nconst MarkerWithCustomOverlay = ({mapLocation, hasShadow=true, showTag=true, showArrow=true, onClick=null, markerOptions={}, overlayOffsetY=72, zIndex=1}) => {\n    const {activeChannel} = useSelector(state => state.channel);\n    const history = useHistory();\n    const location = useLocation();\n    const updateOverlayContent = (mapLocation) => {\n        if (onClick) {\n            onClick()\n        } else {\n            history.push({\n                pathname: buildContentPath(activeChannel, mapLocation),\n                search: location.search\n            });\n        }\n\n    };\n\n    return (\n        <>\n            <Marker onClick={(marker) => updateOverlayContent(mapLocation)}\n                options={Object.assign({lat: mapLocation.latitude, lng: mapLocation.longitude, content: mapLocation.name, imageUrl: MarkerImagePin, imageOption: {width: 46, height: 61}, zIndex: zIndex}, markerOptions)}\n                attributes={{mapLocation}}/>\n            <CustomOverlay lat={mapLocation.latitude} lng={mapLocation.longitude} visible={true} options={{offsetY: overlayOffsetY, zIndex: zIndex}}>\n                <MapLocationOverlay mapLocation={mapLocation} hasShadow={hasShadow} handleClick={onClick} showTag={showTag} showArrow={showArrow} />\n            </CustomOverlay>\n        </>\n    )\n};\n\n\nexport default MobileKakaoMap;"]},"metadata":{},"sourceType":"module"}