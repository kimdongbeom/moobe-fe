{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/mobile/map/MobileKakaoMap.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport MoobeKakaoMap from \"components/common/map/MoobeKakaoMap\";\nimport MarkerClusterer, { MarkerClustererCalculator, MarkerClustererStyles } from \"components/common/map/MarkerClusterer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport MarkerImageSm from \"assets/images/marker_arrow_sm.svg\";\nimport MarkerImagePin from \"assets/images/marker_arrow_pin.svg\";\nimport MarkerImagePinFavorite from 'assets/images/marker_arrow_pin_favorite.png';\nimport CustomOverlay from \"components/common/map/CustomOverlay\";\nimport MapLocationOverlay from \"components/common/map/MapLocationOverlay\";\nimport { isNil as _isNil } from 'lodash';\nimport Marker from \"components/common/map/Marker\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { buildContentPath } from \"data/util\";\nimport { setFocusedLocation } from \"data/redux/action/location\";\nimport { forceCleanMarkerClusterer, loadingMapStarted, resetMapBounds, setSearchOnBoundChange } from \"data/redux/action/map\";\nimport { getContent } from \"data/api\";\n\nconst MobileKakaoMap = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        focusedLocationLiked = _useState2[0],\n        setFocusedLocationLiked = _useState2[1];\n\n  const _useSelector = useSelector(state => state.map),\n        map = _useSelector.map,\n        mapLevel = _useSelector.mapLevel,\n        mapLoading = _useSelector.mapLoading;\n\n  const _useSelector2 = useSelector(state => state.mapLocation),\n        mapLocationList = _useSelector2.mapLocationList,\n        focusedMapLocation = _useSelector2.focusedMapLocation;\n\n  const dispatch = useDispatch();\n\n  const getLocationListWithoutDetailContent = () => {\n    if (!_isNil(focusedMapLocation)) {\n      return mapLocationList.filter(mapLocation => mapLocation.id != focusedMapLocation.id);\n    } else {\n      return mapLocationList;\n    }\n  };\n\n  useEffect(() => {\n    if (focusedMapLocation) {\n      getContent(focusedMapLocation.id).then(response => {\n        if (response && response.data) {\n          setFocusedLocationLiked(response.data.liked);\n        }\n      });\n    }\n\n    return () => setFocusedLocationLiked(false);\n  }, [focusedMapLocation]);\n\n  const onClickMarker = mapLocation => {\n    dispatch(setFocusedLocation(mapLocation));\n  };\n\n  const onClusterClick = cluster => {\n    if (map) {\n      const bounds = new kakao.maps.LatLngBounds();\n      cluster.getMarkers().map(m => {\n        bounds.extend(new kakao.maps.LatLng(m.mapLocation.latitude, m.mapLocation.longitude));\n      });\n      dispatch(loadingMapStarted());\n      dispatch(forceCleanMarkerClusterer());\n      dispatch(setFocusedLocation(null));\n      dispatch(setSearchOnBoundChange(true));\n      map.setBounds(bounds, 0, 0, 0, 0);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(MoobeKakaoMap, {\n    className: \"column is-paddingless kakao-map is-fullheight-with-navbar-mobile is-marginless\",\n    zoom: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(MarkerClusterer, {\n    options: {\n      averageCenter: false,\n      minLevel: 6,\n      disableClickZoom: true,\n      minClusterSize: 3,\n      calculator: MarkerClustererCalculator,\n      styles: MarkerClustererStyles\n    },\n    onClusterClick: onClusterClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, getLocationListWithoutDetailContent().map(mapLocation => !mapLoading && (mapLevel < 6 || mapLocationList && mapLocationList.length <= 6) ? React.createElement(MarkerWithCustomOverlay, {\n    key: mapLocation.id,\n    mapLocation: mapLocation,\n    hasShadow: false,\n    markerOptions: {\n      imageUrl: MarkerImageSm,\n      imageOption: {\n        width: 30,\n        height: 32\n      }\n    },\n    onClick: e => onClickMarker(mapLocation),\n    overlayOffsetY: 38,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }) : React.createElement(Marker, {\n    key: mapLocation.id,\n    onClick: marker => onClickMarker(mapLocation),\n    options: {\n      lat: mapLocation.latitude,\n      lng: mapLocation.longitude,\n      content: mapLocation.name,\n      imageUrl: MarkerImageSm,\n      imageOption: {\n        width: 30,\n        height: 32\n      }\n    },\n    attributes: {\n      mapLocation\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }))), !_isNil(focusedMapLocation) ? React.createElement(MarkerWithCustomOverlay, {\n    key: focusedMapLocation.id,\n    mapLocation: focusedMapLocation,\n    markerOptions: {\n      imageUrl: focusedLocationLiked ? MarkerImagePinFavorite : MarkerImagePin,\n      imageOption: {\n        width: 46,\n        height: 61\n      }\n    },\n    zIndex: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }) : null));\n};\n\nconst MarkerWithCustomOverlay = ({\n  mapLocation,\n  hasShadow = true,\n  showTag = true,\n  showArrow = true,\n  onClick = null,\n  markerOptions = {},\n  overlayOffsetY = 72,\n  zIndex = 1\n}) => {\n  const _useSelector3 = useSelector(state => state.channel),\n        activeChannel = _useSelector3.activeChannel;\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const updateOverlayContent = mapLocation => {\n    if (onClick) {\n      onClick();\n    } else {\n      history.push({\n        pathname: buildContentPath(activeChannel, mapLocation),\n        search: location.search\n      });\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Marker, {\n    onClick: marker => updateOverlayContent(mapLocation),\n    options: Object.assign({\n      lat: mapLocation.latitude,\n      lng: mapLocation.longitude,\n      content: mapLocation.name,\n      imageUrl: MarkerImagePin,\n      imageOption: {\n        width: 46,\n        height: 61\n      },\n      zIndex: zIndex\n    }, markerOptions),\n    attributes: {\n      mapLocation\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), React.createElement(CustomOverlay, {\n    lat: mapLocation.latitude,\n    lng: mapLocation.longitude,\n    visible: true,\n    options: {\n      offsetY: overlayOffsetY,\n      zIndex: zIndex\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(MapLocationOverlay, {\n    mapLocation: mapLocation,\n    hasShadow: hasShadow,\n    handleClick: onClick,\n    showTag: showTag,\n    showArrow: showArrow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  })));\n};\n\nexport default MobileKakaoMap;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/mobile/map/MobileKakaoMap.jsx"],"names":["React","useEffect","useState","MoobeKakaoMap","MarkerClusterer","MarkerClustererCalculator","MarkerClustererStyles","useDispatch","useSelector","MarkerImagePinFavorite","CustomOverlay","MapLocationOverlay","isNil","_isNil","Marker","useHistory","useLocation","buildContentPath","setFocusedLocation","forceCleanMarkerClusterer","loadingMapStarted","resetMapBounds","setSearchOnBoundChange","getContent","MobileKakaoMap","focusedLocationLiked","setFocusedLocationLiked","state","map","mapLevel","mapLoading","mapLocation","mapLocationList","focusedMapLocation","dispatch","getLocationListWithoutDetailContent","filter","id","then","response","data","liked","onClickMarker","onClusterClick","cluster","bounds","kakao","maps","LatLngBounds","getMarkers","m","extend","LatLng","latitude","longitude","setBounds","averageCenter","minLevel","disableClickZoom","minClusterSize","calculator","styles","length","imageUrl","MarkerImageSm","imageOption","width","height","e","marker","lat","lng","content","name","MarkerImagePin","MarkerWithCustomOverlay","hasShadow","showTag","showArrow","onClick","markerOptions","overlayOffsetY","zIndex","channel","activeChannel","history","location","updateOverlayContent","push","pathname","search","Object","assign","offsetY"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport MoobeKakaoMap from \"components/common/map/MoobeKakaoMap\";\nimport MarkerClusterer, {MarkerClustererCalculator, MarkerClustererStyles} from \"components/common/map/MarkerClusterer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport MarkerImageSm from 'assets/images/marker_arrow_sm.svg';\nimport MarkerImagePin from 'assets/images/marker_arrow_pin.svg';\nimport MarkerImagePinFavorite from 'assets/images/marker_arrow_pin_favorite.png';\nimport CustomOverlay from \"components/common/map/CustomOverlay\";\nimport MapLocationOverlay from \"components/common/map/MapLocationOverlay\";\nimport {isNil as _isNil} from 'lodash'\nimport Marker from \"components/common/map/Marker\";\nimport {useHistory, useLocation} from \"react-router\";\nimport {buildContentPath} from \"data/util\";\nimport {setFocusedLocation} from \"data/redux/action/location\";\nimport {\n    forceCleanMarkerClusterer,\n    loadingMapStarted,\n    resetMapBounds,\n    setSearchOnBoundChange\n} from \"data/redux/action/map\";\nimport {getContent} from \"data/api\";\n\nconst MobileKakaoMap = () => {\n    const [focusedLocationLiked, setFocusedLocationLiked] = useState(false);\n    const {map, mapLevel, mapLoading} = useSelector(state => state.map);\n    const {mapLocationList, focusedMapLocation} = useSelector(state => state.mapLocation);\n    const dispatch = useDispatch();\n\n    const getLocationListWithoutDetailContent = () => {\n        if (!_isNil(focusedMapLocation)) {\n            return mapLocationList.filter(mapLocation => mapLocation.id != focusedMapLocation.id)\n        } else {\n            return mapLocationList;\n        }\n    }\n\n    useEffect(() => {\n        if (focusedMapLocation) {\n            getContent(focusedMapLocation.id).then(response => {\n                if (response && response.data) {\n                    setFocusedLocationLiked(response.data.liked)\n                }\n            })\n        }\n        return () => setFocusedLocationLiked(false)\n    }, [focusedMapLocation])\n\n    const onClickMarker = (mapLocation) => {\n        dispatch(setFocusedLocation(mapLocation))\n    }\n\n    const onClusterClick = (cluster) => {\n        if(map) {\n            const bounds = new kakao.maps.LatLngBounds();\n            cluster.getMarkers().map(m => {\n                bounds.extend(new kakao.maps.LatLng(m.mapLocation.latitude, m.mapLocation.longitude))\n            })\n            dispatch(loadingMapStarted());\n            dispatch(forceCleanMarkerClusterer());\n            dispatch(setFocusedLocation(null));\n            dispatch(setSearchOnBoundChange(true));\n            map.setBounds(bounds, 0, 0, 0, 0)\n        }\n    }\n\n    return (\n        <>\n            <MoobeKakaoMap className=\"column is-paddingless kakao-map is-fullheight-with-navbar-mobile is-marginless\" zoom={false}>\n                <MarkerClusterer options={{\n                    averageCenter: false,\n                    minLevel: 6,\n                    disableClickZoom: true,\n                    minClusterSize: 3,\n                    calculator: MarkerClustererCalculator,\n                    styles: MarkerClustererStyles\n                }} onClusterClick={onClusterClick}>\n                    {getLocationListWithoutDetailContent().map(mapLocation =>\n                        !mapLoading && (mapLevel < 6 || (mapLocationList && mapLocationList.length <= 6))\n                        ? <MarkerWithCustomOverlay key={mapLocation.id} mapLocation={mapLocation} hasShadow={false}\n                                                   markerOptions={{imageUrl: MarkerImageSm, imageOption: {width: 30, height: 32}}} onClick={(e) => onClickMarker(mapLocation)}\n                                                   overlayOffsetY={38}/>\n                        : <Marker key={mapLocation.id} onClick={(marker) => onClickMarker(mapLocation)}\n                                options={{lat: mapLocation.latitude, lng: mapLocation.longitude, content: mapLocation.name, imageUrl: MarkerImageSm, imageOption: {width: 30, height: 32}}}\n                                attributes={{mapLocation}}/>\n                    )}\n                </MarkerClusterer>\n                {!_isNil(focusedMapLocation) ? <MarkerWithCustomOverlay key={focusedMapLocation.id}\n                                                                        mapLocation={focusedMapLocation}\n                                                                        markerOptions={{imageUrl: focusedLocationLiked ? MarkerImagePinFavorite : MarkerImagePin, imageOption: {width: 46, height: 61}}}\n                                                                        zIndex={3} /> : null}\n            </MoobeKakaoMap>\n        </>\n    )\n};\n\nconst MarkerWithCustomOverlay = ({mapLocation, hasShadow=true, showTag=true, showArrow=true, onClick=null, markerOptions={}, overlayOffsetY=72, zIndex=1}) => {\n    const {activeChannel} = useSelector(state => state.channel);\n    const history = useHistory();\n    const location = useLocation();\n    const updateOverlayContent = (mapLocation) => {\n        if (onClick) {\n            onClick()\n        } else {\n            history.push({\n                pathname: buildContentPath(activeChannel, mapLocation),\n                search: location.search\n            });\n        }\n\n    };\n\n    return (\n        <>\n            <Marker onClick={(marker) => updateOverlayContent(mapLocation)}\n                options={Object.assign({lat: mapLocation.latitude, lng: mapLocation.longitude, content: mapLocation.name, imageUrl: MarkerImagePin, imageOption: {width: 46, height: 61}, zIndex: zIndex}, markerOptions)}\n                attributes={{mapLocation}}/>\n            <CustomOverlay lat={mapLocation.latitude} lng={mapLocation.longitude} visible={true} options={{offsetY: overlayOffsetY, zIndex: zIndex}}>\n                <MapLocationOverlay mapLocation={mapLocation} hasShadow={hasShadow} handleClick={onClick} showTag={showTag} showArrow={showArrow} />\n            </CustomOverlay>\n        </>\n    )\n};\n\n\nexport default MobileKakaoMap;"]},"metadata":{},"sourceType":"module"}