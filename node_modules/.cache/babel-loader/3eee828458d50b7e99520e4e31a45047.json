{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/admin/NoticeForm.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { CustomField, InputField } from \"components/admin/AdminFields\";\nimport { updateObject } from \"data/util\";\nimport useBulmaCalendar from \"components/common/ui/components\";\nimport NoticeEditor, { EditorViewer } from \"components/admin/NoticeEditor\";\nimport fileSize from \"filesize\";\nimport { getNotice, insertNotice, updateNotice } from \"data/api\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchNoticeList } from \"data/redux/action/notice\";\nimport NoticeListTable from \"components/notice/NoticeListTable\";\nimport { isNil as _isNil, isEmpty as _isEmpty } from 'lodash';\nimport moment from \"moment\";\nimport { MOMENT_DATE_FORMAT } from \"assets/styles/const\";\n\nconst NoticeForm = () => {\n  const _useState = useState({\n    title: \"\",\n    noticeStartDate: null,\n    noticeEndDate: null\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        originNotice = _useState4[0],\n        setOriginNotice = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        modifyMode = _useState6[0],\n        setModifyMode = _useState6[1];\n\n  const _useBulmaCalendar = useBulmaCalendar({}, true),\n        _useBulmaCalendar2 = _slicedToArray(_useBulmaCalendar, 3),\n        calendarElements = _useBulmaCalendar2[0],\n        calendarValue = _useBulmaCalendar2[1],\n        calendar = _useBulmaCalendar2[2];\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        editor = _useState8[0],\n        setEditor = _useState8[1];\n\n  const _useState9 = useState(\"\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        markdown = _useState10[0],\n        setMarkdown = _useState10[1];\n\n  const _useState11 = useState(\"\"),\n        _useState12 = _slicedToArray(_useState11, 2),\n        processText = _useState12[0],\n        setProcessText = _useState12[1];\n\n  const _useState13 = useState(false),\n        _useState14 = _slicedToArray(_useState13, 2),\n        loading = _useState14[0],\n        setLoading = _useState14[1];\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (calendarValue) {\n      setState(updateObject(state, {\n        noticeStartDate: calendarValue.startDate,\n        noticeEndDate: calendarValue.endDate\n      }));\n    }\n  }, [calendarValue]);\n  useEffect(() => {\n    if (editor == null) {\n      return;\n    }\n\n    setMarkdown(editor.getMarkdown());\n  }, [editor]);\n\n  const handleChangeInput = ev => {\n    const inputName = ev.target.name;\n    setState(updateObject(state, {\n      [inputName]: ev.target.value\n    }));\n  };\n\n  const handleEditorCallback = node => {\n    if (!node || !node.getInstance()) {\n      return;\n    }\n\n    setEditor(node.getInstance());\n  };\n\n  const loadOriginNotice = () => {\n    if (_isNil(originNotice)) {\n      alert(\"기존 공지사항 id를 숫자로 입력해 주세요.\");\n      setProcessText(\"기존 공지사항 id를 숫자로 입력해 주세요.\");\n      return;\n    }\n\n    getNotice(originNotice).then(response => {\n      if (_isEmpty(response.data)) {\n        alert(\"존재하지 않는 공지사항 id 입니다.\");\n        setProcessText(\"존재하지 않는 공지사항 id 입니다.\");\n        resetEditor();\n      } else {\n        let _response$data = response.data,\n            id = _response$data.id,\n            title = _response$data.title,\n            _response$data$markdo = _response$data.markdownContents,\n            markdownContents = _response$data$markdo === void 0 ? '' : _response$data$markdo,\n            noticeStartDate = _response$data.noticeStartDate,\n            noticeEndDate = _response$data.noticeEndDate;\n        noticeStartDate = noticeStartDate ? new Date(noticeStartDate) : new Date();\n        noticeEndDate = noticeEndDate ? new Date(noticeEndDate) : new Date();\n        markdownContents = markdownContents ? markdownContents : '';\n        setOriginNotice(id);\n        setModifyMode(true);\n        calendar.date = {\n          start: moment(noticeStartDate).toDate(),\n          end: moment(noticeEndDate).toDate()\n        };\n        calendar.refresh();\n        calendar.save();\n        setState(updateObject(state, {\n          title,\n          noticeStartDate,\n          noticeEndDate\n        }));\n        editor.setMarkdown(markdownContents);\n        setMarkdown(markdownContents);\n        setProcessText(\"공지사항 로드 성공: \" + originNotice);\n      }\n    }).catch(err => {\n      alert(\"공지사항 로드 실패 \");\n      console.log(\"공지사항 로드 실패 \", err);\n      setProcessText(\"공지사항 로드 실패\");\n      resetEditor();\n    });\n  };\n\n  const handleInsertNotice = () => {\n    let notice = updateObject(state, {\n      markdownContents: markdown\n    });\n    console.log(\"insert notice \", notice);\n    insertNotice(notice).then(response => {\n      console.log(response.data);\n      setProcessText(\"공지사항 등록 성공\");\n    }).catch(err => {\n      console.log(\"insert notice error\", err);\n      setProcessText(\"공지사항 등록 실패\");\n    }).finally(() => {\n      resetEditor();\n      dispatch(fetchNoticeList());\n    });\n  };\n\n  const handleModifyNotice = () => {\n    let notice = Object.assign({\n      id: originNotice\n    }, state, {\n      markdownContents: markdown\n    });\n    console.log(\"update notice \", notice);\n    updateNotice(notice).then(response => {\n      console.log(response.data);\n      setProcessText(\"공지사항 수정 성공\");\n    }).catch(err => {\n      console.log(\"modify notice error\", err);\n      setProcessText(\"공지사항 수정 실패\");\n    }).finally(() => {\n      resetEditor();\n      dispatch(fetchNoticeList());\n    });\n  };\n\n  const resetEditor = () => {\n    setModifyMode(false);\n    setOriginNotice(null);\n    editor.setMarkdown('');\n    setMarkdown('');\n    calendar.date = {\n      start: new Date(),\n      end: new Date()\n    };\n    calendar.refresh();\n    calendar.save();\n    setState(prev => {\n      return {\n        title: '',\n        noticeStartDate: new Date(),\n        noticeEndDate: new Date()\n      };\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    disabled: modifyMode,\n    className: \"button is-primary is-pulled-right\",\n    onClick: loadOriginNotice,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"\\uBD88\\uB7EC\\uC624\\uAE30\"), React.createElement(InputField, {\n    fieldName: \"\\uBD88\\uB7EC\\uC624\\uAE30\",\n    disabled: modifyMode,\n    name: \"origin\",\n    value: originNotice,\n    onChange: e => setOriginNotice(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    fieldName: \"\\uC81C\\uBAA9\",\n    disabled: loading,\n    name: \"title\",\n    value: state.title,\n    onChange: handleChangeInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), React.createElement(CustomField, {\n    fieldName: \"\\uAC8C\\uC2DC \\uAE30\\uAC04\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, calendarElements), React.createElement(NoticeEditor, {\n    callback: handleEditorCallback,\n    onChange: v => setMarkdown(editor.getMarkdown()),\n    imageUploadStart: b => setProcessText(`이미지 업로드 중...: ${fileSize(b.size)}`),\n    imageUploadFailed: err => setProcessText(`이미지 실패: ${fileSize(b.size)} ${err}`),\n    imageUploadFinish: b => setProcessText(`이미지 업로드 완료: ${fileSize(b.size)}`),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"row has-margin-top-5 has-margin-bottom-15 has-text-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"column is-paddingless\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"has-padding-right-10\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, processText), modifyMode ? React.createElement(React.Fragment, null, React.createElement(\"a\", {\n    className: \"button is-danger\",\n    onClick: () => resetEditor(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"\\uCDE8\\uC18C\"), React.createElement(\"a\", {\n    className: \"button is-info has-margin-left-5\",\n    onClick: handleModifyNotice,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"\\uC218\\uC815\")) : React.createElement(\"a\", {\n    className: \"button is-success\",\n    onClick: handleInsertNotice,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"\\uB4F1\\uB85D\"))), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }), React.createElement(EditorViewer, {\n    markdown: markdown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"row is-vertical\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"column is-size-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, \"\\uACF5\\uC9C0\\uC0AC\\uD56D \\uB9AC\\uC2A4\\uD2B8\"), React.createElement(\"div\", {\n    className: \"column is-top-paddingless\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"box is-paddingless\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(NoticeListTable, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  })))));\n};\n\nexport default NoticeForm;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/admin/NoticeForm.jsx"],"names":["React","useEffect","useState","CustomField","InputField","updateObject","useBulmaCalendar","NoticeEditor","EditorViewer","fileSize","getNotice","insertNotice","updateNotice","useDispatch","fetchNoticeList","NoticeListTable","isNil","_isNil","isEmpty","_isEmpty","moment","MOMENT_DATE_FORMAT","NoticeForm","title","noticeStartDate","noticeEndDate","state","setState","originNotice","setOriginNotice","modifyMode","setModifyMode","calendarElements","calendarValue","calendar","editor","setEditor","markdown","setMarkdown","processText","setProcessText","loading","setLoading","dispatch","startDate","endDate","getMarkdown","handleChangeInput","ev","inputName","target","name","value","handleEditorCallback","node","getInstance","loadOriginNotice","alert","then","response","data","resetEditor","id","markdownContents","Date","date","start","toDate","end","refresh","save","catch","err","console","log","handleInsertNotice","notice","finally","handleModifyNotice","Object","assign","prev","e","v","b","size"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {CustomField, InputField} from \"components/admin/AdminFields\";\nimport {updateObject} from \"data/util\";\nimport useBulmaCalendar from \"components/common/ui/components\";\nimport NoticeEditor, {EditorViewer} from \"components/admin/NoticeEditor\";\nimport fileSize from \"filesize\";\nimport {getNotice, insertNotice, updateNotice} from \"data/api\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchNoticeList} from \"data/redux/action/notice\";\nimport NoticeListTable from \"components/notice/NoticeListTable\";\nimport {isNil as _isNil, isEmpty as _isEmpty} from 'lodash';\nimport moment from \"moment\";\nimport {MOMENT_DATE_FORMAT} from \"assets/styles/const\";\n\nconst NoticeForm = () => {\n    const [state, setState] = useState({\n        title: \"\",\n        noticeStartDate: null,\n        noticeEndDate: null\n    });\n    const [originNotice, setOriginNotice] = useState(null);\n    const [modifyMode, setModifyMode] = useState(false);\n    const [calendarElements, calendarValue, calendar] = useBulmaCalendar({}, true);\n    const [editor, setEditor] = useState(null);\n    const [markdown, setMarkdown] = useState(\"\");\n    const [processText, setProcessText] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (calendarValue) {\n            setState(updateObject(state, {noticeStartDate: calendarValue.startDate, noticeEndDate:calendarValue.endDate}));\n        }\n    }, [calendarValue])\n\n\n    useEffect(() => {\n        if (editor == null) {\n            return ;\n        }\n        setMarkdown(editor.getMarkdown());\n    }, [editor])\n\n\n    const handleChangeInput = (ev) => {\n        const inputName = ev.target.name;\n        setState(updateObject(state, {[inputName]: ev.target.value}));\n    }\n\n    const handleEditorCallback = (node) => {\n        if (!node || !node.getInstance()) {\n            return ;\n        }\n        setEditor(node.getInstance());\n    }\n\n    const loadOriginNotice = () => {\n        if (_isNil(originNotice)) {\n            alert(\"기존 공지사항 id를 숫자로 입력해 주세요.\");\n            setProcessText(\"기존 공지사항 id를 숫자로 입력해 주세요.\")\n            return ;\n        }\n        getNotice(originNotice)\n            .then(response => {\n                if (_isEmpty(response.data)) {\n                    alert(\"존재하지 않는 공지사항 id 입니다.\")\n                    setProcessText(\"존재하지 않는 공지사항 id 입니다.\")\n                    resetEditor();\n                } else {\n                    let {id, title, markdownContents='', noticeStartDate, noticeEndDate} = response.data;\n                    noticeStartDate = noticeStartDate ? new Date(noticeStartDate) : new Date()\n                    noticeEndDate = noticeEndDate ? new Date(noticeEndDate) : new Date()\n                    markdownContents = markdownContents ? markdownContents : '';\n\n                    setOriginNotice(id);\n                    setModifyMode(true);\n                    calendar.date = {start: moment(noticeStartDate).toDate(), end: moment(noticeEndDate).toDate()};\n                    calendar.refresh()\n                    calendar.save()\n                    setState(updateObject(state, {title, noticeStartDate, noticeEndDate}));\n                    editor.setMarkdown(markdownContents);\n                    setMarkdown(markdownContents);\n                    setProcessText(\"공지사항 로드 성공: \" + originNotice);\n                }\n            })\n            .catch(err => {\n                alert(\"공지사항 로드 실패 \")\n                console.log(\"공지사항 로드 실패 \", err)\n                setProcessText(\"공지사항 로드 실패\")\n                resetEditor();\n            })\n    }\n\n    const handleInsertNotice = () => {\n        let notice = updateObject(state, {markdownContents: markdown});\n        console.log(\"insert notice \", notice);\n        insertNotice(notice)\n            .then(response => {\n                console.log(response.data)\n                setProcessText(\"공지사항 등록 성공\")\n            })\n            .catch(err => {\n                console.log(\"insert notice error\", err);\n                setProcessText(\"공지사항 등록 실패\")\n            })\n            .finally(() => {\n                resetEditor()\n                dispatch(fetchNoticeList());\n            })\n    }\n\n    const handleModifyNotice = () => {\n        let notice = Object.assign({id: originNotice}, state, {markdownContents: markdown});\n        console.log(\"update notice \", notice);\n        updateNotice(notice)\n            .then(response => {\n                console.log(response.data)\n                setProcessText(\"공지사항 수정 성공\")\n            })\n            .catch(err => {\n                console.log(\"modify notice error\", err);\n                setProcessText(\"공지사항 수정 실패\")\n            })\n            .finally(() => {\n                resetEditor()\n                dispatch(fetchNoticeList());\n            })\n    }\n\n    const resetEditor = () => {\n        setModifyMode(false);\n        setOriginNotice(null);\n        editor.setMarkdown('');\n        setMarkdown('');\n        calendar.date = {start: new Date(), end: new Date()};\n        calendar.refresh()\n        calendar.save()\n        setState((prev) => {\n            return {title: '', noticeStartDate: new Date(), noticeEndDate: new Date()}\n        });\n    }\n\n    return (\n        <>\n            <button disabled={modifyMode} className=\"button is-primary is-pulled-right\" onClick={loadOriginNotice}>불러오기</button>\n            <InputField fieldName=\"불러오기\" disabled={modifyMode} name=\"origin\" value={originNotice} onChange={(e) => setOriginNotice(e.target.value)} />\n            <InputField fieldName=\"제목\" disabled={loading} name=\"title\" value={state.title} onChange={handleChangeInput} />\n            <CustomField fieldName=\"게시 기간\">{calendarElements}</CustomField>\n            <NoticeEditor\n                callback={handleEditorCallback}\n                onChange={(v) => setMarkdown(editor.getMarkdown())}\n                imageUploadStart={(b) => setProcessText(`이미지 업로드 중...: ${fileSize(b.size)}`)}\n                imageUploadFailed={(err) => setProcessText(`이미지 실패: ${fileSize(b.size)} ${err}`)}\n                imageUploadFinish={(b) => setProcessText(`이미지 업로드 완료: ${fileSize(b.size)}`)}\n            />\n            <div className=\"row has-margin-top-5 has-margin-bottom-15 has-text-right\">\n                <div className=\"column is-paddingless\">\n                    <span className=\"has-padding-right-10\">{processText}</span>\n                    {modifyMode\n                        ? <><a className=\"button is-danger\" onClick={() => resetEditor()}>취소</a><a className=\"button is-info has-margin-left-5\" onClick={handleModifyNotice}>수정</a></>\n                        : <a className=\"button is-success\" onClick={handleInsertNotice}>등록</a>\n                    }\n\n                </div>\n            </div>\n            <hr />\n            <EditorViewer markdown={markdown}></EditorViewer>\n            <div className=\"row is-vertical\">\n                <h1 className=\"column is-size-5\">공지사항 리스트</h1>\n                <div className=\"column is-top-paddingless\">\n                    <div className=\"box is-paddingless\">\n                        <NoticeListTable />\n                    </div>\n                </div>\n            </div>\n\n        </>\n    )\n\n}\n\nexport default NoticeForm;\n\n"]},"metadata":{},"sourceType":"module"}