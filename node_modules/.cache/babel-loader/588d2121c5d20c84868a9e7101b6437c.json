{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _function = require('react-pure-render/function');\n\nvar _function2 = _interopRequireDefault(_function);\n\nvar _reduxDevtoolsThemes = require('redux-devtools-themes');\n\nvar themes = _interopRequireWildcard(_reduxDevtoolsThemes);\n\nvar _reduxDevtools = require('redux-devtools');\n\nvar _actions = require('./actions');\n\nvar _reducers = require('./reducers');\n\nvar _reducers2 = _interopRequireDefault(_reducers);\n\nvar _LogMonitorButtonBar = require('./LogMonitorButtonBar');\n\nvar _LogMonitorButtonBar2 = _interopRequireDefault(_LogMonitorButtonBar);\n\nvar _LogMonitorEntryList = require('./LogMonitorEntryList');\n\nvar _LogMonitorEntryList2 = _interopRequireDefault(_LogMonitorEntryList);\n\nvar _lodash = require('lodash.debounce');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar toggleAction = _reduxDevtools.ActionCreators.toggleAction;\nvar setActionsActive = _reduxDevtools.ActionCreators.setActionsActive;\nvar styles = {\n  container: {\n    fontFamily: 'monaco, Consolas, Lucida Console, monospace',\n    position: 'relative',\n    overflowY: 'hidden',\n    width: '100%',\n    height: '100%',\n    minWidth: 300,\n    direction: 'ltr'\n  },\n  elements: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    overflowX: 'hidden',\n    overflowY: 'auto'\n  }\n};\n\nvar LogMonitor = function (_Component) {\n  _inherits(LogMonitor, _Component);\n\n  function LogMonitor(props) {\n    _classCallCheck(this, LogMonitor);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.shouldComponentUpdate = _function2.default;\n    _this.updateScrollTop = (0, _lodash2.default)(function () {\n      var node = _this.node;\n\n      _this.props.dispatch((0, _actions.updateScrollTop)(node ? node.scrollTop : 0));\n    }, 500);\n    _this.handleToggleAction = _this.handleToggleAction.bind(_this);\n    _this.handleToggleConsecutiveAction = _this.handleToggleConsecutiveAction.bind(_this);\n    _this.getRef = _this.getRef.bind(_this);\n    return _this;\n  }\n\n  LogMonitor.prototype.scroll = function scroll() {\n    var node = this.node;\n\n    if (!node) {\n      return;\n    }\n\n    if (this.scrollDown) {\n      var offsetHeight = node.offsetHeight;\n      var scrollHeight = node.scrollHeight;\n      node.scrollTop = scrollHeight - offsetHeight;\n      this.scrollDown = false;\n    }\n  };\n\n  LogMonitor.prototype.componentDidMount = function componentDidMount() {\n    var node = this.node;\n\n    if (!node || !this.props.monitorState) {\n      return;\n    }\n\n    if (this.props.preserveScrollTop) {\n      node.scrollTop = this.props.monitorState.initialScrollTop;\n      node.addEventListener('scroll', this.updateScrollTop);\n    } else {\n      this.scrollDown = true;\n      this.scroll();\n    }\n  };\n\n  LogMonitor.prototype.componentWillUnmount = function componentWillUnmount() {\n    var node = this.node;\n\n    if (node && this.props.preserveScrollTop) {\n      node.removeEventListener('scroll', this.updateScrollTop);\n    }\n  };\n\n  LogMonitor.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var node = this.node;\n\n    if (!node) {\n      this.scrollDown = true;\n    } else if (this.props.stagedActionIds.length < nextProps.stagedActionIds.length) {\n      var scrollTop = node.scrollTop;\n      var offsetHeight = node.offsetHeight;\n      var scrollHeight = node.scrollHeight;\n      this.scrollDown = Math.abs(scrollHeight - (scrollTop + offsetHeight)) < 20;\n    } else {\n      this.scrollDown = false;\n    }\n  };\n\n  LogMonitor.prototype.componentDidUpdate = function componentDidUpdate() {\n    this.scroll();\n  };\n\n  LogMonitor.prototype.handleToggleAction = function handleToggleAction(id) {\n    this.props.dispatch(toggleAction(id));\n  };\n\n  LogMonitor.prototype.handleToggleConsecutiveAction = function handleToggleConsecutiveAction(id) {\n    var _props = this.props;\n    var monitorState = _props.monitorState;\n    var actionsById = _props.actionsById;\n    var consecutiveToggleStartId = monitorState.consecutiveToggleStartId;\n\n    if (consecutiveToggleStartId && actionsById[consecutiveToggleStartId]) {\n      var skippedActionIds = this.props.skippedActionIds;\n      var start = Math.min(consecutiveToggleStartId, id);\n      var end = Math.max(consecutiveToggleStartId, id);\n      var active = skippedActionIds.indexOf(consecutiveToggleStartId) > -1;\n      this.props.dispatch(setActionsActive(start, end + 1, active));\n      this.props.dispatch((0, _actions.startConsecutiveToggle)(null));\n    } else if (id > 0) {\n      this.props.dispatch((0, _actions.startConsecutiveToggle)(id));\n    }\n  };\n\n  LogMonitor.prototype.getTheme = function getTheme() {\n    var theme = this.props.theme;\n\n    if (typeof theme !== 'string') {\n      return theme;\n    }\n\n    if (typeof themes[theme] !== 'undefined') {\n      return themes[theme];\n    }\n\n    console.warn('DevTools theme ' + theme + ' not found, defaulting to nicinabox');\n    return themes.nicinabox;\n  };\n\n  LogMonitor.prototype.getRef = function getRef(node) {\n    this.node = node;\n  };\n\n  LogMonitor.prototype.render = function render() {\n    var theme = this.getTheme();\n    var consecutiveToggleStartId = this.props.monitorState.consecutiveToggleStartId;\n    var _props2 = this.props;\n    var dispatch = _props2.dispatch;\n    var actionsById = _props2.actionsById;\n    var skippedActionIds = _props2.skippedActionIds;\n    var stagedActionIds = _props2.stagedActionIds;\n    var computedStates = _props2.computedStates;\n    var currentStateIndex = _props2.currentStateIndex;\n    var select = _props2.select;\n    var expandActionRoot = _props2.expandActionRoot;\n    var expandStateRoot = _props2.expandStateRoot;\n    var markStateDiff = _props2.markStateDiff;\n    var entryListProps = {\n      theme: theme,\n      actionsById: actionsById,\n      skippedActionIds: skippedActionIds,\n      stagedActionIds: stagedActionIds,\n      computedStates: computedStates,\n      currentStateIndex: currentStateIndex,\n      consecutiveToggleStartId: consecutiveToggleStartId,\n      select: select,\n      expandActionRoot: expandActionRoot,\n      expandStateRoot: expandStateRoot,\n      markStateDiff: markStateDiff,\n      onActionClick: this.handleToggleAction,\n      onActionShiftClick: this.handleToggleConsecutiveAction\n    };\n    return _react2.default.createElement('div', {\n      style: _extends({}, styles.container, {\n        backgroundColor: theme.base00\n      })\n    }, !this.props.hideMainButtons && _react2.default.createElement(_LogMonitorButtonBar2.default, {\n      theme: theme,\n      dispatch: dispatch,\n      hasStates: computedStates.length > 1,\n      hasSkippedActions: skippedActionIds.length > 0\n    }), _react2.default.createElement('div', {\n      style: this.props.hideMainButtons ? styles.elements : _extends({}, styles.elements, {\n        top: 30\n      }),\n      ref: this.getRef\n    }, _react2.default.createElement(_LogMonitorEntryList2.default, entryListProps)));\n  };\n\n  return LogMonitor;\n}(_react.Component);\n\nLogMonitor.update = _reducers2.default;\nLogMonitor.propTypes = {\n  dispatch: _propTypes2.default.func,\n  computedStates: _propTypes2.default.array,\n  actionsById: _propTypes2.default.object,\n  stagedActionIds: _propTypes2.default.array,\n  skippedActionIds: _propTypes2.default.array,\n  monitorState: _propTypes2.default.shape({\n    initialScrollTop: _propTypes2.default.number,\n    consecutiveToggleStartId: _propTypes2.default.number\n  }),\n  preserveScrollTop: _propTypes2.default.bool,\n  select: _propTypes2.default.func,\n  theme: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),\n  expandActionRoot: _propTypes2.default.bool,\n  expandStateRoot: _propTypes2.default.bool,\n  markStateDiff: _propTypes2.default.bool,\n  hideMainButtons: _propTypes2.default.bool\n};\nLogMonitor.defaultProps = {\n  select: function select(state) {\n    return state;\n  },\n  theme: 'nicinabox',\n  preserveScrollTop: true,\n  expandActionRoot: true,\n  expandStateRoot: true,\n  markStateDiff: false\n};\nexports.default = LogMonitor;","map":null,"metadata":{},"sourceType":"script"}