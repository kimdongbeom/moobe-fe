{"ast":null,"code":"import { updateObject } from \"data/util\";\nimport { isObjectLike as _isObjectLike, isNull as _isNull, isEmpty as _isEmpty } from 'lodash';\nimport { USER_RESET_USER, USER_SET_USER } from \"data/redux/action/user\";\nimport MoobeUser from \"data/redux/model/User\";\nimport { LOGOUT_REDIRECT_URL } from \"data/api\";\nconst initialStateUser = {\n  user: null\n};\n\nfunction setUser(userState, user) {\n  let oldUser = userState.user;\n  let newUser = null;\n\n  if (_isObjectLike(user)) {\n    newUser = new MoobeUser(user);\n  } else {\n    //failed to get user info\n    return updateObject(userState, {\n      user: null\n    });\n  }\n\n  if (isValidSession(oldUser, newUser)) {\n    return updateObject(userState, {\n      user: newUser\n    });\n  } else {\n    alert(\"세션 정보가 올바르지 않습니다.!\");\n    return updateObject(userState, {\n      user: null\n    });\n  }\n}\n\nfunction isValidSession(oldUser, newUser) {\n  if (_isNull(newUser) || _isEmpty(newUser.email)) {\n    return false;\n  }\n\n  if (_isNull(oldUser)) {\n    //first login\n    return true;\n  } else {\n    if (oldUser.email === newUser.email) {\n      //same user as before\n      return true;\n    } else {\n      //not same user as before. force logout\n      alert(\"잘못된 사용자 정보 입니다.\");\n      window.location = LOGOUT_REDIRECT_URL;\n      return false;\n    }\n  }\n}\n\nexport default function (userState = initialStateUser, action) {\n  switch (action.type) {\n    case USER_SET_USER:\n      return setUser(userState, action.user);\n\n    case USER_RESET_USER:\n      return updateObject(userState, {\n        user: null\n      });\n\n    default:\n      return userState;\n  }\n}","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/redux/reducers/userReducer.js"],"names":["updateObject","isObjectLike","_isObjectLike","isNull","_isNull","isEmpty","_isEmpty","USER_RESET_USER","USER_SET_USER","MoobeUser","LOGOUT_REDIRECT_URL","initialStateUser","user","setUser","userState","oldUser","newUser","isValidSession","alert","email","window","location","action","type"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AACA,SAAQC,YAAY,IAAIC,aAAxB,EAAuCC,MAAM,IAAIC,OAAjD,EAA0DC,OAAO,IAAIC,QAArE,QAAoF,QAApF;AACA,SAAQC,eAAR,EAAyBC,aAAzB,QAA6C,wBAA7C;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SAAQC,mBAAR,QAAkC,UAAlC;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,IAAI,EAAE;AADe,CAAzB;;AAIA,SAASC,OAAT,CAAiBC,SAAjB,EAA4BF,IAA5B,EAAkC;AAC9B,MAAIG,OAAO,GAAGD,SAAS,CAACF,IAAxB;AACA,MAAII,OAAO,GAAI,IAAf;;AAEA,MAAId,aAAa,CAACU,IAAD,CAAjB,EAAyB;AACrBI,IAAAA,OAAO,GAAG,IAAIP,SAAJ,CAAcG,IAAd,CAAV;AACH,GAFD,MAEO;AAAE;AACL,WAAOZ,YAAY,CAACc,SAAD,EAAY;AAACF,MAAAA,IAAI,EAAE;AAAP,KAAZ,CAAnB;AACH;;AAED,MAAGK,cAAc,CAACF,OAAD,EAAUC,OAAV,CAAjB,EAAqC;AACjC,WAAOhB,YAAY,CAACc,SAAD,EAAY;AAACF,MAAAA,IAAI,EAAEI;AAAP,KAAZ,CAAnB;AACH,GAFD,MAEO;AACHE,IAAAA,KAAK,CAAC,oBAAD,CAAL;AACA,WAAOlB,YAAY,CAACc,SAAD,EAAY;AAACF,MAAAA,IAAI,EAAE;AAAP,KAAZ,CAAnB;AACH;AACJ;;AAED,SAASK,cAAT,CAAwBF,OAAxB,EAAiCC,OAAjC,EAA0C;AACtC,MAAIZ,OAAO,CAACY,OAAD,CAAP,IAAoBV,QAAQ,CAACU,OAAO,CAACG,KAAT,CAAhC,EAAiD;AAC7C,WAAO,KAAP;AACH;;AAED,MAAIf,OAAO,CAACW,OAAD,CAAX,EAAsB;AAAE;AACpB,WAAO,IAAP;AACH,GAFD,MAEO;AACH,QAAIA,OAAO,CAACI,KAAR,KAAkBH,OAAO,CAACG,KAA9B,EAAqC;AAAC;AAClC,aAAO,IAAP;AACH,KAFD,MAEO;AAAE;AACLD,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACAE,MAAAA,MAAM,CAACC,QAAP,GAAkBX,mBAAlB;AACA,aAAO,KAAP;AACH;AACJ;AACJ;;AAED,eAAe,UAASI,SAAS,GAAGH,gBAArB,EAAuCW,MAAvC,EAA+C;AAC1D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKf,aAAL;AAAoB,aAAOK,OAAO,CAACC,SAAD,EAAYQ,MAAM,CAACV,IAAnB,CAAd;;AACpB,SAAKL,eAAL;AAAsB,aAAOP,YAAY,CAACc,SAAD,EAAY;AAACF,QAAAA,IAAI,EAAE;AAAP,OAAZ,CAAnB;;AACtB;AAAU,aAAOE,SAAP;AAHd;AAKH","sourcesContent":["import {updateObject} from \"data/util\";\nimport {isObjectLike as _isObjectLike, isNull as _isNull, isEmpty as _isEmpty} from 'lodash';\nimport {USER_RESET_USER, USER_SET_USER} from \"data/redux/action/user\";\nimport MoobeUser from \"data/redux/model/User\";\nimport {LOGOUT_REDIRECT_URL} from \"data/api\";\n\nconst initialStateUser = {\n    user: null\n};\n\nfunction setUser(userState, user) {\n    let oldUser = userState.user;\n    let newUser  = null;\n\n    if (_isObjectLike(user)) {\n        newUser = new MoobeUser(user);\n    } else { //failed to get user info\n        return updateObject(userState, {user: null})\n    }\n\n    if(isValidSession(oldUser, newUser)) {\n        return updateObject(userState, {user: newUser})\n    } else {\n        alert(\"세션 정보가 올바르지 않습니다.!\");\n        return updateObject(userState, {user: null})\n    }\n}\n\nfunction isValidSession(oldUser, newUser) {\n    if (_isNull(newUser) || _isEmpty(newUser.email)) {\n        return false;\n    }\n\n    if (_isNull(oldUser)) { //first login\n        return true\n    } else {\n        if (oldUser.email === newUser.email) {//same user as before\n            return true\n        } else { //not same user as before. force logout\n            alert(\"잘못된 사용자 정보 입니다.\");\n            window.location = LOGOUT_REDIRECT_URL;\n            return false\n        }\n    }\n}\n\nexport default function(userState = initialStateUser, action) {\n    switch(action.type) {\n        case USER_SET_USER: return setUser(userState, action.user);\n        case USER_RESET_USER: return updateObject(userState, {user: null});\n        default : return userState;\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}