{"ast":null,"code":"import { updateObject } from \"data/util\";\nimport { map as _map } from \"lodash\";\nimport { FAVORITE_CHANNEL_FETCH_CHANNEL_FINISHED, FAVORITE_CHANNEL_FETCH_CHANNEL_STARTED, FAVORITE_CHANNEL_FETCH_CHANNEL_SUCCESS, FAVORITE_CHANNEL_RESET_CHANNEL_DATA, FAVORITE_CHANNEL_SET_CHANNEL_LOADING } from \"data/redux/action/favorite\";\nimport Channel from \"data/redux/model/Channel\";\nconst initialStateFavoriteChannel = {\n  activeFavoriteChannel: null,\n  favoriteChannelList: [],\n  favoriteChannelLoading: false\n};\n\nfunction fetchSuccess(favoriteChannel, response) {\n  const data = response.data;\n  let favoriteChannelList = renderResult(data);\n  return updateObject(favoriteChannel, {\n    favoriteChannelList\n  });\n}\n\nfunction renderResult(results) {\n  if (results) {\n    return _map(results, result => new Channel(result));\n  } else {\n    return [];\n  }\n}\n\nexport default function (favoriteChannelState = initialStateFavoriteChannel, action) {\n  switch (action.type) {\n    case FAVORITE_CHANNEL_RESET_CHANNEL_DATA:\n      return updateObject(favoriteChannelState, initialStateFavoriteChannel);\n\n    case FAVORITE_CHANNEL_SET_CHANNEL_LOADING:\n      return updateObject(favoriteChannelState, {\n        favoriteChannelLoading: action.favoriteChannelLoading\n      });\n\n    case FAVORITE_CHANNEL_FETCH_CHANNEL_STARTED:\n      return updateObject(favoriteChannelState, {\n        favoriteChannelLoading: true\n      });\n\n    case FAVORITE_CHANNEL_FETCH_CHANNEL_FINISHED:\n      return updateObject(favoriteChannelState, {\n        favoriteChannelLoading: false\n      });\n\n    case FAVORITE_CHANNEL_FETCH_CHANNEL_SUCCESS:\n      return fetchSuccess(favoriteChannelState, action.data);\n\n    default:\n      return favoriteChannelState;\n  }\n}","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/redux/reducers/favoriteChannelReducer.js"],"names":["updateObject","map","_map","FAVORITE_CHANNEL_FETCH_CHANNEL_FINISHED","FAVORITE_CHANNEL_FETCH_CHANNEL_STARTED","FAVORITE_CHANNEL_FETCH_CHANNEL_SUCCESS","FAVORITE_CHANNEL_RESET_CHANNEL_DATA","FAVORITE_CHANNEL_SET_CHANNEL_LOADING","Channel","initialStateFavoriteChannel","activeFavoriteChannel","favoriteChannelList","favoriteChannelLoading","fetchSuccess","favoriteChannel","response","data","renderResult","results","result","favoriteChannelState","action","type"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AACA,SAAQC,GAAG,IAAIC,IAAf,QAA0B,QAA1B;AACA,SACIC,uCADJ,EAEIC,sCAFJ,EAGIC,sCAHJ,EAIIC,mCAJJ,EAKIC,oCALJ,QAMO,4BANP;AAOA,OAAOC,OAAP,MAAoB,0BAApB;AAEA,MAAMC,2BAA2B,GAAG;AAChCC,EAAAA,qBAAqB,EAAE,IADS;AAEhCC,EAAAA,mBAAmB,EAAE,EAFW;AAGhCC,EAAAA,sBAAsB,EAAE;AAHQ,CAApC;;AAMA,SAASC,YAAT,CAAsBC,eAAtB,EAAuCC,QAAvC,EAAiD;AAAA,QACtCC,IADsC,GAC9BD,QAD8B,CACtCC,IADsC;AAE7C,MAAIL,mBAAmB,GAAGM,YAAY,CAACD,IAAD,CAAtC;AACA,SAAOhB,YAAY,CAACc,eAAD,EAAkB;AAACH,IAAAA;AAAD,GAAlB,CAAnB;AACH;;AAED,SAASM,YAAT,CAAsBC,OAAtB,EAA+B;AAC3B,MAAIA,OAAJ,EAAa;AACT,WAAOhB,IAAI,CAACgB,OAAD,EAAWC,MAAD,IAAY,IAAIX,OAAJ,CAAYW,MAAZ,CAAtB,CAAX;AACH,GAFD,MAEO;AACH,WAAO,EAAP;AACH;AACJ;;AAED,eAAe,UAASC,oBAAoB,GAAGX,2BAAhC,EAA6DY,MAA7D,EAAqE;AAChF,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKhB,mCAAL;AAA0C,aAAON,YAAY,CAACoB,oBAAD,EAAuBX,2BAAvB,CAAnB;;AAC1C,SAAKF,oCAAL;AAA4C,aAAOP,YAAY,CAACoB,oBAAD,EAAuB;AAACR,QAAAA,sBAAsB,EAAES,MAAM,CAACT;AAAhC,OAAvB,CAAnB;;AAC5C,SAAKR,sCAAL;AAA8C,aAAOJ,YAAY,CAACoB,oBAAD,EAAuB;AAACR,QAAAA,sBAAsB,EAAE;AAAzB,OAAvB,CAAnB;;AAC9C,SAAKT,uCAAL;AAA+C,aAAOH,YAAY,CAACoB,oBAAD,EAAuB;AAACR,QAAAA,sBAAsB,EAAE;AAAzB,OAAvB,CAAnB;;AAC/C,SAAKP,sCAAL;AAA8C,aAAOQ,YAAY,CAACO,oBAAD,EAAuBC,MAAM,CAACL,IAA9B,CAAnB;;AAC9C;AAAU,aAAOI,oBAAP;AANd;AAQH","sourcesContent":["import {updateObject} from \"data/util\";\nimport {map as _map} from \"lodash\";\nimport {\n    FAVORITE_CHANNEL_FETCH_CHANNEL_FINISHED,\n    FAVORITE_CHANNEL_FETCH_CHANNEL_STARTED,\n    FAVORITE_CHANNEL_FETCH_CHANNEL_SUCCESS,\n    FAVORITE_CHANNEL_RESET_CHANNEL_DATA,\n    FAVORITE_CHANNEL_SET_CHANNEL_LOADING\n} from \"data/redux/action/favorite\";\nimport Channel from \"data/redux/model/Channel\";\n\nconst initialStateFavoriteChannel = {\n    activeFavoriteChannel: null,\n    favoriteChannelList: [],\n    favoriteChannelLoading: false,\n};\n\nfunction fetchSuccess(favoriteChannel, response) {\n    const {data} = response;\n    let favoriteChannelList = renderResult(data)\n    return updateObject(favoriteChannel, {favoriteChannelList})\n}\n\nfunction renderResult(results) {\n    if (results) {\n        return _map(results, (result) => new Channel(result));\n    } else {\n        return []\n    }\n}\n\nexport default function(favoriteChannelState = initialStateFavoriteChannel, action) {\n    switch(action.type) {\n        case FAVORITE_CHANNEL_RESET_CHANNEL_DATA: return updateObject(favoriteChannelState, initialStateFavoriteChannel);\n        case FAVORITE_CHANNEL_SET_CHANNEL_LOADING : return updateObject(favoriteChannelState, {favoriteChannelLoading: action.favoriteChannelLoading});\n        case FAVORITE_CHANNEL_FETCH_CHANNEL_STARTED : return updateObject(favoriteChannelState, {favoriteChannelLoading: true});\n        case FAVORITE_CHANNEL_FETCH_CHANNEL_FINISHED : return updateObject(favoriteChannelState, {favoriteChannelLoading: false});\n        case FAVORITE_CHANNEL_FETCH_CHANNEL_SUCCESS : return fetchSuccess(favoriteChannelState, action.data);\n        default : return favoriteChannelState;\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}