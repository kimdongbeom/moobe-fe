{"ast":null,"code":"import { updateObject } from \"data/util\";\nimport Content from \"data/redux/model/Content\";\nimport { map as _map } from \"lodash\";\nimport { FAVORITE_CONTENT_FETCH_CONTENT_FINISHED, FAVORITE_CONTENT_FETCH_CONTENT_STARTED, FAVORITE_CONTENT_FETCH_CONTENT_SUCCESS, FAVORITE_CONTENT_RESET_CONTENT_DATA, FAVORITE_CONTENT_SET_CONTENT_LOADING } from \"data/redux/action/favorite\";\nimport FavoriteContent from \"data/redux/model/FavoriteContent\";\nconst initialStateFavoriteContent = {\n  favoriteContentDetail: {},\n  favoriteContentList: [],\n  favoriteContentLoading: false,\n  totalCount: 0,\n  maxPage: 0\n};\n\nfunction fetchSuccess(favoriteContentState, response) {\n  const data = response.data;\n  let favoriteContentList = renderResult(data);\n  return updateObject(favoriteContentState, {\n    favoriteContentList\n  });\n}\n\nfunction renderResult(results) {\n  if (results) {\n    return _map(results, result => new FavoriteContent({\n      content: new Content(result)\n    }));\n  } else {\n    return [];\n  }\n}\n\nexport default function (favoriteContentState = initialStateFavoriteContent, action) {\n  switch (action.type) {\n    case FAVORITE_CONTENT_RESET_CONTENT_DATA:\n      return updateObject(favoriteContentState, initialStateFavoriteContent);\n\n    case FAVORITE_CONTENT_SET_CONTENT_LOADING:\n      return updateObject(favoriteContentState, {\n        favoriteContentLoading: action.favoriteContentLoading\n      });\n\n    case FAVORITE_CONTENT_FETCH_CONTENT_STARTED:\n      return updateObject(favoriteContentState, {\n        favoriteContentLoading: true\n      });\n\n    case FAVORITE_CONTENT_FETCH_CONTENT_FINISHED:\n      return updateObject(favoriteContentState, {\n        favoriteContentLoading: false\n      });\n\n    case FAVORITE_CONTENT_FETCH_CONTENT_SUCCESS:\n      return fetchSuccess(favoriteContentState, action.data);\n\n    default:\n      return favoriteContentState;\n  }\n}","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/redux/reducers/favoriteContentReducer.js"],"names":["updateObject","Content","map","_map","FAVORITE_CONTENT_FETCH_CONTENT_FINISHED","FAVORITE_CONTENT_FETCH_CONTENT_STARTED","FAVORITE_CONTENT_FETCH_CONTENT_SUCCESS","FAVORITE_CONTENT_RESET_CONTENT_DATA","FAVORITE_CONTENT_SET_CONTENT_LOADING","FavoriteContent","initialStateFavoriteContent","favoriteContentDetail","favoriteContentList","favoriteContentLoading","totalCount","maxPage","fetchSuccess","favoriteContentState","response","data","renderResult","results","result","content","action","type"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,SAAQC,GAAG,IAAIC,IAAf,QAA0B,QAA1B;AACA,SACIC,uCADJ,EAEIC,sCAFJ,EAGIC,sCAHJ,EAIIC,mCAJJ,EAKIC,oCALJ,QAMO,4BANP;AAOA,OAAOC,eAAP,MAA4B,kCAA5B;AAEA,MAAMC,2BAA2B,GAAG;AAChCC,EAAAA,qBAAqB,EAAE,EADS;AAEhCC,EAAAA,mBAAmB,EAAE,EAFW;AAGhCC,EAAAA,sBAAsB,EAAE,KAHQ;AAIhCC,EAAAA,UAAU,EAAE,CAJoB;AAKhCC,EAAAA,OAAO,EAAE;AALuB,CAApC;;AAQA,SAASC,YAAT,CAAsBC,oBAAtB,EAA4CC,QAA5C,EAAsD;AAAA,QAC3CC,IAD2C,GACnCD,QADmC,CAC3CC,IAD2C;AAElD,MAAIP,mBAAmB,GAAGQ,YAAY,CAACD,IAAD,CAAtC;AACA,SAAOnB,YAAY,CAACiB,oBAAD,EAAuB;AAACL,IAAAA;AAAD,GAAvB,CAAnB;AACH;;AAED,SAASQ,YAAT,CAAsBC,OAAtB,EAA+B;AAC3B,MAAIA,OAAJ,EAAa;AACT,WAAOlB,IAAI,CAACkB,OAAD,EAAWC,MAAD,IAAY,IAAIb,eAAJ,CAAoB;AAACc,MAAAA,OAAO,EAAE,IAAItB,OAAJ,CAAYqB,MAAZ;AAAV,KAApB,CAAtB,CAAX;AACH,GAFD,MAEO;AACH,WAAO,EAAP;AACH;AACJ;;AAED,eAAe,UAASL,oBAAoB,GAAGP,2BAAhC,EAA6Dc,MAA7D,EAAqE;AAChF,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKlB,mCAAL;AAA0C,aAAOP,YAAY,CAACiB,oBAAD,EAAuBP,2BAAvB,CAAnB;;AAC1C,SAAKF,oCAAL;AAA4C,aAAOR,YAAY,CAACiB,oBAAD,EAAuB;AAACJ,QAAAA,sBAAsB,EAAEW,MAAM,CAACX;AAAhC,OAAvB,CAAnB;;AAC5C,SAAKR,sCAAL;AAA8C,aAAOL,YAAY,CAACiB,oBAAD,EAAuB;AAACJ,QAAAA,sBAAsB,EAAE;AAAzB,OAAvB,CAAnB;;AAC9C,SAAKT,uCAAL;AAA+C,aAAOJ,YAAY,CAACiB,oBAAD,EAAuB;AAACJ,QAAAA,sBAAsB,EAAE;AAAzB,OAAvB,CAAnB;;AAC/C,SAAKP,sCAAL;AAA8C,aAAOU,YAAY,CAACC,oBAAD,EAAuBO,MAAM,CAACL,IAA9B,CAAnB;;AAC9C;AAAU,aAAOF,oBAAP;AANd;AAQH","sourcesContent":["import {updateObject} from \"data/util\";\nimport Content from \"data/redux/model/Content\";\nimport {map as _map} from \"lodash\";\nimport {\n    FAVORITE_CONTENT_FETCH_CONTENT_FINISHED,\n    FAVORITE_CONTENT_FETCH_CONTENT_STARTED,\n    FAVORITE_CONTENT_FETCH_CONTENT_SUCCESS,\n    FAVORITE_CONTENT_RESET_CONTENT_DATA,\n    FAVORITE_CONTENT_SET_CONTENT_LOADING,\n} from \"data/redux/action/favorite\";\nimport FavoriteContent from \"data/redux/model/FavoriteContent\";\n\nconst initialStateFavoriteContent = {\n    favoriteContentDetail: {},\n    favoriteContentList: [],\n    favoriteContentLoading: false,\n    totalCount: 0,\n    maxPage: 0,\n};\n\nfunction fetchSuccess(favoriteContentState, response) {\n    const {data} = response;\n    let favoriteContentList = renderResult(data)\n    return updateObject(favoriteContentState, {favoriteContentList})\n}\n\nfunction renderResult(results) {\n    if (results) {\n        return _map(results, (result) => new FavoriteContent({content: new Content(result)}));\n    } else {\n        return []\n    }\n}\n\nexport default function(favoriteContentState = initialStateFavoriteContent, action) {\n    switch(action.type) {\n        case FAVORITE_CONTENT_RESET_CONTENT_DATA: return updateObject(favoriteContentState, initialStateFavoriteContent);\n        case FAVORITE_CONTENT_SET_CONTENT_LOADING : return updateObject(favoriteContentState, {favoriteContentLoading: action.favoriteContentLoading});\n        case FAVORITE_CONTENT_FETCH_CONTENT_STARTED : return updateObject(favoriteContentState, {favoriteContentLoading: true});\n        case FAVORITE_CONTENT_FETCH_CONTENT_FINISHED : return updateObject(favoriteContentState, {favoriteContentLoading: false});\n        case FAVORITE_CONTENT_FETCH_CONTENT_SUCCESS : return fetchSuccess(favoriteContentState, action.data);\n        default : return favoriteContentState;\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}