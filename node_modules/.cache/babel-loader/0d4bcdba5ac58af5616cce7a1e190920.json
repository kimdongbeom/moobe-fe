{"ast":null,"code":"import axios from \"axios\";\nimport { buildQuery, buildUrl, expandUrl, unpackMoobeMapBounds } from \"data/util\";\nimport { isNil as _isNil } from 'lodash';\nexport const LOGIN_REDIRECT_URL = buildUrl(\"/login\");\nexport const LOGOUT_REDIRECT_URL = buildUrl(\"/logout\");\nconst USER_URL = buildUrl(\"/api/session\");\nconst CONTENTS_URL = buildUrl(\"/api/contents\");\nconst CONTENTS_RANGE_URL = buildUrl(\"/api/contents/range\");\nconst CONTENT_URL = buildUrl(\"/api/contents/{{contentId}}\");\nconst CONTENT_LIKE_URL = buildUrl(\"/api/contents/like\");\nconst CONTENT_UNLIKE_URL = buildUrl(\"/api/contents/like/cancel\");\nconst COMMENT_MOOBE_URL = buildUrl(\"/api/{{videoId}}/comments/moobe\");\nconst COMMENT_YOUTUBE_URL = buildUrl(\"/api/{{videoId}}/comments/moobe\");\nconst COMMENT_LIKE_URL = buildUrl(\"/api/comment/like\");\nconst COMMENT_UNLIKE_URL = buildUrl(\"/api/comment/like/cancel\"); //api\n\nexport const getContents = (channel = null, mapBounds = null, page = null) => {\n  if (_isNil(mapBounds)) {\n    let query = buildQuery(Object.assign({\n      channel,\n      page\n    }));\n    return axios.get(expandUrl(CONTENTS_URL, {}, query));\n  } else {\n    let body = Object.assign(_isNil(channel) ? {} : {\n      channelId: channel\n    }, {\n      pageNum: page\n    }, unpackMoobeMapBounds(mapBounds));\n    return axios.post(CONTENTS_RANGE_URL, body);\n  }\n};\nexport const getContent = (contentId, channel = null) => {\n  let query = buildQuery({\n    channel\n  });\n  return axios.get(expandUrl(CONTENT_URL, {\n    contentId\n  }, query));\n};\nexport const getMoobeComment = (videoId, page) => {\n  let query = buildQuery({\n    page\n  });\n  return axios.get(expandUrl(COMMENT_MOOBE_URL, {\n    videoId\n  }, query), {\n    withCredentials: true\n  });\n};\nexport const getYoutubeComment = (videoId, page) => {\n  let query = buildQuery({\n    page\n  });\n  return axios.get(expandUrl(COMMENT_YOUTUBE_URL, {\n    videoId\n  }, query), {\n    withCredentials: true\n  });\n};\nexport const getUser = () => axios.get(USER_URL, {\n  withCredentials: true\n});\nexport const updateContentLike = (email, contentId, like) => {\n  let body = {\n    userEmail: email,\n    targetId: contentId\n  };\n\n  if (like) {\n    return axios.post(CONTENT_LIKE_URL, body, {\n      withCredentials: true\n    });\n  } else {\n    return axios.post(CONTENT_UNLIKE_URL, body, {\n      withCredentials: true\n    });\n  }\n};\nexport const updateCommentLike = (email, commentId, like) => {\n  let body = {\n    userEmail: email,\n    targetId: commentId\n  };\n\n  if (like) {\n    return axios.post(COMMENT_LIKE_URL, body, {\n      withCredentials: true\n    });\n  } else {\n    return axios.post(COMMENT_UNLIKE_URL, body, {\n      withCredentials: true\n    });\n  }\n};","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/api.js"],"names":["axios","buildQuery","buildUrl","expandUrl","unpackMoobeMapBounds","isNil","_isNil","LOGIN_REDIRECT_URL","LOGOUT_REDIRECT_URL","USER_URL","CONTENTS_URL","CONTENTS_RANGE_URL","CONTENT_URL","CONTENT_LIKE_URL","CONTENT_UNLIKE_URL","COMMENT_MOOBE_URL","COMMENT_YOUTUBE_URL","COMMENT_LIKE_URL","COMMENT_UNLIKE_URL","getContents","channel","mapBounds","page","query","Object","assign","get","body","channelId","pageNum","post","getContent","contentId","getMoobeComment","videoId","withCredentials","getYoutubeComment","getUser","updateContentLike","email","like","userEmail","targetId","updateCommentLike","commentId"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {buildQuery, buildUrl, expandUrl, unpackMoobeMapBounds} from \"data/util\";\nimport {isNil as _isNil} from 'lodash';\n\nexport const LOGIN_REDIRECT_URL = buildUrl(\"/login\");\nexport const LOGOUT_REDIRECT_URL = buildUrl(\"/logout\");\n\nconst USER_URL = buildUrl(\"/api/session\");\nconst CONTENTS_URL = buildUrl(\"/api/contents\");\nconst CONTENTS_RANGE_URL = buildUrl(\"/api/contents/range\");\nconst CONTENT_URL = buildUrl(\"/api/contents/{{contentId}}\");\nconst CONTENT_LIKE_URL = buildUrl(\"/api/contents/like\");\nconst CONTENT_UNLIKE_URL = buildUrl(\"/api/contents/like/cancel\");\n\nconst COMMENT_MOOBE_URL = buildUrl(\"/api/{{videoId}}/comments/moobe\");\nconst COMMENT_YOUTUBE_URL = buildUrl(\"/api/{{videoId}}/comments/moobe\");\nconst COMMENT_LIKE_URL = buildUrl(\"/api/comment/like\");\nconst COMMENT_UNLIKE_URL = buildUrl(\"/api/comment/like/cancel\");\n\n//api\nexport const getContents = (channel=null, mapBounds=null, page=null) => {\n    if (_isNil(mapBounds)) {\n        let query = buildQuery(Object.assign({channel, page}));\n        return axios.get(expandUrl(CONTENTS_URL, {}, query));\n    } else {\n        let body = Object.assign(_isNil(channel) ? {} : {channelId: channel}, {pageNum: page}, unpackMoobeMapBounds(mapBounds));\n        return axios.post(CONTENTS_RANGE_URL, body);\n    }\n};\n\nexport const getContent = (contentId, channel=null) => {\n    let query = buildQuery({channel});\n    return axios.get(expandUrl(CONTENT_URL, {contentId}, query));\n};\n\nexport const getMoobeComment = (videoId, page) => {\n    let query = buildQuery({page});\n    return axios.get(expandUrl(COMMENT_MOOBE_URL, {videoId}, query),{withCredentials: true});\n};\n\nexport const getYoutubeComment = (videoId, page) => {\n    let query = buildQuery({page});\n    return axios.get(expandUrl(COMMENT_YOUTUBE_URL, {videoId}, query), {withCredentials: true});\n};\n\nexport const getUser = () => axios.get(USER_URL,{withCredentials: true});\n\nexport const updateContentLike = (email, contentId, like) => {\n    let body = {\n        userEmail: email,\n        targetId: contentId\n    };\n    if (like) {\n        return axios.post(CONTENT_LIKE_URL, body, {withCredentials: true});\n    } else {\n        return axios.post(CONTENT_UNLIKE_URL, body, {withCredentials: true});\n    }\n};\n\nexport const updateCommentLike = (email, commentId, like) => {\n    let body = {\n        userEmail: email,\n        targetId: commentId\n    };\n    if (like) {\n        return axios.post(COMMENT_LIKE_URL, body, {withCredentials: true});\n    } else {\n        return axios.post(COMMENT_UNLIKE_URL, body, {withCredentials: true});\n    }\n};"]},"metadata":{},"sourceType":"module"}