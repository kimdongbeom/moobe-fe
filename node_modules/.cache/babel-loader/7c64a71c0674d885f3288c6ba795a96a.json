{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/SearchCurrentButton.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearchLocation } from \"@fortawesome/free-solid-svg-icons\";\nimport { buildChannelPath, buildContentPath, buildQuery, getSearchQueryParams, getSearchQueryText, isSimilarLocation, updateObject } from \"data/util\";\nimport { useHistory, useLocation, useParams } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { isEmpty as _isEmpty } from \"lodash\";\nimport queryString from \"query-string\";\nimport { setSearchOnBoundChange, setSearchOnLevelChange } from \"data/redux/action/map\";\nimport { setFocusedLocation } from \"data/redux/action/location\";\nimport { uuid } from \"bulma-extensions/bulma-carousel/src/js/utils\";\nimport { isMobile } from \"react-device-detect\";\n\nconst SearchCurrentButton = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const _useState = useState({\n    lat: null,\n    lng: null\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        lastSearchCenter = _useState2[0],\n        setLastSearchCenter = _useState2[1];\n\n  const _useSelector = useSelector(state => state.channel),\n        activeChannel = _useSelector.activeChannel;\n\n  const _useSelector2 = useSelector(state => state.content),\n        contentList = _useSelector2.contentList,\n        contentLoading = _useSelector2.contentLoading;\n\n  const _useSelector3 = useSelector(state => state.map),\n        changedCenterLat = _useSelector3.changedCenterLat,\n        changedCenterLng = _useSelector3.changedCenterLng,\n        centerChanged = _useSelector3.centerChanged,\n        mapLoading = _useSelector3.mapLoading,\n        changedMapBounds = _useSelector3.changedMapBounds,\n        searchOnBoundChange = _useSelector3.searchOnBoundChange,\n        mapLevel = _useSelector3.mapLevel,\n        searchOnLevelChange = _useSelector3.searchOnLevelChange;\n\n  const location = useLocation();\n\n  const _useParams = useParams(),\n        channelId = _useParams.channelId;\n\n  const _queryString$parse = queryString.parse(location.search),\n        query = _queryString$parse.query,\n        searchType = _queryString$parse.searchType;\n\n  const search = e => {\n    if (e) e.target.blur();\n    setLastSearchCenter({\n      lat: changedCenterLat,\n      lng: changedCenterLng\n    });\n    dispatch(setFocusedLocation(null));\n    let queryParams = updateObject(getSearchQueryParams(query, searchType), {\n      page: 1,\n      swLat: changedMapBounds.sw.lat,\n      swLng: changedMapBounds.sw.lng,\n      neLat: changedMapBounds.ne.lat,\n      neLng: changedMapBounds.ne.lng,\n      level: mapLevel,\n      k: uuid().substring(0, 5)\n    });\n    history.push({\n      pathname: buildChannelPath(channelId ? {\n        id: channelId\n      } : activeChannel ? activeChannel : null),\n      search: buildQuery(queryParams)\n    });\n  };\n\n  const searchCurrentLocationText = () => {\n    if (!_isEmpty(query)) {\n      return \"현재 지도에서 [\" + getSearchQueryText(query, searchType) + \"] 다시 찾기\";\n    }\n\n    return \"현재 지도에서 찾기\";\n  };\n\n  const isVisible = () => {\n    if (centerChanged && !isSimilarLocation(lastSearchCenter, {\n      lat: changedCenterLat,\n      lng: changedCenterLng\n    }, isMobile ? 2 : 3)) {\n      if (contentLoading) {\n        return true;\n      }\n\n      if (contentList.length == 0) {\n        return false;\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    if (searchOnBoundChange && changedMapBounds && !mapLoading) {\n      search();\n      dispatch(setSearchOnBoundChange(false));\n    }\n  }, [changedMapBounds, mapLoading]);\n  useEffect(() => {\n    if (searchOnLevelChange && mapLevel && !mapLoading) {\n      search();\n      dispatch(setSearchOnLevelChange(false));\n    }\n  }, [mapLevel, mapLoading]);\n  return React.createElement(\"button\", {\n    className: \"location-search-button button \" + (contentLoading ? \" is-loading\" : \"\") + (isVisible() ? \"\" : \" is-hidden\"),\n    onClick: search,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faSearchLocation,\n    size: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, searchCurrentLocationText()));\n};\n\nexport default SearchCurrentButton;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/SearchCurrentButton.jsx"],"names":["React","useEffect","useState","FontAwesomeIcon","faSearchLocation","buildChannelPath","buildContentPath","buildQuery","getSearchQueryParams","getSearchQueryText","isSimilarLocation","updateObject","useHistory","useLocation","useParams","useDispatch","useSelector","isEmpty","_isEmpty","queryString","setSearchOnBoundChange","setSearchOnLevelChange","setFocusedLocation","uuid","isMobile","SearchCurrentButton","dispatch","history","lat","lng","lastSearchCenter","setLastSearchCenter","state","channel","activeChannel","content","contentList","contentLoading","map","changedCenterLat","changedCenterLng","centerChanged","mapLoading","changedMapBounds","searchOnBoundChange","mapLevel","searchOnLevelChange","location","channelId","parse","search","query","searchType","e","target","blur","queryParams","page","swLat","sw","swLng","neLat","ne","neLng","level","k","substring","push","pathname","id","searchCurrentLocationText","isVisible","length"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSearchLocation} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n    buildChannelPath,\n    buildContentPath,\n    buildQuery,\n    getSearchQueryParams,\n    getSearchQueryText,\n    isSimilarLocation,\n    updateObject\n} from \"data/util\";\nimport {useHistory, useLocation, useParams} from \"react-router\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {isEmpty as _isEmpty} from \"lodash\";\nimport queryString from \"query-string\";\nimport {setSearchOnBoundChange, setSearchOnLevelChange} from \"data/redux/action/map\";\nimport {setFocusedLocation} from \"data/redux/action/location\";\nimport {uuid} from \"bulma-extensions/bulma-carousel/src/js/utils\";\nimport {isMobile} from \"react-device-detect\";\n\nconst SearchCurrentButton = () => {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [lastSearchCenter, setLastSearchCenter] = useState({lat: null, lng: null});\n    const {activeChannel} = useSelector(state => state.channel);\n    const {contentList, contentLoading} = useSelector(state => state.content);\n    const {changedCenterLat, changedCenterLng, centerChanged, mapLoading, changedMapBounds, searchOnBoundChange, mapLevel, searchOnLevelChange} = useSelector(state => state.map);\n    const location = useLocation();\n    const {channelId} = useParams();\n    const {query, searchType} = queryString.parse(location.search);\n\n    const search = (e) => {\n        if (e) e.target.blur();\n        setLastSearchCenter({lat: changedCenterLat, lng: changedCenterLng});\n        dispatch(setFocusedLocation(null))\n        let queryParams = updateObject(getSearchQueryParams(query, searchType),\n            {\n                page: 1,\n                swLat: changedMapBounds.sw.lat,\n                swLng: changedMapBounds.sw.lng,\n                neLat: changedMapBounds.ne.lat,\n                neLng: changedMapBounds.ne.lng,\n                level: mapLevel,\n                k: uuid().substring(0, 5)\n            });\n        history.push({\n            pathname: buildChannelPath(channelId ? {id: channelId} : activeChannel ? activeChannel : null),\n            search: buildQuery(queryParams)\n        });\n\n    };\n\n    const searchCurrentLocationText = () => {\n        if (!_isEmpty(query)) {\n            return \"현재 지도에서 [\" + getSearchQueryText(query, searchType) + \"] 다시 찾기\";\n        }\n        return \"현재 지도에서 찾기\"\n    }\n\n    const isVisible = () => {\n        if (centerChanged && !isSimilarLocation(lastSearchCenter, {lat: changedCenterLat, lng: changedCenterLng}, isMobile ? 2 : 3)) {\n            if (contentLoading) {\n                return true\n            }\n            if (contentList.length == 0) {\n                return false\n            }\n            return true\n        } else {\n            return false\n        }\n    }\n\n    useEffect(() => {\n        if (searchOnBoundChange && changedMapBounds && !mapLoading) {\n            search();\n            dispatch(setSearchOnBoundChange(false))\n        }\n    }, [changedMapBounds, mapLoading])\n\n    useEffect(() => {\n        if (searchOnLevelChange && mapLevel && !mapLoading) {\n            search();\n            dispatch(setSearchOnLevelChange(false));\n        }\n    }, [mapLevel, mapLoading])\n\n\n    return (\n        <button className={\"location-search-button button \" + (contentLoading? \" is-loading\" : \"\") + (isVisible() ? \"\" : \" is-hidden\")} onClick={search}>\n            <span className=\"icon\">\n                <FontAwesomeIcon icon={faSearchLocation} size={\"sm\"} />\n            </span>\n            <span>{searchCurrentLocationText()}</span>\n        </button>\n    )\n};\n\nexport default SearchCurrentButton;"]},"metadata":{},"sourceType":"module"}