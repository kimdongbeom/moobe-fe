{"ast":null,"code":"import { updateObject } from \"data/util\";\nimport Content from \"data/redux/model/Content\";\nimport { concat as _concat, isNil as _isNil, map as _map, toNumber as _toNumber, uniqWith as _uniqWith } from \"lodash\";\nimport { CONTENT_FETCH_CONTENT_FINISHED, CONTENT_FETCH_CONTENT_STARTED, CONTENT_FETCH_CONTENT_SUCCESS, CONTENT_RESET_CONTENT_DATA, CONTENT_SET_CONTENT_LOADING, CONTENT_UPDATE_CONTENT_UPDATED } from \"data/redux/action/content\";\nconst initialStateContent = {\n  contentList: [],\n  contentLoading: false,\n  pageNum: 1,\n  pageSize: 1,\n  totalCount: 0,\n  maxPage: 0\n};\n\nfunction fetchSuccess(contentState, response) {\n  const data = response.data,\n        pageNum = response.pageNum,\n        isAppend = response.isAppend,\n        isUnit = response.isUnit;\n  let contentList,\n      contentCount = {};\n\n  if (isUnit) {\n    contentList = renderResult([data]);\n  } else {\n    contentList = renderResult(data.contents);\n    contentCount = renderCount(data.pageInfo);\n  }\n\n  let updateState = buildState(contentState, contentList, contentCount, pageNum, isAppend, isUnit);\n  return updateObject(contentState, updateState);\n}\n\nfunction buildState(originState, contentList, contentCount, pageNum, isAppend, isUnit) {\n  return updateObject({\n    contentList: !isAppend ? contentList : isUnit ? mergeContents(contentList, originState.contentList) : mergeContents(originState.contentList, contentList),\n    pageNum: pageNum ? _toNumber(pageNum) : originState.pageNum\n  }, contentCount);\n}\n\nfunction renderResult(results) {\n  if (results) {\n    return _map(results, result => new Content(result));\n  } else {\n    return [];\n  }\n}\n\nfunction renderCount(pageInfo) {\n  if (pageInfo) {\n    return {\n      totalCount: pageInfo.totalCount,\n      maxPage: pageInfo.totalPage,\n      pageSize: pageInfo.pageSize\n    };\n  } else {\n    return {};\n  }\n}\n\nfunction mergeContents(originContentList, newContentList) {\n  return _uniqWith(_concat(originContentList, newContentList), isEqualsContent);\n}\n\nfunction isEqualsContent(content1, content2) {\n  if (_isNil(content1) || _isNil(content2)) {\n    return false;\n  }\n\n  return content1.id === content2.id;\n}\n\nfunction updateContentCount(contentState, contentCount) {\n  return updateObject(contentState, {\n    totalCount: contentCount.totalCount,\n    maxPage: contentCount.totalPage\n  });\n}\n\nconst updateContent = (contentState, data) => {\n  const id = data.id,\n        updatedValue = data.updatedValue;\n\n  let updateContentList = _map(contentState.contentList, content => {\n    if (content.id === id) {\n      return new Content(updateObject(content, updatedValue));\n    } else {\n      return content;\n    }\n  });\n\n  return updateObject(contentState, {\n    contentList: updateContentList\n  });\n};\n\nexport default function (contentState = initialStateContent, action) {\n  switch (action.type) {\n    case CONTENT_RESET_CONTENT_DATA:\n      return updateObject(contentState, {\n        contentList: []\n      });\n\n    case CONTENT_SET_CONTENT_LOADING:\n      return updateObject(contentState, {\n        contentLoading: action.contentLoading\n      });\n\n    case CONTENT_UPDATE_CONTENT_UPDATED:\n      return updateContent(contentState, action.data);\n\n    case CONTENT_FETCH_CONTENT_STARTED:\n      return updateObject(contentState, {\n        contentLoading: true\n      });\n\n    case CONTENT_FETCH_CONTENT_FINISHED:\n      return updateObject(contentState, {\n        contentLoading: false\n      });\n\n    case CONTENT_FETCH_CONTENT_SUCCESS:\n      return fetchSuccess(contentState, action.data);\n\n    default:\n      return contentState;\n  }\n}","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/redux/reducers/contentReducer.js"],"names":["updateObject","Content","concat","_concat","isNil","_isNil","map","_map","toNumber","_toNumber","uniqWith","_uniqWith","CONTENT_FETCH_CONTENT_FINISHED","CONTENT_FETCH_CONTENT_STARTED","CONTENT_FETCH_CONTENT_SUCCESS","CONTENT_RESET_CONTENT_DATA","CONTENT_SET_CONTENT_LOADING","CONTENT_UPDATE_CONTENT_UPDATED","initialStateContent","contentList","contentLoading","pageNum","pageSize","totalCount","maxPage","fetchSuccess","contentState","response","data","isAppend","isUnit","contentCount","renderResult","contents","renderCount","pageInfo","updateState","buildState","originState","mergeContents","results","result","totalPage","originContentList","newContentList","isEqualsContent","content1","content2","id","updateContentCount","updateContent","updatedValue","updateContentList","content","action","type"],"mappings":"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","sourcesContent":["import {updateObject} from \"data/util\";\nimport Content from \"data/redux/model/Content\";\nimport {concat as _concat, isNil as _isNil, map as _map, toNumber as _toNumber, uniqWith as _uniqWith} from \"lodash\";\nimport {\n    CONTENT_FETCH_CONTENT_FINISHED,\n    CONTENT_FETCH_CONTENT_STARTED,\n    CONTENT_FETCH_CONTENT_SUCCESS,\n    CONTENT_RESET_CONTENT_DATA,\n    CONTENT_SET_CONTENT_LOADING,\n    CONTENT_UPDATE_CONTENT_UPDATED\n} from \"data/redux/action/content\";\n\nconst initialStateContent = {\n    contentList: [],\n    contentLoading: false,\n    pageNum: 1,\n    pageSize: 1,\n    totalCount: 0,\n    maxPage: 0,\n};\n\nfunction fetchSuccess(contentState, response) {\n    const {data, pageNum, isAppend, isUnit} = response;\n    let contentList, contentCount = {};\n    if (isUnit) {\n        contentList = renderResult([data])\n    } else {\n        contentList = renderResult(data.contents)\n        contentCount = renderCount(data.pageInfo)\n    }\n    let updateState = buildState(contentState, contentList, contentCount, pageNum, isAppend, isUnit);\n    return updateObject(contentState, updateState)\n}\n\nfunction buildState(originState, contentList, contentCount, pageNum, isAppend, isUnit ) {\n    return updateObject({\n        contentList: !isAppend ? contentList : isUnit ? mergeContents(contentList, originState.contentList) : mergeContents(originState.contentList, contentList),\n        pageNum: pageNum ? _toNumber(pageNum) : originState.pageNum\n    }, contentCount)\n}\n\nfunction renderResult(results) {\n    if (results) {\n        return _map(results, (result) => new Content(result));\n    } else {\n        return []\n    }\n}\n\nfunction renderCount(pageInfo) {\n    if (pageInfo) {\n        return {\n            totalCount: pageInfo.totalCount,\n            maxPage: pageInfo.totalPage,\n            pageSize: pageInfo.pageSize\n        }\n    } else {\n        return {}\n    }\n}\n\nfunction mergeContents(originContentList, newContentList) {\n    return  _uniqWith(_concat(originContentList, newContentList), isEqualsContent);\n}\n\nfunction isEqualsContent(content1, content2) {\n    if (_isNil(content1) || _isNil(content2)) {\n        return false;\n    }\n    return content1.id === content2.id;\n}\n\nfunction updateContentCount(contentState, contentCount) {\n    return updateObject(contentState, {\n        totalCount: contentCount.totalCount,\n        maxPage: contentCount.totalPage\n    })\n}\n\nconst updateContent = (contentState, data) => {\n    const {id, updatedValue} = data\n    let updateContentList = _map(contentState.contentList, (content) => {\n        if (content.id === id) {\n            return new Content(updateObject(content, updatedValue));\n        } else {\n            return content;\n        }\n    });\n    return updateObject(contentState, {contentList: updateContentList});\n}\n\nexport default function(contentState = initialStateContent, action) {\n    switch(action.type) {\n        case CONTENT_RESET_CONTENT_DATA: return updateObject(contentState, {contentList: []});\n        case CONTENT_SET_CONTENT_LOADING : return updateObject(contentState, {contentLoading: action.contentLoading});\n        case CONTENT_UPDATE_CONTENT_UPDATED : return updateContent(contentState, action.data);\n        case CONTENT_FETCH_CONTENT_STARTED : return updateObject(contentState, {contentLoading: true});\n        case CONTENT_FETCH_CONTENT_FINISHED : return updateObject(contentState, {contentLoading: false});\n        case CONTENT_FETCH_CONTENT_SUCCESS : return fetchSuccess(contentState, action.data);\n        default : return contentState;\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}