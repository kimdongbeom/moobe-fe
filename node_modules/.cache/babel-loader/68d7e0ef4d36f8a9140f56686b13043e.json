{"ast":null,"code":"import { getClusterLocations } from \"data/api\";\nexport const CLUSTER_LOCATION_RESET_LOCATION_DATA = 'CLUSTER_LOCATION/RESET_LOCATION_DATA';\nexport const CLUSTER_LOCATION_FETCH_LOCATION_STARTED = 'CLUSTER_LOCATION/FETCH_LOCATION_STARTED';\nexport const CLUSTER_LOCATION_FETCH_LOCATION_FINISHED = 'CLUSTER_LOCATION/FETCH_LOCATION_FINISHED';\nexport const CLUSTER_LOCATION_FETCH_LOCATION_SUCCESS = 'CLUSTER_LOCATION/FETCH_LOCATION_SUCCESS';\nexport const CLUSTER_LOCATION_FETCH_LOCATION_ERROR = 'CLUSTER_LOCATION/FETCH_LOCATION_ERROR';\nexport const fetchClusterLocation = (channel = null, mapLevel = null, mapBound = null) => {\n  return dispatch => {\n    dispatch(fetchClusterLocationStarted());\n    return getClusterLocations(channel, mapLevel, mapBound).then(response => {\n      dispatch(fetchClusterLocationSuccess({\n        data: response.data\n      }));\n    }).catch(function (error) {\n      dispatch(fetchClusterLocationFail(error));\n    }).finally(() => {\n      dispatch(fetchClusterLocationFinished());\n    });\n  };\n};\nexport const resetClusterLocationData = () => {\n  return {\n    type: CLUSTER_LOCATION_RESET_LOCATION_DATA\n  };\n};\nexport const fetchClusterLocationStarted = () => {\n  return {\n    type: CLUSTER_LOCATION_FETCH_LOCATION_STARTED\n  };\n};\nexport const fetchClusterLocationFinished = () => {\n  return {\n    type: CLUSTER_LOCATION_FETCH_LOCATION_FINISHED\n  };\n};\nexport const fetchClusterLocationSuccess = data => {\n  return {\n    type: CLUSTER_LOCATION_FETCH_LOCATION_SUCCESS,\n    data: data\n  };\n};\nexport const fetchClusterLocationFail = err => {\n  return {\n    type: CLUSTER_LOCATION_FETCH_LOCATION_ERROR,\n    err\n  };\n};","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/redux/action/clusterLocation.js"],"names":["getClusterLocations","CLUSTER_LOCATION_RESET_LOCATION_DATA","CLUSTER_LOCATION_FETCH_LOCATION_STARTED","CLUSTER_LOCATION_FETCH_LOCATION_FINISHED","CLUSTER_LOCATION_FETCH_LOCATION_SUCCESS","CLUSTER_LOCATION_FETCH_LOCATION_ERROR","fetchClusterLocation","channel","mapLevel","mapBound","dispatch","fetchClusterLocationStarted","then","response","fetchClusterLocationSuccess","data","catch","error","fetchClusterLocationFail","finally","fetchClusterLocationFinished","resetClusterLocationData","type","err"],"mappings":"AAAA,SAAQA,mBAAR,QAAkC,UAAlC;AAEA,OAAO,MAAMC,oCAAoC,GAAG,sCAA7C;AACP,OAAO,MAAMC,uCAAuC,GAAG,yCAAhD;AACP,OAAO,MAAMC,wCAAwC,GAAG,0CAAjD;AACP,OAAO,MAAMC,uCAAuC,GAAG,yCAAhD;AACP,OAAO,MAAMC,qCAAqC,GAAG,uCAA9C;AAGP,OAAO,MAAMC,oBAAoB,GAAG,CAACC,OAAO,GAAC,IAAT,EAAeC,QAAQ,GAAC,IAAxB,EAA8BC,QAAQ,GAAC,IAAvC,KAAgD;AAChF,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACC,2BAA2B,EAA5B,CAAR;AACA,WAAOX,mBAAmB,CAACO,OAAD,EAAUC,QAAV,EAAoBC,QAApB,CAAnB,CAAiDG,IAAjD,CAAsDC,QAAQ,IAAI;AACrEH,MAAAA,QAAQ,CAACI,2BAA2B,CAAC;AAACC,QAAAA,IAAI,EAAEF,QAAQ,CAACE;AAAhB,OAAD,CAA5B,CAAR;AACH,KAFM,EAEJC,KAFI,CAEE,UAAUC,KAAV,EAAiB;AACtBP,MAAAA,QAAQ,CAACQ,wBAAwB,CAACD,KAAD,CAAzB,CAAR;AACH,KAJM,EAIJE,OAJI,CAII,MAAM;AACbT,MAAAA,QAAQ,CAACU,4BAA4B,EAA7B,CAAR;AACH,KANM,CAAP;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMC,wBAAwB,GAAG,MAAM;AAC1C,SAAO;AACHC,IAAAA,IAAI,EAAErB;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMU,2BAA2B,GAAG,MAAM;AAC7C,SAAO;AACHW,IAAAA,IAAI,EAAEpB;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMkB,4BAA4B,GAAG,MAAM;AAC9C,SAAO;AACHE,IAAAA,IAAI,EAAEnB;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMW,2BAA2B,GAAIC,IAAD,IAAU;AACjD,SAAO;AACHO,IAAAA,IAAI,EAAElB,uCADH;AAEHW,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,wBAAwB,GAAIK,GAAD,IAAS;AAC7C,SAAO;AACHD,IAAAA,IAAI,EAAEjB,qCADH;AAEHkB,IAAAA;AAFG,GAAP;AAIH,CALM","sourcesContent":["import {getClusterLocations} from \"data/api\";\n\nexport const CLUSTER_LOCATION_RESET_LOCATION_DATA = 'CLUSTER_LOCATION/RESET_LOCATION_DATA';\nexport const CLUSTER_LOCATION_FETCH_LOCATION_STARTED = 'CLUSTER_LOCATION/FETCH_LOCATION_STARTED';\nexport const CLUSTER_LOCATION_FETCH_LOCATION_FINISHED = 'CLUSTER_LOCATION/FETCH_LOCATION_FINISHED';\nexport const CLUSTER_LOCATION_FETCH_LOCATION_SUCCESS = 'CLUSTER_LOCATION/FETCH_LOCATION_SUCCESS';\nexport const CLUSTER_LOCATION_FETCH_LOCATION_ERROR = 'CLUSTER_LOCATION/FETCH_LOCATION_ERROR';\n\n\nexport const fetchClusterLocation = (channel=null, mapLevel=null, mapBound=null) => {\n    return (dispatch) => {\n        dispatch(fetchClusterLocationStarted());\n        return getClusterLocations(channel, mapLevel, mapBound).then(response => {\n            dispatch(fetchClusterLocationSuccess({data: response.data}))\n        }).catch(function (error) {\n            dispatch(fetchClusterLocationFail(error))\n        }).finally(() => {\n            dispatch(fetchClusterLocationFinished())\n        });\n    }\n};\n\nexport const resetClusterLocationData = () => {\n    return {\n        type: CLUSTER_LOCATION_RESET_LOCATION_DATA\n    }\n}\n\nexport const fetchClusterLocationStarted = () => {\n    return {\n        type: CLUSTER_LOCATION_FETCH_LOCATION_STARTED\n    }\n}\n\nexport const fetchClusterLocationFinished = () => {\n    return {\n        type: CLUSTER_LOCATION_FETCH_LOCATION_FINISHED\n    }\n}\n\nexport const fetchClusterLocationSuccess = (data) => {\n    return {\n        type: CLUSTER_LOCATION_FETCH_LOCATION_SUCCESS,\n        data: data\n    }\n}\n\nexport const fetchClusterLocationFail = (err) => {\n    return {\n        type: CLUSTER_LOCATION_FETCH_LOCATION_ERROR,\n        err\n    }\n}\n"]},"metadata":{},"sourceType":"module"}