{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDock = require('react-dock');\n\nvar _reactDock2 = _interopRequireDefault(_reactDock);\n\nvar _constants = require('./constants');\n\nvar _actions = require('./actions');\n\nvar _reducers = require('./reducers');\n\nvar _reducers2 = _interopRequireDefault(_reducers);\n\nvar _parseKey = require('parse-key');\n\nvar _parseKey2 = _interopRequireDefault(_parseKey);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DockMonitor = function (_Component) {\n  _inherits(DockMonitor, _Component);\n\n  function DockMonitor(props) {\n    _classCallCheck(this, DockMonitor);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.handleKeyDown = _this.handleKeyDown.bind(_this);\n    _this.handleSizeChange = _this.handleSizeChange.bind(_this);\n\n    var childrenCount = _react.Children.count(props.children);\n\n    if (childrenCount === 0) {\n      console.error('<DockMonitor> requires at least one monitor inside. ' + 'Why donâ€™t you try <LogMonitor>? You can get it at ' + 'https://github.com/gaearon/redux-devtools-log-monitor.');\n    } else if (childrenCount > 1 && !props.changeMonitorKey) {\n      console.error('You specified multiple monitors inside <DockMonitor> ' + 'but did not provide `changeMonitorKey` prop to change them. ' + 'Try specifying <DockMonitor changeMonitorKey=\"ctrl-m\" /> ' + 'and then press Ctrl-M.');\n    }\n\n    return _this;\n  }\n\n  DockMonitor.prototype.componentDidMount = function componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  };\n\n  DockMonitor.prototype.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  };\n\n  DockMonitor.prototype.matchesKey = function matchesKey(key, event) {\n    if (!key) {\n      return false;\n    }\n\n    var charCode = event.keyCode || event.which;\n    var char = String.fromCharCode(charCode);\n    return key.name.toUpperCase() === char.toUpperCase() && key.alt === event.altKey && key.ctrl === event.ctrlKey && key.meta === event.metaKey && key.shift === event.shiftKey;\n  };\n\n  DockMonitor.prototype.handleKeyDown = function handleKeyDown(e) {\n    // Ignore regular keys when focused on a field\n    // and no modifiers are active.\n    if (!e.ctrlKey && !e.metaKey && !e.altKey && (e.target.tagName === 'INPUT' || e.target.tagName === 'SELECT' || e.target.tagName === 'TEXTAREA' || e.target.isContentEditable)) {\n      return;\n    }\n\n    var visibilityKey = (0, _parseKey2.default)(this.props.toggleVisibilityKey);\n    var positionKey = (0, _parseKey2.default)(this.props.changePositionKey);\n    var monitorKey = void 0;\n\n    if (this.props.changeMonitorKey) {\n      monitorKey = (0, _parseKey2.default)(this.props.changeMonitorKey);\n    }\n\n    if (this.matchesKey(visibilityKey, e)) {\n      e.preventDefault();\n      this.props.dispatch((0, _actions.toggleVisibility)());\n    } else if (this.matchesKey(positionKey, e)) {\n      e.preventDefault();\n      this.props.dispatch((0, _actions.changePosition)());\n    } else if (this.matchesKey(monitorKey, e)) {\n      e.preventDefault();\n      this.props.dispatch((0, _actions.changeMonitor)());\n    }\n  };\n\n  DockMonitor.prototype.handleSizeChange = function handleSizeChange(requestedSize) {\n    this.props.dispatch((0, _actions.changeSize)(requestedSize));\n  };\n\n  DockMonitor.prototype.renderChild = function renderChild(child, index, otherProps) {\n    var monitorState = this.props.monitorState;\n    var childMonitorIndex = monitorState.childMonitorIndex,\n        childMonitorStates = monitorState.childMonitorStates;\n\n    if (index !== childMonitorIndex) {\n      return null;\n    }\n\n    return (0, _react.cloneElement)(child, _extends({\n      monitorState: childMonitorStates[index]\n    }, otherProps));\n  };\n\n  DockMonitor.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        monitorState = _props.monitorState,\n        children = _props.children,\n        fluid = _props.fluid,\n        rest = _objectWithoutProperties(_props, ['monitorState', 'children', 'fluid']);\n\n    var position = monitorState.position,\n        isVisible = monitorState.isVisible,\n        size = monitorState.size;\n    return _react2.default.createElement(_reactDock2.default, {\n      position: position,\n      isVisible: isVisible,\n      size: size,\n      fluid: fluid,\n      onSizeChange: this.handleSizeChange,\n      dimMode: 'none'\n    }, _react.Children.map(children, function (child, index) {\n      return _this2.renderChild(child, index, rest);\n    }));\n  };\n\n  return DockMonitor;\n}(_react.Component);\n\nDockMonitor.update = _reducers2.default;\nDockMonitor.propTypes = {\n  defaultPosition: _propTypes2.default.oneOf(_constants.POSITIONS),\n  defaultIsVisible: _propTypes2.default.bool.isRequired,\n  defaultSize: _propTypes2.default.number.isRequired,\n  toggleVisibilityKey: _propTypes2.default.string.isRequired,\n  changePositionKey: _propTypes2.default.string.isRequired,\n  changeMonitorKey: _propTypes2.default.string,\n  fluid: _propTypes2.default.bool,\n  dispatch: _propTypes2.default.func,\n  monitorState: _propTypes2.default.shape({\n    position: _propTypes2.default.oneOf(_constants.POSITIONS).isRequired,\n    size: _propTypes2.default.number.isRequired,\n    isVisible: _propTypes2.default.bool.isRequired,\n    childMonitorState: _propTypes2.default.any\n  })\n};\nDockMonitor.defaultProps = {\n  defaultIsVisible: true,\n  defaultPosition: 'right',\n  defaultSize: 0.3,\n  fluid: true\n};\nexports.default = DockMonitor;","map":null,"metadata":{},"sourceType":"script"}