{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/MoobeKakaoMap.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport LoadingOverlay from \"react-loading-overlay\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfo, faSpinner, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport withJs from \"components/common/map/WithJs\";\nimport withKakaoMap from \"components/common/map/WithKakaoMap\";\nimport KakaoMap from \"components/common/map/KakaoMap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { isMobile } from \"react-device-detect\";\nimport MapImages from \"assets/images/map_images.png\";\nimport { loadingGeoLocationFail, loadingGeoLocationStarted, loadingGeoLocationSuccess, loadingMapStarted, setMapBounds, setMapCenter, setMapCenterChange, setMapCenterForce, setMapLevel, setSearchOnBoundChange } from \"data/redux/action/map\";\nimport { MapLoadingSpinner } from \"components/common/layout/PresentUtil\";\nimport { isEmpty as _isEmpty, isNil as _isNil } from 'lodash';\nimport GeoLocationMarker from \"components/common/map/GeoLocationMarker\";\nimport { MAP_LOADING_SPINNER } from \"assets/styles/colors\";\nimport SearchCurrentButton from \"components/common/map/SearchCurrentButton\";\nimport debounce from 'lodash.debounce';\nimport { buildMoobeMapBounds, isSimilarLocation, parsePath, toStringMoobeMapBounds, unpackMoobeMapBounds } from \"data/util\";\nimport queryString from \"query-string\";\nimport { useLocation } from \"react-router\";\nimport SearchWideLocationButton from \"components/common/map/SearchWideLocationButton\";\nimport { getWindowDimensions, initVH } from \"components/common/layout/WindowDimensions\";\nimport { useCookies } from \"react-cookie\";\nimport { MOOBE_COOKIE_LAST_LOCATION_NAME } from \"assets/styles/const\";\nconst Kakao = withJs(`//dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.REACT_APP_KAKAO_API_KEY}&libraries=services,clusterer,drawing&autoload=false`)(withKakaoMap(KakaoMap));\n\nconst MoobeKakaoMap = props => {\n  const _useCookies = useCookies([MOOBE_COOKIE_LAST_LOCATION_NAME]),\n        _useCookies2 = _slicedToArray(_useCookies, 2),\n        cookies = _useCookies2[0],\n        setCookie = _useCookies2[1];\n\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(state => state.mapLocation),\n        mapLocationList = _useSelector.mapLocationList,\n        focusedMapLocation = _useSelector.focusedMapLocation;\n\n  const _useSelector2 = useSelector(state => state.contentDetail),\n        contentDetail = _useSelector2.contentDetail;\n\n  const location = useLocation();\n\n  const _queryString$parse = queryString.parse(location.search),\n        query = _queryString$parse.query,\n        swLat = _queryString$parse.swLat,\n        swLng = _queryString$parse.swLng,\n        neLat = _queryString$parse.neLat,\n        neLng = _queryString$parse.neLng;\n\n  const _useSelector3 = useSelector(state => state.map),\n        centerLat = _useSelector3.centerLat,\n        centerLng = _useSelector3.centerLng,\n        refreshCenter = _useSelector3.refreshCenter,\n        mapLoading = _useSelector3.mapLoading,\n        changedCenterLat = _useSelector3.changedCenterLat,\n        changedCenterLng = _useSelector3.changedCenterLng,\n        enableGeolocation = _useSelector3.enableGeolocation,\n        geoLocationCenterLat = _useSelector3.geoLocationCenterLat,\n        geoLocationCenterLng = _useSelector3.geoLocationCenterLng,\n        geolocationLoading = _useSelector3.geolocationLoading,\n        mapBounds = _useSelector3.mapBounds;\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        bounds = _useState2[0],\n        setBounds = _useState2[1];\n\n  const initialOptions = {\n    lat: centerLat,\n    lng: centerLng,\n    level: process.env.REACT_APP_INIT_MAP_LEVEL || 4,\n    refreshCenter: refreshCenter,\n    zoom: props.zoom ? props.zoom : \"TOPRIGHT\"\n  }; // 초기 center, query param으로 부터 lat,lng받아서 map bounds 셋팅, map loading start\n\n  useEffect(() => {\n    dispatch(setMapCenter({\n      lat: process.env.REACT_APP_INIT_MAP_CENTER_LAT,\n      lng: process.env.REACT_APP_INIT_MAP_CENTER_LNG\n    }));\n    dispatch(loadingMapStarted());\n\n    const _parsePath = parsePath(location.pathname),\n          channels = _parsePath.channels,\n          contents = _parsePath.contents;\n\n    if (contents == null) {\n      dispatch(setSearchOnBoundChange(true));\n    }\n\n    let searchMapBounds = getSearchMapBounds();\n\n    if (!_isNil(searchMapBounds)) {\n      setBounds(buildKakaoMapBounds(searchMapBounds));\n      dispatch(setMapBounds(unpackMoobeMapBounds(searchMapBounds)));\n    }\n\n    return () => {\n      dispatch(loadingGeoLocationFail()); // reset geolocation\n    };\n  }, []); //query에 bounds정보가 없고 검색어가 있을 때 map location list 데이터로 bound를 결정.\n\n  useEffect(() => {\n    if (_isNil(buildMoobeMapBounds(swLat, swLng, neLat, neLng)) && !_isEmpty(query) && !_isEmpty(mapLocationList)) {\n      setBounds(mapLocationList.map(mapLocation => {\n        return {\n          lat: mapLocation.latitude,\n          lng: mapLocation.longitude\n        };\n      }));\n    }\n  }, [mapLocationList]); //desktop: map이 loading되어 있고 content detail이 load될 때 content의 center로 map center change\n\n  useEffect(() => {\n    if (!isMobile && !_isEmpty(contentDetail) && !mapLoading) {\n      dispatch(setMapCenterForce({\n        lat: contentDetail.store.latitude,\n        lng: contentDetail.store.longitude\n      }));\n    }\n  }, [contentDetail, mapLoading]); //mobile: map이 loading되어 있고 focusedMapLocation이 load될 때 location center로 map center change\n\n  useEffect(() => {\n    if (isMobile && !_isEmpty(focusedMapLocation) && !mapLoading) {\n      dispatch(setMapCenterForce({\n        lat: focusedMapLocation.latitude,\n        lng: focusedMapLocation.longitude\n      }));\n    }\n  }, [focusedMapLocation, mapLoading]); //검색 조건이 될 map bounds를 결정한다. 우선순위 query에 존재하는 bounds 정보 > cookie에 존재하는 bounds 정보 > env파일에 존재하는 bounds 정보\n\n  const getSearchMapBounds = () => {\n    let queryMapBound = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n\n    if (!_isNil(queryMapBound)) {\n      return queryMapBound;\n    }\n\n    let cookieMapBounds = cookies[MOOBE_COOKIE_LAST_LOCATION_NAME];\n\n    if (!_isNil(unpackMoobeMapBounds(cookieMapBounds))) {\n      return cookieMapBounds;\n    }\n\n    if (process.env.REACT_APP_INIT_MAP_SW_LAT && process.env.REACT_APP_INIT_MAP_SW_LNG && process.env.REACT_APP_INIT_MAP_NE_LAT && process.env.REACT_APP_INIT_MAP_NE_LNG) {\n      let initMapBounds = buildMoobeMapBounds(process.env.REACT_APP_INIT_MAP_SW_LAT, process.env.REACT_APP_INIT_MAP_SW_LNG, process.env.REACT_APP_INIT_MAP_NE_LAT, process.env.REACT_APP_INIT_MAP_NE_LNG);\n      return initMapBounds;\n    }\n\n    return null;\n  };\n\n  const buildKakaoMapBounds = moobeMapBounds => {\n    const unpackedBounds = unpackMoobeMapBounds(moobeMapBounds);\n\n    if (!_isNil(unpackedBounds)) {\n      return [{\n        lat: unpackedBounds.swLat,\n        lng: unpackedBounds.swLng\n      }, {\n        lat: unpackedBounds.neLat,\n        lng: unpackedBounds.neLng\n      }];\n    } else {\n      return null;\n    }\n  };\n\n  const toggleGeolocation = () => {\n    dispatch(loadingGeoLocationStarted());\n\n    if (enableGeolocation) {\n      dispatch(loadingGeoLocationFail()); //call force failed to disable geolocation for a moment\n\n      setTimeout(() => {\n        dispatch(loadingGeoLocationSuccess());\n      }, 500); //delay for geo marker unmount\n    } else {\n      setTimeout(() => {\n        dispatch(loadingGeoLocationSuccess());\n      }, 200); //delay for user wait\n    }\n  };\n\n  const showDevInfo = () => {\n    initVH();\n    const dimention = getWindowDimensions();\n    const vh = getWindowDimensions().height * 0.01;\n    alert(\"width : \" + dimention.width + \"\\n\" + \"height : \" + dimention.height + \"\\n\" + \"vh : \" + vh + \"\\n\" + \"document.body.scrollHeight : \" + document.body.scrollHeight + \"\\n\" + \"document.body.clientHeight : \" + document.body.clientHeight + \"\\n\" + \"document.documentElement.scrollHeight : \" + document.documentElement.scrollHeight + \"\\n\" + \"document.documentElement.clientHeight : \" + document.documentElement.clientHeight + \"\\n\" + \"document.height : \" + document.height + \"\\n\");\n  }; //every map center changed, save changed center and bounds for search current location\n\n\n  const centerChange = map => {\n    let center = map.getCenter();\n    dispatch(setMapCenterChange({\n      lat: center.getLat(),\n      lng: center.getLng()\n    }));\n  };\n\n  const boundChange = map => {\n    let bounds = map.getBounds();\n    let sw = bounds.getSouthWest(),\n        ne = bounds.getNorthEast();\n    dispatch(setMapBounds({\n      swLat: sw.getLat(),\n      swLng: sw.getLng(),\n      neLat: ne.getLat(),\n      neLng: ne.getLng()\n    }));\n  };\n\n  useEffect(() => {\n    setCookie(MOOBE_COOKIE_LAST_LOCATION_NAME, mapBounds, {\n      path: \"/\",\n      maxAge: 604800\n    }); //maxAge = 7days\n  }, [mapBounds]);\n\n  const zoomChange = map => {\n    dispatch(setMapLevel(map.getLevel()));\n  };\n\n  const geoLocationCenterChanged = () => {\n    return !isSimilarLocation({\n      lat: changedCenterLat,\n      lng: changedCenterLng\n    }, {\n      lat: geoLocationCenterLat,\n      lng: geoLocationCenterLng\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(Kakao, {\n    className: props.className,\n    options: Object.assign(initialOptions, {\n      zoom: props.zoom\n    }, {\n      bounds\n    }, {\n      refreshCenter\n    }),\n    onZoomChange: debounce(zoomChange, 100),\n    onCenterChange: debounce(centerChange, 100),\n    onBoundsChange: debounce(boundChange, 100),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, props.children, enableGeolocation ? React.createElement(GeoLocationMarker, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }) : null), React.createElement(\"button\", {\n    style: {\n      backgroundImage: geolocationLoading ? \"\" : 'url(' + MapImages + ')',\n      backgroundSize: \"453px 434px\",\n      color: geolocationLoading ? \"\" : \"transparent\"\n    },\n    className: \"button geo-button\" + (isMobile ? \" mobile\" : \"\") + (enableGeolocation && !geoLocationCenterChanged() ? \" active\" : \"\"),\n    onClick: toggleGeolocation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, geolocationLoading ? React.createElement(FontAwesomeIcon, {\n    className: \"fast-spin\",\n    icon: faSpinner,\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }) : null), process.env.REACT_APP_ENV !== 'real' ? React.createElement(\"button\", {\n    className: \"button dev-button\" + (isMobile ? \" mobile\" : \"\"),\n    id: \"showDevInfo\",\n    onClick: showDevInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faInfo,\n    size: \"1x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  })) : null, React.createElement(SearchCurrentButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }), React.createElement(SearchWideLocationButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  })));\n};\n\nconst Loading = props => {\n  const _useSelector4 = useSelector(state => state.map),\n        mapLoading = _useSelector4.mapLoading,\n        errorMapLoading = _useSelector4.errorMapLoading;\n\n  const loadingText = () => errorMapLoading ? \"지도를 불러오는데에 실패했습니다. 일시적인 문제일 수 있습니다. 페이지를 다시 로딩 해 주세요.\" : \"Loading...\";\n\n  const loadingSpinner = () => errorMapLoading ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faTimesCircle,\n    size: \"3x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  })) : React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, React.createElement(MapLoadingSpinner, {\n    color: MAP_LOADING_SPINNER,\n    loading: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }));\n\n  return React.createElement(LoadingOverlay, {\n    fadeSpeed: 200,\n    className: \"loading-overlay box column is-full kakao-map is-fullheight-with-navbar-tablet is-fullheight-with-navbar-mobile is-paddingless\",\n    active: mapLoading || errorMapLoading,\n    spinner: loadingSpinner(),\n    text: loadingText(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default MoobeKakaoMap;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/MoobeKakaoMap.jsx"],"names":["React","useEffect","useState","LoadingOverlay","FontAwesomeIcon","faInfo","faSpinner","faTimesCircle","withJs","withKakaoMap","KakaoMap","useDispatch","useSelector","isMobile","MapImages","loadingGeoLocationFail","loadingGeoLocationStarted","loadingGeoLocationSuccess","loadingMapStarted","setMapBounds","setMapCenter","setMapCenterChange","setMapCenterForce","setMapLevel","setSearchOnBoundChange","MapLoadingSpinner","isEmpty","_isEmpty","isNil","_isNil","GeoLocationMarker","MAP_LOADING_SPINNER","SearchCurrentButton","debounce","buildMoobeMapBounds","isSimilarLocation","parsePath","toStringMoobeMapBounds","unpackMoobeMapBounds","queryString","useLocation","SearchWideLocationButton","getWindowDimensions","initVH","useCookies","MOOBE_COOKIE_LAST_LOCATION_NAME","Kakao","process","env","REACT_APP_KAKAO_API_KEY","MoobeKakaoMap","props","cookies","setCookie","dispatch","state","mapLocation","mapLocationList","focusedMapLocation","contentDetail","location","parse","search","query","swLat","swLng","neLat","neLng","map","centerLat","centerLng","refreshCenter","mapLoading","changedCenterLat","changedCenterLng","enableGeolocation","geoLocationCenterLat","geoLocationCenterLng","geolocationLoading","mapBounds","bounds","setBounds","initialOptions","lat","lng","level","REACT_APP_INIT_MAP_LEVEL","zoom","REACT_APP_INIT_MAP_CENTER_LAT","REACT_APP_INIT_MAP_CENTER_LNG","pathname","channels","contents","searchMapBounds","getSearchMapBounds","buildKakaoMapBounds","latitude","longitude","store","queryMapBound","cookieMapBounds","REACT_APP_INIT_MAP_SW_LAT","REACT_APP_INIT_MAP_SW_LNG","REACT_APP_INIT_MAP_NE_LAT","REACT_APP_INIT_MAP_NE_LNG","initMapBounds","moobeMapBounds","unpackedBounds","toggleGeolocation","setTimeout","showDevInfo","dimention","vh","height","alert","width","document","body","scrollHeight","clientHeight","documentElement","centerChange","center","getCenter","getLat","getLng","boundChange","getBounds","sw","getSouthWest","ne","getNorthEast","path","maxAge","zoomChange","getLevel","geoLocationCenterChanged","className","Object","assign","children","backgroundImage","backgroundSize","color","REACT_APP_ENV","Loading","errorMapLoading","loadingText","loadingSpinner"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport LoadingOverlay from \"react-loading-overlay\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faInfo, faSpinner, faTimesCircle} from '@fortawesome/free-solid-svg-icons'\nimport withJs from \"components/common/map/WithJs\";\nimport withKakaoMap from \"components/common/map/WithKakaoMap\";\nimport KakaoMap from \"components/common/map/KakaoMap\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {isMobile} from \"react-device-detect\";\nimport MapImages from \"assets/images/map_images.png\"\nimport {\n    loadingGeoLocationFail,\n    loadingGeoLocationStarted,\n    loadingGeoLocationSuccess,\n    loadingMapStarted,\n    setMapBounds,\n    setMapCenter,\n    setMapCenterChange,\n    setMapCenterForce,\n    setMapLevel,\n    setSearchOnBoundChange\n} from \"data/redux/action/map\";\nimport {MapLoadingSpinner} from \"components/common/layout/PresentUtil\";\nimport {isEmpty as _isEmpty, isNil as _isNil} from 'lodash'\nimport GeoLocationMarker from \"components/common/map/GeoLocationMarker\";\nimport {MAP_LOADING_SPINNER} from \"assets/styles/colors\";\nimport SearchCurrentButton from \"components/common/map/SearchCurrentButton\";\nimport debounce from 'lodash.debounce';\nimport {\n    buildMoobeMapBounds,\n    isSimilarLocation,\n    parsePath,\n    toStringMoobeMapBounds,\n    unpackMoobeMapBounds\n} from \"data/util\";\nimport queryString from \"query-string\";\nimport {useLocation} from \"react-router\";\nimport SearchWideLocationButton from \"components/common/map/SearchWideLocationButton\";\nimport {getWindowDimensions, initVH} from \"components/common/layout/WindowDimensions\";\nimport {useCookies} from \"react-cookie\";\nimport {MOOBE_COOKIE_LAST_LOCATION_NAME} from \"assets/styles/const\";\n\nconst Kakao = withJs(\n    `//dapi.kakao.com/v2/maps/sdk.js?appkey=${\n        process.env.REACT_APP_KAKAO_API_KEY\n    }&libraries=services,clusterer,drawing&autoload=false`\n)(withKakaoMap(KakaoMap));\n\n\nconst MoobeKakaoMap = (props) => {\n    const [cookies, setCookie] = useCookies([MOOBE_COOKIE_LAST_LOCATION_NAME])\n    const dispatch = useDispatch();\n    const {mapLocationList, focusedMapLocation} = useSelector(state => state.mapLocation)\n    const {contentDetail} = useSelector(state => state.contentDetail)\n    const location = useLocation();\n    const {query, swLat, swLng, neLat, neLng} = queryString.parse(location.search);\n    const {\n        centerLat,\n        centerLng,\n        refreshCenter,\n        mapLoading,\n        changedCenterLat,\n        changedCenterLng,\n        enableGeolocation,\n        geoLocationCenterLat,\n        geoLocationCenterLng,\n        geolocationLoading,\n        mapBounds} = useSelector(state => state.map);\n    const [bounds, setBounds] = useState(null);\n    const initialOptions = {\n        lat: centerLat,\n        lng: centerLng,\n        level: process.env.REACT_APP_INIT_MAP_LEVEL || 4,\n        refreshCenter: refreshCenter,\n        zoom: props.zoom ? props.zoom : \"TOPRIGHT\"\n    };\n\n    // 초기 center, query param으로 부터 lat,lng받아서 map bounds 셋팅, map loading start\n    useEffect(() => {\n        dispatch(setMapCenter({lat: process.env.REACT_APP_INIT_MAP_CENTER_LAT, lng:process.env.REACT_APP_INIT_MAP_CENTER_LNG}));\n        dispatch(loadingMapStarted());\n        const {channels, contents} = parsePath(location.pathname)\n        if (contents == null) {\n            dispatch(setSearchOnBoundChange(true))\n        }\n        let searchMapBounds = getSearchMapBounds();\n        if (!_isNil(searchMapBounds)) {\n            setBounds(buildKakaoMapBounds(searchMapBounds));\n            dispatch(setMapBounds(unpackMoobeMapBounds(searchMapBounds)))\n        }\n        return () => {\n            dispatch(loadingGeoLocationFail()); // reset geolocation\n        }\n    }, []);\n\n    //query에 bounds정보가 없고 검색어가 있을 때 map location list 데이터로 bound를 결정.\n    useEffect(() => {\n        if (_isNil(buildMoobeMapBounds(swLat, swLng, neLat, neLng)) && !_isEmpty(query) && !_isEmpty(mapLocationList)) {\n            setBounds(mapLocationList.map(mapLocation => {\n                return {lat: mapLocation.latitude, lng: mapLocation.longitude}\n            }));\n        }\n    }, [mapLocationList]);\n\n    //desktop: map이 loading되어 있고 content detail이 load될 때 content의 center로 map center change\n    useEffect(() => {\n        if (!isMobile && !_isEmpty(contentDetail) && !mapLoading) {\n            dispatch(setMapCenterForce({lat: contentDetail.store.latitude, lng: contentDetail.store.longitude}));\n        }\n    }, [contentDetail, mapLoading]);\n\n    //mobile: map이 loading되어 있고 focusedMapLocation이 load될 때 location center로 map center change\n    useEffect(() => {\n        if (isMobile && !_isEmpty(focusedMapLocation) && !mapLoading) {\n            dispatch(setMapCenterForce({lat: focusedMapLocation.latitude, lng: focusedMapLocation.longitude}));\n        }\n    }, [focusedMapLocation, mapLoading]);\n\n    //검색 조건이 될 map bounds를 결정한다. 우선순위 query에 존재하는 bounds 정보 > cookie에 존재하는 bounds 정보 > env파일에 존재하는 bounds 정보\n    const getSearchMapBounds = () => {\n        let queryMapBound = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n        if (!_isNil(queryMapBound)) {\n            return queryMapBound;\n        }\n        let cookieMapBounds = cookies[MOOBE_COOKIE_LAST_LOCATION_NAME]\n        if (!_isNil(unpackMoobeMapBounds(cookieMapBounds))) {\n            return cookieMapBounds;\n        }\n        if (process.env.REACT_APP_INIT_MAP_SW_LAT && process.env.REACT_APP_INIT_MAP_SW_LNG\n            && process.env.REACT_APP_INIT_MAP_NE_LAT && process.env.REACT_APP_INIT_MAP_NE_LNG) {\n            let initMapBounds = buildMoobeMapBounds(\n                process.env.REACT_APP_INIT_MAP_SW_LAT, process.env.REACT_APP_INIT_MAP_SW_LNG,\n                process.env.REACT_APP_INIT_MAP_NE_LAT, process.env.REACT_APP_INIT_MAP_NE_LNG);\n            return initMapBounds;\n        }\n        return null;\n\n    }\n\n\n    const buildKakaoMapBounds = (moobeMapBounds) => {\n        const unpackedBounds = unpackMoobeMapBounds(moobeMapBounds);\n        if (!_isNil(unpackedBounds)) {\n            return [{lat: unpackedBounds.swLat, lng: unpackedBounds.swLng}, {lat: unpackedBounds.neLat, lng: unpackedBounds.neLng}];\n        } else {\n            return null;\n        }\n    };\n\n    const toggleGeolocation = () => {\n        dispatch(loadingGeoLocationStarted());\n        if(enableGeolocation) {\n            dispatch(loadingGeoLocationFail()); //call force failed to disable geolocation for a moment\n            setTimeout(() => {\n                dispatch(loadingGeoLocationSuccess());\n            }, 500) //delay for geo marker unmount\n        } else {\n            setTimeout(() => {\n                dispatch(loadingGeoLocationSuccess());\n            }, 200) //delay for user wait\n\n        }\n    };\n\n    const showDevInfo = () => {\n        initVH()\n        const dimention = getWindowDimensions()\n\n        const vh = getWindowDimensions().height * 0.01;\n        alert(\"width : \" + dimention.width + \"\\n\" +\n            \"height : \" + dimention.height + \"\\n\" +\n            \"vh : \" + vh + \"\\n\" +\n            \"document.body.scrollHeight : \" + document.body.scrollHeight + \"\\n\" +\n            \"document.body.clientHeight : \" + document.body.clientHeight + \"\\n\" +\n            \"document.documentElement.scrollHeight : \" + document.documentElement.scrollHeight + \"\\n\" +\n            \"document.documentElement.clientHeight : \" + document.documentElement.clientHeight + \"\\n\" +\n            \"document.height : \" + document.height + \"\\n\"\n        )\n    }\n\n    //every map center changed, save changed center and bounds for search current location\n    const centerChange = (map) => {\n        let center = map.getCenter();\n        dispatch(setMapCenterChange({lat: center.getLat(), lng: center.getLng()}));\n    };\n\n    const boundChange = (map) => {\n        let bounds = map.getBounds();\n        let sw = bounds.getSouthWest(), ne = bounds.getNorthEast();\n        dispatch(setMapBounds({swLat: sw.getLat(), swLng: sw.getLng(), neLat: ne.getLat(), neLng: ne.getLng()}));\n    };\n\n    useEffect(() => {\n        setCookie(MOOBE_COOKIE_LAST_LOCATION_NAME, mapBounds, {path : \"/\", maxAge: 604800}) //maxAge = 7days\n    }, [mapBounds])\n\n    const zoomChange = (map) => {\n        dispatch(setMapLevel(map.getLevel()));\n    }\n\n    const geoLocationCenterChanged = () => {\n        return !isSimilarLocation({lat: changedCenterLat, lng: changedCenterLng}, {lat: geoLocationCenterLat, lng: geoLocationCenterLng})\n    }\n    return (\n        <>\n            <Loading>\n                <Kakao className={props.className}\n                        options={Object.assign(initialOptions, {zoom: props.zoom}, {bounds}, {refreshCenter})}\n                        onZoomChange={debounce(zoomChange, 100)}\n                        onCenterChange={debounce(centerChange, 100)}\n                        onBoundsChange={debounce(boundChange, 100)}>\n                    {props.children}\n                    {enableGeolocation ? <GeoLocationMarker/> : null}\n                </Kakao>\n                <button style={{\n                    backgroundImage: geolocationLoading ? \"\" : 'url(' + MapImages + ')',\n                    backgroundSize: \"453px 434px\",\n                    color: geolocationLoading ? \"\" : \"transparent\"\n                }} className={\"button geo-button\" + (isMobile ? \" mobile\" : \"\") + (enableGeolocation && !geoLocationCenterChanged() ? \" active\" : \"\")} onClick={toggleGeolocation}>\n                    {geolocationLoading ? <FontAwesomeIcon className=\"fast-spin\" icon={faSpinner} size={\"lg\"}/> : null }\n                </button>\n                {process.env.REACT_APP_ENV !== 'real'\n                ? <button className={\"button dev-button\"  + (isMobile ? \" mobile\" : \"\")} id={\"showDevInfo\"} onClick={showDevInfo} >\n                        <FontAwesomeIcon icon={faInfo} size={\"1x\"} />\n                    </button>\n                : null}\n                <SearchCurrentButton />\n                <SearchWideLocationButton />\n\n            </Loading>\n        </>\n    )\n};\n\nconst Loading = (props) => {\n    const {mapLoading, errorMapLoading} = useSelector(state => state.map);\n    const loadingText = () => errorMapLoading ? \"지도를 불러오는데에 실패했습니다. 일시적인 문제일 수 있습니다. 페이지를 다시 로딩 해 주세요.\" : \"Loading...\";\n    const loadingSpinner = () => errorMapLoading ? <h2><FontAwesomeIcon icon={faTimesCircle} size='3x' /></h2>\n        : <h6><MapLoadingSpinner color={MAP_LOADING_SPINNER} loading={true} /></h6>;\n    return (\n        <LoadingOverlay\n            fadeSpeed={200}\n            className={\"loading-overlay box column is-full kakao-map is-fullheight-with-navbar-tablet is-fullheight-with-navbar-mobile is-paddingless\"}\n            active={mapLoading || errorMapLoading}\n            spinner={loadingSpinner()}\n            text={loadingText()}\n        >\n            {props.children}\n        </LoadingOverlay>\n    )\n};\n\nexport default MoobeKakaoMap;"]},"metadata":{},"sourceType":"module"}