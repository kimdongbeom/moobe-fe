{"ast":null,"code":"import axios from 'axios';\nimport { getChannels, getContents } from \"data/api\";\nexport const CHANNEL_RESET_CHANNEL_DATA = 'CHANNEL/RESET_CHANNEL_DATA';\nexport const CHANNEL_SET_ACTIVE_CHANNEL = 'CHANNEL/SET_ACTIVE_CHANNEL';\nexport const CHANNEL_FETCH_CHANNEL = 'CHANNEL/FETCH_CHANNEL';\nexport const CHANNEL_FETCH_CHANNEL_STARTED = 'CHANNEL/FETCH_CHANNEL_STARTED';\nexport const CHANNEL_FETCH_CHANNEL_FINISHED = 'CHANNEL/FETCH_CHANNEL_FINISHED';\nexport const CHANNEL_FETCH_CHANNEL_SUCCESS = 'CHANNEL/FETCH_CHANNEL_SUCCESS';\nexport const CHANNEL_FETCH_CHANNEL_ERROR = 'CHANNEL/FETCH_CHANNEL_ERROR';\nexport const fetchChannel = activeChannelId => {\n  return dispatch => {\n    dispatch(fetchChannelStarted());\n    return getChannels().then(response => {\n      dispatch(fetchChannelSuccess({\n        data: response.data,\n        activeChannelId: activeChannelId\n      }));\n    }).catch(function (error) {\n      dispatch(fetchChannelFail(error));\n    }).finally(() => {\n      dispatch(fetchChannelFinished());\n    });\n  };\n};\nexport const resetChannelData = () => {\n  return {\n    type: CHANNEL_RESET_CHANNEL_DATA\n  };\n};\nexport const fetchChannelStarted = () => {\n  return {\n    type: CHANNEL_FETCH_CHANNEL_STARTED\n  };\n};\nexport const fetchChannelFinished = () => {\n  return {\n    type: CHANNEL_FETCH_CHANNEL_FINISHED\n  };\n};\nexport const fetchChannelSuccess = data => {\n  return {\n    type: CHANNEL_FETCH_CHANNEL_SUCCESS,\n    data: data\n  };\n};\nexport const fetchChannelFail = err => {\n  return {\n    type: CHANNEL_FETCH_CHANNEL_ERROR,\n    err\n  };\n};\nexport const setActiveChannel = channelId => {\n  return {\n    type: CHANNEL_SET_ACTIVE_CHANNEL,\n    channelId\n  };\n};","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/redux/action/channel.js"],"names":["axios","getChannels","getContents","CHANNEL_RESET_CHANNEL_DATA","CHANNEL_SET_ACTIVE_CHANNEL","CHANNEL_FETCH_CHANNEL","CHANNEL_FETCH_CHANNEL_STARTED","CHANNEL_FETCH_CHANNEL_FINISHED","CHANNEL_FETCH_CHANNEL_SUCCESS","CHANNEL_FETCH_CHANNEL_ERROR","fetchChannel","activeChannelId","dispatch","fetchChannelStarted","then","response","fetchChannelSuccess","data","catch","error","fetchChannelFail","finally","fetchChannelFinished","resetChannelData","type","err","setActiveChannel","channelId"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,UAAvC;AAEA,OAAO,MAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,MAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,MAAMC,6BAA6B,GAAG,+BAAtC;AACP,OAAO,MAAMC,8BAA8B,GAAG,gCAAvC;AACP,OAAO,MAAMC,6BAA6B,GAAG,+BAAtC;AACP,OAAO,MAAMC,2BAA2B,GAAG,6BAApC;AAGP,OAAO,MAAMC,YAAY,GAAIC,eAAD,IAAqB;AAC7C,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACC,mBAAmB,EAApB,CAAR;AACA,WAAOZ,WAAW,GAAGa,IAAd,CAAmBC,QAAQ,IAAI;AAClCH,MAAAA,QAAQ,CAACI,mBAAmB,CAAC;AAACC,QAAAA,IAAI,EAAEF,QAAQ,CAACE,IAAhB;AAAsBN,QAAAA,eAAe,EAAEA;AAAvC,OAAD,CAApB,CAAR;AACH,KAFM,EAEJO,KAFI,CAEE,UAAUC,KAAV,EAAiB;AACtBP,MAAAA,QAAQ,CAACQ,gBAAgB,CAACD,KAAD,CAAjB,CAAR;AACH,KAJM,EAIJE,OAJI,CAII,MAAM;AACbT,MAAAA,QAAQ,CAACU,oBAAoB,EAArB,CAAR;AACH,KANM,CAAP;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAClC,SAAO;AACHC,IAAAA,IAAI,EAAErB;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMU,mBAAmB,GAAG,MAAM;AACrC,SAAO;AACHW,IAAAA,IAAI,EAAElB;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMgB,oBAAoB,GAAG,MAAM;AACtC,SAAO;AACHE,IAAAA,IAAI,EAAEjB;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMS,mBAAmB,GAAIC,IAAD,IAAU;AACzC,SAAO;AACHO,IAAAA,IAAI,EAAEhB,6BADH;AAEHS,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,gBAAgB,GAAIK,GAAD,IAAS;AACrC,SAAO;AACHD,IAAAA,IAAI,EAAEf,2BADH;AAEHgB,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,MAAMC,gBAAgB,GAAIC,SAAD,IAAe;AAC3C,SAAO;AACHH,IAAAA,IAAI,EAAEpB,0BADH;AAEHuB,IAAAA;AAFG,GAAP;AAIH,CALM","sourcesContent":["import axios from 'axios';\nimport {getChannels, getContents} from \"data/api\";\n\nexport const CHANNEL_RESET_CHANNEL_DATA = 'CHANNEL/RESET_CHANNEL_DATA';\nexport const CHANNEL_SET_ACTIVE_CHANNEL = 'CHANNEL/SET_ACTIVE_CHANNEL';\nexport const CHANNEL_FETCH_CHANNEL = 'CHANNEL/FETCH_CHANNEL';\n\nexport const CHANNEL_FETCH_CHANNEL_STARTED = 'CHANNEL/FETCH_CHANNEL_STARTED';\nexport const CHANNEL_FETCH_CHANNEL_FINISHED = 'CHANNEL/FETCH_CHANNEL_FINISHED';\nexport const CHANNEL_FETCH_CHANNEL_SUCCESS = 'CHANNEL/FETCH_CHANNEL_SUCCESS';\nexport const CHANNEL_FETCH_CHANNEL_ERROR = 'CHANNEL/FETCH_CHANNEL_ERROR';\n\n\nexport const fetchChannel = (activeChannelId) => {\n    return (dispatch) => {\n        dispatch(fetchChannelStarted());\n        return getChannels().then(response => {\n            dispatch(fetchChannelSuccess({data: response.data, activeChannelId: activeChannelId}))\n        }).catch(function (error) {\n            dispatch(fetchChannelFail(error))\n        }).finally(() => {\n            dispatch(fetchChannelFinished())\n        });\n    }\n};\n\nexport const resetChannelData = () => {\n    return {\n        type: CHANNEL_RESET_CHANNEL_DATA\n    }\n}\n\nexport const fetchChannelStarted = () => {\n    return {\n        type: CHANNEL_FETCH_CHANNEL_STARTED\n    }\n}\n\nexport const fetchChannelFinished = () => {\n    return {\n        type: CHANNEL_FETCH_CHANNEL_FINISHED\n    }\n}\n\nexport const fetchChannelSuccess = (data) => {\n    return {\n        type: CHANNEL_FETCH_CHANNEL_SUCCESS,\n        data: data\n    }\n}\n\nexport const fetchChannelFail = (err) => {\n    return {\n        type: CHANNEL_FETCH_CHANNEL_ERROR,\n        err\n    }\n}\n\nexport const setActiveChannel = (channelId) => {\n    return {\n        type: CHANNEL_SET_ACTIVE_CHANNEL,\n        channelId\n    }\n};\n\n"]},"metadata":{},"sourceType":"module"}