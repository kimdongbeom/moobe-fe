{"ast":null,"code":"import { updateObject } from \"data/util\";\nimport Content from \"data/redux/model/Content\";\nimport { concat as _concat, find as _find, isNil as _isNil, map as _map, toNumber as _toNumber, toString as _toString, uniqWith as _uniqWith } from \"lodash\";\nimport { CONTENT_FETCH_CONTENT_FINISHED, CONTENT_FETCH_CONTENT_STARTED, CONTENT_FETCH_CONTENT_SUCCESS, CONTENT_RESET_CONTENT_DATA, CONTENT_SET_ACTIVE_CONTENT, CONTENT_SET_CONTENT_LOADING, CONTENT_SET_FOCUSED_CONTENT, CONTENT_SHOW_OVERLAY_CONTENT, CONTENT_SHOW_OVERLAY_CONTENT_WITH_DIFF } from \"data/redux/action/content\";\nconst initialStateContent = {\n  apiResult: null,\n  contentList: [],\n  contentLoading: false,\n  activeContent: null,\n  activeOverlayContent: null,\n  focusedContent: null,\n  pageNum: 1,\n  totalCount: 0,\n  maxPage: 0\n};\n\nfunction fetchSuccess(contentState, response) {\n  const data = response.data,\n        activeContentId = response.activeContentId,\n        pageNum = response.pageNum,\n        isAppend = response.isAppend,\n        isUnit = response.isUnit;\n  let contentList,\n      contentCount = {};\n\n  if (isUnit) {\n    contentList = renderResult([data]);\n  } else {\n    contentList = renderResult(data.contents);\n    contentCount = renderCount(data.pageInfo);\n  }\n\n  let updateState = buildState(contentState, contentList, contentCount, activeContentId, pageNum, isAppend, isUnit);\n  return updateObject(contentState, updateState);\n}\n\nfunction buildState(originState, contentList, contentCount, activeContentId, pageNum, isAppend, isUnit) {\n  let activeContent = _find(contentList, content => _toString(content.id) === activeContentId);\n\n  return updateObject({\n    contentList: !isAppend ? contentList : isUnit ? mergeContents(contentList, originState.contentList) : mergeContents(originState.contentList, contentList),\n    activeContent: activeContent,\n    activeOverlayContent: activeContent,\n    pageNum: pageNum ? _toNumber(pageNum) : originState.pageNum\n  }, contentCount);\n}\n\nfunction renderResult(results) {\n  if (results) {\n    return _map(results, result => new Content(result));\n  } else {\n    return [];\n  }\n}\n\nfunction renderCount(pageInfo) {\n  if (pageInfo) {\n    return {\n      totalCount: pageInfo.totalCount,\n      maxPage: pageInfo.totalPage\n    };\n  } else {\n    return {};\n  }\n}\n\nfunction mergeContents(originContentList, newContentList) {\n  return _uniqWith(_concat(originContentList, newContentList), isEqualsContent);\n}\n\nfunction isEqualsContent(content1, content2) {\n  if (_isNil(content1) || _isNil(content2)) {\n    return false;\n  }\n\n  return content1.id === content2.id;\n}\n/*\ndiff with current active content, if not equals, change active content\nfor kakao map marker onClick event.\nbecause onClick function is passed when marker is created and not changed anymore. so onClick function can not refer current active content\n */\n\n\nfunction updateActiveOverlayWithDiff(contentState, {\n  activeOverlayContent\n}) {\n  if (!isEqualsContent(contentState.activeOverlayContent, activeOverlayContent)) {\n    return updateObject(contentState, {\n      activeOverlayContent\n    });\n  }\n\n  return contentState;\n}\n\nfunction updateFocusedContent(contentState, {\n  focusedContent\n}) {\n  return updateObject(contentState, {\n    focusedContent\n  });\n}\n\nfunction updateContentCount(contentState, contentCount) {\n  return updateObject(contentState, {\n    totalCount: contentCount.totalCount,\n    maxPage: contentCount.totalPage\n  });\n}\n\nexport default function (contentState = initialStateContent, action) {\n  switch (action.type) {\n    case CONTENT_RESET_CONTENT_DATA:\n      return updateObject(contentState, {\n        contentList: []\n      });\n\n    case CONTENT_SET_ACTIVE_CONTENT:\n      return updateObject(contentState, {\n        activeContent: action.content\n      });\n\n    case CONTENT_SET_CONTENT_LOADING:\n      return updateObject(contentState, {\n        contentLoading: action.contentLoading\n      });\n\n    case CONTENT_SHOW_OVERLAY_CONTENT:\n      return updateObject(contentState, {\n        activeOverlayContent: action.content\n      });\n\n    case CONTENT_SHOW_OVERLAY_CONTENT_WITH_DIFF:\n      return updateActiveOverlayWithDiff(contentState, {\n        activeOverlayContent: action.content\n      });\n\n    case CONTENT_SET_FOCUSED_CONTENT:\n      return updateFocusedContent(contentState, {\n        focusedContent: action.content\n      });\n\n    case CONTENT_FETCH_CONTENT_STARTED:\n      return updateObject(contentState, {\n        contentLoading: true\n      });\n\n    case CONTENT_FETCH_CONTENT_FINISHED:\n      return updateObject(contentState, {\n        contentLoading: false\n      });\n\n    case CONTENT_FETCH_CONTENT_SUCCESS:\n      return fetchSuccess(contentState, action.data);\n\n    default:\n      return contentState;\n  }\n}","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/redux/reducers/contentReducer.js"],"names":["updateObject","Content","concat","_concat","find","_find","isNil","_isNil","map","_map","toNumber","_toNumber","toString","_toString","uniqWith","_uniqWith","CONTENT_FETCH_CONTENT_FINISHED","CONTENT_FETCH_CONTENT_STARTED","CONTENT_FETCH_CONTENT_SUCCESS","CONTENT_RESET_CONTENT_DATA","CONTENT_SET_ACTIVE_CONTENT","CONTENT_SET_CONTENT_LOADING","CONTENT_SET_FOCUSED_CONTENT","CONTENT_SHOW_OVERLAY_CONTENT","CONTENT_SHOW_OVERLAY_CONTENT_WITH_DIFF","initialStateContent","apiResult","contentList","contentLoading","activeContent","activeOverlayContent","focusedContent","pageNum","totalCount","maxPage","fetchSuccess","contentState","response","data","activeContentId","isAppend","isUnit","contentCount","renderResult","contents","renderCount","pageInfo","updateState","buildState","originState","content","id","mergeContents","results","result","totalPage","originContentList","newContentList","isEqualsContent","content1","content2","updateActiveOverlayWithDiff","updateFocusedContent","updateContentCount","action","type"],"mappings":"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","sourcesContent":["import {updateObject} from \"data/util\";\nimport Content from \"data/redux/model/Content\";\nimport {\n    concat as _concat,\n    find as _find,\n    isNil as _isNil,\n    map as _map,\n    toNumber as _toNumber,\n    toString as _toString,\n    uniqWith as _uniqWith\n} from \"lodash\";\nimport {\n    CONTENT_FETCH_CONTENT_FINISHED,\n    CONTENT_FETCH_CONTENT_STARTED,\n    CONTENT_FETCH_CONTENT_SUCCESS,\n    CONTENT_RESET_CONTENT_DATA,\n    CONTENT_SET_ACTIVE_CONTENT,\n    CONTENT_SET_CONTENT_LOADING,\n    CONTENT_SET_FOCUSED_CONTENT,\n    CONTENT_SHOW_OVERLAY_CONTENT,\n    CONTENT_SHOW_OVERLAY_CONTENT_WITH_DIFF\n} from \"data/redux/action/content\";\n\nconst initialStateContent = {\n    apiResult: null,\n    contentList: [],\n    contentLoading: false,\n    activeContent: null,\n    activeOverlayContent: null,\n    focusedContent: null,\n    pageNum: 1,\n    totalCount: 0,\n    maxPage: 0,\n};\n\nfunction fetchSuccess(contentState, response) {\n    const {data, activeContentId, pageNum, isAppend, isUnit} = response;\n    let contentList, contentCount = {};\n    if (isUnit) {\n        contentList = renderResult([data])\n    } else {\n        contentList = renderResult(data.contents)\n        contentCount = renderCount(data.pageInfo)\n    }\n    let updateState = buildState(contentState, contentList, contentCount, activeContentId, pageNum, isAppend, isUnit);\n    return updateObject(contentState, updateState)\n}\n\nfunction buildState(originState, contentList, contentCount, activeContentId, pageNum, isAppend, isUnit ) {\n    let activeContent = _find(contentList, (content) => _toString(content.id) === activeContentId);\n    return updateObject({\n        contentList: !isAppend ? contentList : isUnit ? mergeContents(contentList, originState.contentList) : mergeContents(originState.contentList, contentList),\n        activeContent: activeContent,\n        activeOverlayContent: activeContent,\n        pageNum: pageNum ? _toNumber(pageNum) : originState.pageNum\n    }, contentCount)\n}\n\nfunction renderResult(results) {\n    if (results) {\n        return _map(results, (result) => new Content(result));\n    } else {\n        return []\n    }\n}\n\nfunction renderCount(pageInfo) {\n    if (pageInfo) {\n        return {\n            totalCount: pageInfo.totalCount,\n            maxPage: pageInfo.totalPage\n        }\n    } else {\n        return {}\n    }\n}\n\nfunction mergeContents(originContentList, newContentList) {\n    return  _uniqWith(_concat(originContentList, newContentList), isEqualsContent);\n}\n\nfunction isEqualsContent(content1, content2) {\n    if (_isNil(content1) || _isNil(content2)) {\n        return false;\n    }\n    return content1.id === content2.id;\n}\n\n\n/*\ndiff with current active content, if not equals, change active content\nfor kakao map marker onClick event.\nbecause onClick function is passed when marker is created and not changed anymore. so onClick function can not refer current active content\n */\nfunction updateActiveOverlayWithDiff(contentState, {activeOverlayContent}) {\n    if (!isEqualsContent(contentState.activeOverlayContent, activeOverlayContent)) {\n        return updateObject(contentState, {activeOverlayContent});\n    }\n    return contentState;\n}\n\nfunction updateFocusedContent(contentState, {focusedContent}) {\n    return updateObject(contentState, {focusedContent});\n}\n\nfunction updateContentCount(contentState, contentCount) {\n    return updateObject(contentState, {\n        totalCount: contentCount.totalCount,\n        maxPage: contentCount.totalPage\n    })\n}\n\nexport default function(contentState = initialStateContent, action) {\n    switch(action.type) {\n        case CONTENT_RESET_CONTENT_DATA: return updateObject(contentState, {contentList: []});\n        case CONTENT_SET_ACTIVE_CONTENT : return updateObject(contentState, {activeContent: action.content});\n        case CONTENT_SET_CONTENT_LOADING : return updateObject(contentState, {contentLoading: action.contentLoading});\n        case CONTENT_SHOW_OVERLAY_CONTENT : return updateObject(contentState, {activeOverlayContent: action.content});\n        case CONTENT_SHOW_OVERLAY_CONTENT_WITH_DIFF : return updateActiveOverlayWithDiff(contentState, {activeOverlayContent: action.content});\n        case CONTENT_SET_FOCUSED_CONTENT : return updateFocusedContent(contentState, {focusedContent: action.content});\n        case CONTENT_FETCH_CONTENT_STARTED : return updateObject(contentState, {contentLoading: true});\n        case CONTENT_FETCH_CONTENT_FINISHED : return updateObject(contentState, {contentLoading: false});\n        case CONTENT_FETCH_CONTENT_SUCCESS : return fetchSuccess(contentState, action.data);\n        default : return contentState;\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}