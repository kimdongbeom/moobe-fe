{"ast":null,"code":"var _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/home/Home.jsx\";\nimport React, { useEffect } from 'react';\nimport { fetchContentList } from \"data/redux/action/content\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DesktopHome from \"components/home/DesktopHome\";\nimport MobileHome from \"components/home/MobileHome\";\nimport queryString from 'query-string';\nimport { useMobile } from \"components/common/layout/WindowDimensions\";\nimport { useLocation, useParams } from \"react-router\";\nimport { fetchChannel } from \"data/redux/action/channel\";\nimport { forceCleanMarkerClusterer, loadingMapFinished, loadingMapStarted, resetMapCenterChange } from \"data/redux/action/map\";\nimport { isNil as _isNil } from 'lodash';\nimport { buildMoobeMapBounds, unpackMoobeMapBounds } from \"data/util\";\nimport { fetchLocation, resetLocationData } from \"data/redux/action/location\";\n\nconst MoobeHome = () => {\n  const _useParams = useParams(),\n        channelId = _useParams.channelId,\n        contentId = _useParams.contentId;\n\n  const _useSelector = useSelector(state => state.map),\n        mapBounds = _useSelector.mapBounds;\n\n  const _queryString$parse = queryString.parse(useLocation().search),\n        query = _queryString$parse.query,\n        searchType = _queryString$parse.searchType,\n        page = _queryString$parse.page,\n        swLat = _queryString$parse.swLat,\n        swLng = _queryString$parse.swLng,\n        neLat = _queryString$parse.neLat,\n        neLng = _queryString$parse.neLng,\n        k = _queryString$parse.k; // k for force refresh\n\n\n  const queryMapBounds = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n  const searchMapBounds = unpackMoobeMapBounds(queryMapBounds) ? queryMapBounds : unpackMoobeMapBounds(mapBounds) ? mapBounds : null;\n  const mobile = useMobile();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchChannel(channelId));\n\n    if (!_isNil(searchMapBounds)) {\n      dispatch(fetchLocation(channelId, query, searchType, searchMapBounds));\n    }\n\n    setTimeout(() => {\n      dispatch(loadingMapFinished());\n    }, 900);\n    return () => {\n      dispatch(loadingMapStarted());\n      dispatch(forceCleanMarkerClusterer());\n      dispatch(resetLocationData());\n    };\n  }, [channelId, query, searchType, swLat, swLng, neLat, neLng, k]);\n  useEffect(() => {\n    if (!_isNil(searchMapBounds)) {\n      dispatch(fetchContentList(channelId, query, searchType, searchMapBounds, page, false, fetchContentCallback));\n    }\n  }, [channelId, query, searchType, swLat, swLng, neLat, neLng, page, k]);\n\n  const fetchContentCallback = (channelId, contentId) => {\n    dispatch(resetMapCenterChange());\n  };\n\n  return React.createElement(React.Fragment, null, !mobile ? React.createElement(DesktopHome, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }) : React.createElement(MobileHome, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }));\n};\n\nexport default MoobeHome;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/home/Home.jsx"],"names":["React","useEffect","fetchContentList","useDispatch","useSelector","DesktopHome","MobileHome","queryString","useMobile","useLocation","useParams","fetchChannel","forceCleanMarkerClusterer","loadingMapFinished","loadingMapStarted","resetMapCenterChange","isNil","_isNil","buildMoobeMapBounds","unpackMoobeMapBounds","fetchLocation","resetLocationData","MoobeHome","channelId","contentId","state","map","mapBounds","parse","search","query","searchType","page","swLat","swLng","neLat","neLng","k","queryMapBounds","searchMapBounds","mobile","dispatch","setTimeout","fetchContentCallback"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport {fetchContentList} from \"data/redux/action/content\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport DesktopHome from \"components/home/DesktopHome\";\nimport MobileHome from \"components/home/MobileHome\";\nimport queryString from 'query-string'\nimport {useMobile} from \"components/common/layout/WindowDimensions\";\nimport {useLocation, useParams} from \"react-router\";\nimport {fetchChannel} from \"data/redux/action/channel\";\nimport {\n    forceCleanMarkerClusterer,\n    loadingMapFinished,\n    loadingMapStarted,\n    resetMapCenterChange\n} from \"data/redux/action/map\";\nimport {isNil as _isNil} from 'lodash';\nimport {buildMoobeMapBounds, unpackMoobeMapBounds} from \"data/util\";\nimport {fetchLocation, resetLocationData} from \"data/redux/action/location\";\n\nconst MoobeHome = () => {\n    const {channelId, contentId} = useParams();\n    const {mapBounds} = useSelector(state => state.map)\n    const {query, searchType, page, swLat, swLng, neLat, neLng, k} = queryString.parse(useLocation().search); // k for force refresh\n    const queryMapBounds = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n    const searchMapBounds = unpackMoobeMapBounds(queryMapBounds)\n        ? queryMapBounds\n        : unpackMoobeMapBounds(mapBounds)\n            ? mapBounds : null;\n    const mobile = useMobile();\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(fetchChannel(channelId));\n        if (!_isNil(searchMapBounds)) {\n            dispatch(fetchLocation(channelId, query, searchType, searchMapBounds));\n        }\n        setTimeout(() => {\n            dispatch(loadingMapFinished());\n        }, 900)\n        return () => {\n            dispatch(loadingMapStarted());\n            dispatch(forceCleanMarkerClusterer());\n            dispatch(resetLocationData());\n        }\n    }, [channelId, query, searchType, swLat, swLng, neLat, neLng, k]);\n\n    useEffect(() => {\n        if (!_isNil(searchMapBounds)) {\n            dispatch(fetchContentList(channelId, query, searchType, searchMapBounds, page, false, fetchContentCallback));\n        }\n    }, [channelId, query, searchType, swLat, swLng, neLat, neLng, page, k])\n\n    const fetchContentCallback = (channelId, contentId) => {\n        dispatch(resetMapCenterChange());\n    };\n\n    return (\n        <>\n            {!mobile ? <DesktopHome /> : <MobileHome />}\n        </>\n    )\n};\n\nexport default MoobeHome;"]},"metadata":{},"sourceType":"module"}