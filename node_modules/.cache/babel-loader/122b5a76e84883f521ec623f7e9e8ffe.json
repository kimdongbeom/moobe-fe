{"ast":null,"code":"import axios from \"axios\";\nimport { buildQuery, buildUrl, expandUrl, unpackMoobeMapBounds, updateObject } from \"data/util\";\nimport { isNil as _isNil } from 'lodash';\nimport { SEARCH_TYPE_STORE, SEARCH_TYPE_TAG, SEARCH_TYPE_TITLE, SEARCH_TYPE_ADDRESS } from \"data/redux/action/content\";\nexport const LOGIN_REDIRECT_URL = buildUrl(\"/login\");\nexport const LOGOUT_REDIRECT_URL = buildUrl(\"/logout\");\nconst ADMIN_URL = buildUrl(\"/admin/authorize\");\nconst ADMIN_CHANNEL_INSERT_URL = buildUrl(\"/admin/regist/channel\");\nconst ADMIN_CONTENT_INSERT_URL = buildUrl(\"/admin/contentsForm\");\nconst ADMIN_IMAGE_UPLOAD_URL = buildUrl(\"/admin/image/upload\");\nconst ADMIN_NOTICE_INSERT_URL = buildUrl(\"/admin/notice\");\nconst USER_URL = buildUrl(\"/api/session\");\nconst CHANNELS_URL = buildUrl(\"/api/channels\");\nconst CONTENTS_URL = buildUrl(\"/api/contents\");\nconst CONTENTS_RANGE_URL = buildUrl(\"/api/contents/range\");\nconst CONTENT_URL = buildUrl(\"/api/contents/{{contentId}}\");\nconst CONTENT_LIKE_URL = buildUrl(\"/api/contents/like\");\nconst CONTENT_UNLIKE_URL = buildUrl(\"/api/contents/like/cancel\");\nconst FAVORITE_CHANNELS_URL = buildUrl(\"/api/favorites/channels\");\nconst FAVORITE_CONTENTS_URL = buildUrl(\"/api/favorites/contents\");\nconst FAVORITE_CONTENTS_CHANNEL_URL = buildUrl(\"/api/favorites/channels/{{channelId}}/contents\");\nconst CONTENT_SEARCH_URL = buildUrl(\"/api/search\");\nconst CONTENT_SEARCH_CONTENT_TITLE_URL = buildUrl(\"/api/search/contents/title\");\nconst CONTENT_SEARCH_STORE_TITLE_URL = buildUrl(\"/api/search/store/title\");\nconst CONTENT_SEARCH_TAG_URL = buildUrl(\"/api/search/tag\");\nconst CONTENT_SEARCH_ADDRESS_URL = buildUrl(\"/api/search/address\");\nconst COMMENT_MOOBE_URL = buildUrl(\"/api/{{contentId}}/comments/moobe\");\nconst COMMENT_YOUTUBE_URL = buildUrl(\"/api/{{contentId}}/comments/youtube\");\nconst COMMENT_LIKE_URL = buildUrl(\"/api/comment/like\");\nconst COMMENT_UNLIKE_URL = buildUrl(\"/api/comment/like/cancel\");\nconst COMMENT_INSERT_URL = buildUrl(\"/api/comment/insert\");\nconst COMMENT_UPDATE_URL = buildUrl(\"/api/comment/modify\");\nconst COMMENT_DELETE_URL = buildUrl(\"/api/comment/delete\");\nconst LOCATIONS_URL = buildUrl(\"/api/contents/locations\");\nconst LOCATIONS_RANGE_URL = buildUrl(\"/api/contents/range/locations\");\nconst CLUSTER_LOCATIONS_URL = buildUrl(\"/api/cluster\");\nconst NOTICE_URL = buildUrl(\"/api/notices/{{id}}\");\nconst NOTICE_LIST_URL = buildUrl(\"/api/notices\");\nconst NOTICE_TODAY_URL = buildUrl(\"/api/notices/today\"); //api\n\nexport const getChannels = () => {\n  return axios.get(CHANNELS_URL);\n};\nexport const getFavoriteChannels = () => {\n  return axios.get(FAVORITE_CHANNELS_URL, {\n    withCredentials: true\n  });\n};\nexport const getContents = (channel = null, mapBounds = null, page = null) => {\n  if (_isNil(mapBounds)) {\n    let query = buildQuery(Object.assign({\n      channel,\n      page\n    }));\n    return axios.get(expandUrl(CONTENTS_URL, {}, query), {\n      withCredentials: true\n    });\n  } else {\n    let body = Object.assign(_isNil(channel) ? {} : {\n      channelId: channel\n    }, {\n      pageNum: page\n    }, unpackMoobeMapBounds(mapBounds));\n    return axios.post(CONTENTS_RANGE_URL, body, {\n      withCredentials: true\n    });\n  }\n};\nexport const searchContents = (query, searchType, channel = null, mapBounds = null, page = null) => {\n  let searchQuery = buildQuery({\n    query\n  });\n  let url = getSearchUrl(searchType);\n  let body = Object.assign(_isNil(channel) ? {} : {\n    channelId: channel\n  }, {\n    pageNum: page\n  }, unpackMoobeMapBounds(mapBounds));\n  return axios.post(expandUrl(url, {}, searchQuery), body, {\n    withCredentials: true\n  });\n};\n\nconst getSearchUrl = searchType => {\n  switch (searchType) {\n    case SEARCH_TYPE_TITLE:\n      return CONTENT_SEARCH_CONTENT_TITLE_URL;\n\n    case SEARCH_TYPE_STORE:\n      return CONTENT_SEARCH_STORE_TITLE_URL;\n\n    case SEARCH_TYPE_TAG:\n      return CONTENT_SEARCH_TAG_URL;\n\n    case SEARCH_TYPE_ADDRESS:\n      return CONTENT_SEARCH_ADDRESS_URL;\n\n    default:\n      return CONTENT_SEARCH_URL;\n  }\n};\n\nexport const getContent = (contentId, channel = null) => {\n  let query = buildQuery({\n    channel\n  });\n  return axios.get(expandUrl(CONTENT_URL, {\n    contentId\n  }, query), {\n    withCredentials: true\n  });\n};\nexport const getContentLocations = (channel = null, mapBounds = null) => {\n  if (_isNil(mapBounds)) {\n    let query = buildQuery({\n      channel\n    });\n    return axios.get(expandUrl(LOCATIONS_URL, {}, query));\n  } else {\n    let body = Object.assign(_isNil(channel) ? {} : {\n      channelId: channel\n    }, unpackMoobeMapBounds(mapBounds));\n    return axios.post(LOCATIONS_RANGE_URL, body);\n  }\n};\nexport const searchContentLocations = (query, searchType, channel = null, mapBounds = null) => {\n  let searchTypeFlag = getLocationSearchType(searchType);\n  let queryDict = Object.assign({\n    query\n  }, {\n    flag: searchTypeFlag\n  });\n\n  if (_isNil(mapBounds)) {\n    let query = buildQuery(Object.assign({\n      channel\n    }, queryDict));\n    return axios.get(expandUrl(LOCATIONS_URL, {}, query));\n  } else {\n    let query = buildQuery(queryDict);\n    let body = Object.assign(_isNil(channel) ? {} : {\n      channelId: channel\n    }, unpackMoobeMapBounds(mapBounds));\n    return axios.post(expandUrl(LOCATIONS_RANGE_URL, {}, query), body, {\n      withCredentials: true\n    });\n  }\n};\nexport const getClusterLocations = (channel = null, mapLevel = null, mapBounds = null) => {\n  let query;\n\n  if (!_isNil(mapBounds)) {\n    query = buildQuery(Object.assign({\n      channel,\n      level: mapLevel\n    }, unpackMoobeMapBounds(mapBounds)));\n  } else {\n    query = buildQuery({\n      channel,\n      level: mapLevel\n    });\n  }\n\n  return axios.get(expandUrl(CLUSTER_LOCATIONS_URL, {}, query));\n};\n\nconst getLocationSearchType = searchType => {\n  switch (searchType) {\n    case SEARCH_TYPE_ADDRESS:\n      return 5;\n\n    case SEARCH_TYPE_TAG:\n      return 4;\n\n    case SEARCH_TYPE_TITLE:\n      return 3;\n\n    case SEARCH_TYPE_STORE:\n      return 2;\n\n    default:\n      return 1;\n  }\n};\n\nexport const getFavoriteContents = (channel = null) => {\n  if (_isNil(channel)) {\n    return axios.get(FAVORITE_CONTENTS_URL, {\n      withCredentials: true\n    });\n  } else {\n    return axios.get(expandUrl(FAVORITE_CONTENTS_CHANNEL_URL, {\n      channelId: channel\n    }), {\n      withCredentials: true\n    });\n  }\n};\nexport const getMoobeComment = (contentId, page) => {\n  let query = buildQuery({\n    page\n  });\n  return axios.get(expandUrl(COMMENT_MOOBE_URL, {\n    contentId\n  }, query), {\n    withCredentials: true\n  });\n};\nexport const getYoutubeComment = (contentId, page) => {\n  let query = buildQuery({\n    page\n  });\n  return axios.get(expandUrl(COMMENT_YOUTUBE_URL, {\n    contentId\n  }, query), {\n    withCredentials: true\n  });\n};\nexport const getUser = () => axios.get(USER_URL, {\n  withCredentials: true\n});\nexport const checkAdmin = () => axios.get(ADMIN_URL, {\n  withCredentials: true\n});\n\nconst getCsrfHeader = () => {\n  let token = document.getElementById(\"_csrf\").getAttribute(\"content\");\n  let headerName = document.getElementById(\"_csrf_header\").getAttribute(\"content\");\n  return {\n    [headerName]: token\n  };\n};\n\nexport const updateContentLike = (email, contentId, like) => {\n  let body = {\n    id: contentId,\n    email: email\n  };\n\n  if (like) {\n    return axios.post(CONTENT_LIKE_URL, body, {\n      withCredentials: true\n    });\n  } else {\n    return axios.post(CONTENT_UNLIKE_URL, body, {\n      withCredentials: true\n    });\n  }\n};\nexport const updateCommentLike = (email, commentId, contentsId, like) => {\n  let body = {\n    id: commentId,\n    email: email,\n    contentsId: contentsId\n  };\n\n  if (like) {\n    return axios.post(COMMENT_LIKE_URL, body, {\n      withCredentials: true\n    });\n  } else {\n    return axios.post(COMMENT_UNLIKE_URL, body, {\n      withCredentials: true\n    });\n  }\n};\nexport const insertComment = (email, contentId, value) => {\n  let body = {\n    email: email,\n    contentsId: contentId,\n    comment: value,\n    likeCount: 0\n  };\n  return axios.post(COMMENT_INSERT_URL, body, {\n    withCredentials: true\n  });\n};\nexport const updateComment = (email, commentId, value) => {\n  let body = {\n    id: commentId,\n    email: email,\n    comment: value\n  };\n  return axios.post(COMMENT_UPDATE_URL, body, {\n    withCredentials: true\n  });\n};\nexport const deleteComment = (email, commentId) => {\n  let body = {\n    id: commentId,\n    email: email\n  };\n  return axios.post(COMMENT_DELETE_URL, body, {\n    withCredentials: true\n  });\n};\nexport const insertChannels = data => {\n  return axios.post(ADMIN_CHANNEL_INSERT_URL, data, {\n    headers: getCsrfHeader(),\n    withCredentials: true\n  });\n};\nexport const insertContents = data => {\n  return axios.post(ADMIN_CONTENT_INSERT_URL, data, {\n    headers: getCsrfHeader(),\n    withCredentials: true\n  });\n};\nexport const uploadImage = blob => {\n  let formData = new FormData();\n  formData.append(\"imageFile\", blob);\n  return axios.post(ADMIN_IMAGE_UPLOAD_URL, formData, {\n    headers: getCsrfHeader(),\n    withCredentials: true\n  });\n};\nexport const insertNotice = notice => {\n  return axios.post(ADMIN_NOTICE_INSERT_URL, notice, {\n    headers: getCsrfHeader(),\n    withCredentials: true\n  });\n};\nexport const updateNotice = notice => {\n  return axios.put(ADMIN_NOTICE_INSERT_URL, notice, {\n    headers: getCsrfHeader(),\n    withCredentials: true\n  });\n};\nexport const getNotices = () => {\n  return axios.get(NOTICE_LIST_URL);\n};\nexport const getNotice = id => {\n  return axios.get(expandUrl(NOTICE_URL, {\n    id\n  }));\n};\nexport const getTodayNotices = () => {\n  return axios.get(NOTICE_TODAY_URL);\n};","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/api.js"],"names":["axios","buildQuery","buildUrl","expandUrl","unpackMoobeMapBounds","updateObject","isNil","_isNil","SEARCH_TYPE_STORE","SEARCH_TYPE_TAG","SEARCH_TYPE_TITLE","SEARCH_TYPE_ADDRESS","LOGIN_REDIRECT_URL","LOGOUT_REDIRECT_URL","ADMIN_URL","ADMIN_CHANNEL_INSERT_URL","ADMIN_CONTENT_INSERT_URL","ADMIN_IMAGE_UPLOAD_URL","ADMIN_NOTICE_INSERT_URL","USER_URL","CHANNELS_URL","CONTENTS_URL","CONTENTS_RANGE_URL","CONTENT_URL","CONTENT_LIKE_URL","CONTENT_UNLIKE_URL","FAVORITE_CHANNELS_URL","FAVORITE_CONTENTS_URL","FAVORITE_CONTENTS_CHANNEL_URL","CONTENT_SEARCH_URL","CONTENT_SEARCH_CONTENT_TITLE_URL","CONTENT_SEARCH_STORE_TITLE_URL","CONTENT_SEARCH_TAG_URL","CONTENT_SEARCH_ADDRESS_URL","COMMENT_MOOBE_URL","COMMENT_YOUTUBE_URL","COMMENT_LIKE_URL","COMMENT_UNLIKE_URL","COMMENT_INSERT_URL","COMMENT_UPDATE_URL","COMMENT_DELETE_URL","LOCATIONS_URL","LOCATIONS_RANGE_URL","CLUSTER_LOCATIONS_URL","NOTICE_URL","NOTICE_LIST_URL","NOTICE_TODAY_URL","getChannels","get","getFavoriteChannels","withCredentials","getContents","channel","mapBounds","page","query","Object","assign","body","channelId","pageNum","post","searchContents","searchType","searchQuery","url","getSearchUrl","getContent","contentId","getContentLocations","searchContentLocations","searchTypeFlag","getLocationSearchType","queryDict","flag","getClusterLocations","mapLevel","level","getFavoriteContents","getMoobeComment","getYoutubeComment","getUser","checkAdmin","getCsrfHeader","token","document","getElementById","getAttribute","headerName","updateContentLike","email","like","id","updateCommentLike","commentId","contentsId","insertComment","value","comment","likeCount","updateComment","deleteComment","insertChannels","data","headers","insertContents","uploadImage","blob","formData","FormData","append","insertNotice","notice","updateNotice","put","getNotices","getNotice","getTodayNotices"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {buildQuery, buildUrl, expandUrl, unpackMoobeMapBounds, updateObject} from \"data/util\";\nimport {isNil as _isNil} from 'lodash';\nimport {SEARCH_TYPE_STORE, SEARCH_TYPE_TAG, SEARCH_TYPE_TITLE, SEARCH_TYPE_ADDRESS} from \"data/redux/action/content\";\n\nexport const LOGIN_REDIRECT_URL = buildUrl(\"/login\");\nexport const LOGOUT_REDIRECT_URL = buildUrl(\"/logout\");\n\nconst ADMIN_URL = buildUrl(\"/admin/authorize\");\nconst ADMIN_CHANNEL_INSERT_URL = buildUrl(\"/admin/regist/channel\");\nconst ADMIN_CONTENT_INSERT_URL = buildUrl(\"/admin/contentsForm\");\nconst ADMIN_IMAGE_UPLOAD_URL = buildUrl(\"/admin/image/upload\");\nconst ADMIN_NOTICE_INSERT_URL = buildUrl(\"/admin/notice\");\n\nconst USER_URL = buildUrl(\"/api/session\");\nconst CHANNELS_URL = buildUrl(\"/api/channels\");\nconst CONTENTS_URL = buildUrl(\"/api/contents\");\nconst CONTENTS_RANGE_URL = buildUrl(\"/api/contents/range\");\nconst CONTENT_URL = buildUrl(\"/api/contents/{{contentId}}\");\nconst CONTENT_LIKE_URL = buildUrl(\"/api/contents/like\");\nconst CONTENT_UNLIKE_URL = buildUrl(\"/api/contents/like/cancel\");\n\nconst FAVORITE_CHANNELS_URL = buildUrl(\"/api/favorites/channels\");\nconst FAVORITE_CONTENTS_URL = buildUrl(\"/api/favorites/contents\");\nconst FAVORITE_CONTENTS_CHANNEL_URL = buildUrl(\"/api/favorites/channels/{{channelId}}/contents\");\nconst CONTENT_SEARCH_URL = buildUrl(\"/api/search\");\nconst CONTENT_SEARCH_CONTENT_TITLE_URL = buildUrl(\"/api/search/contents/title\");\nconst CONTENT_SEARCH_STORE_TITLE_URL = buildUrl(\"/api/search/store/title\");\nconst CONTENT_SEARCH_TAG_URL = buildUrl(\"/api/search/tag\");\nconst CONTENT_SEARCH_ADDRESS_URL = buildUrl(\"/api/search/address\");\n\nconst COMMENT_MOOBE_URL = buildUrl(\"/api/{{contentId}}/comments/moobe\");\nconst COMMENT_YOUTUBE_URL = buildUrl(\"/api/{{contentId}}/comments/youtube\");\nconst COMMENT_LIKE_URL = buildUrl(\"/api/comment/like\");\nconst COMMENT_UNLIKE_URL = buildUrl(\"/api/comment/like/cancel\");\n\nconst COMMENT_INSERT_URL = buildUrl(\"/api/comment/insert\");\nconst COMMENT_UPDATE_URL = buildUrl(\"/api/comment/modify\");\nconst COMMENT_DELETE_URL = buildUrl(\"/api/comment/delete\");\n\nconst LOCATIONS_URL = buildUrl(\"/api/contents/locations\");\nconst LOCATIONS_RANGE_URL = buildUrl(\"/api/contents/range/locations\");\n\nconst CLUSTER_LOCATIONS_URL = buildUrl(\"/api/cluster\");\n\n\nconst NOTICE_URL = buildUrl(\"/api/notices/{{id}}\");\nconst NOTICE_LIST_URL = buildUrl(\"/api/notices\");\nconst NOTICE_TODAY_URL = buildUrl(\"/api/notices/today\");\n\n//api\nexport const getChannels = () => {\n    return axios.get(CHANNELS_URL);\n}\n\nexport const getFavoriteChannels = () => {\n    return axios.get(FAVORITE_CHANNELS_URL, {withCredentials: true});\n}\n\nexport const getContents = (channel=null, mapBounds=null, page=null) => {\n    if (_isNil(mapBounds)) {\n        let query = buildQuery(Object.assign({channel, page}));\n        return axios.get(expandUrl(CONTENTS_URL, {}, query), {withCredentials: true});\n    } else {\n        let body = Object.assign(_isNil(channel) ? {} : {channelId: channel}, {pageNum: page}, unpackMoobeMapBounds(mapBounds));\n        return axios.post(CONTENTS_RANGE_URL, body, {withCredentials: true});\n    }\n};\n\nexport const searchContents = (query, searchType, channel=null, mapBounds=null, page=null) => {\n    let searchQuery = buildQuery({query})\n    let url = getSearchUrl(searchType)\n    let body = Object.assign(_isNil(channel) ? {} : {channelId: channel}, {pageNum: page}, unpackMoobeMapBounds(mapBounds));\n    return axios.post(expandUrl(url, {}, searchQuery), body, {withCredentials: true});\n};\n\nconst getSearchUrl = (searchType) => {\n    switch(searchType) {\n        case SEARCH_TYPE_TITLE: return CONTENT_SEARCH_CONTENT_TITLE_URL;\n        case SEARCH_TYPE_STORE: return CONTENT_SEARCH_STORE_TITLE_URL;\n        case SEARCH_TYPE_TAG: return CONTENT_SEARCH_TAG_URL;\n        case SEARCH_TYPE_ADDRESS: return CONTENT_SEARCH_ADDRESS_URL;\n        default : return CONTENT_SEARCH_URL;\n    }\n}\n\nexport const getContent = (contentId, channel=null) => {\n    let query = buildQuery({channel});\n    return axios.get(expandUrl(CONTENT_URL, {contentId}, query), {withCredentials: true});\n};\n\nexport const getContentLocations = (channel=null, mapBounds=null) => {\n    if (_isNil(mapBounds)) {\n        let query = buildQuery({channel});\n        return axios.get(expandUrl(LOCATIONS_URL, {}, query));\n    } else {\n        let body = Object.assign(_isNil(channel) ? {} : {channelId: channel}, unpackMoobeMapBounds(mapBounds));\n        return axios.post(LOCATIONS_RANGE_URL, body);\n    }\n};\n\nexport const searchContentLocations = (query, searchType, channel=null, mapBounds=null) => {\n    let searchTypeFlag = getLocationSearchType(searchType)\n    let queryDict = Object.assign({query}, {flag: searchTypeFlag})\n    if (_isNil(mapBounds)) {\n        let query = buildQuery(Object.assign({channel}, queryDict))\n        return axios.get(expandUrl(LOCATIONS_URL, {}, query))\n    } else {\n        let query = buildQuery(queryDict)\n        let body = Object.assign(_isNil(channel) ? {} : {channelId: channel}, unpackMoobeMapBounds(mapBounds));\n        return axios.post(expandUrl(LOCATIONS_RANGE_URL, {}, query), body, {withCredentials: true});\n    }\n};\n\nexport const getClusterLocations = (channel = null, mapLevel= null, mapBounds=null) => {\n    let query;\n    if (!_isNil(mapBounds)) {\n        query = buildQuery(Object.assign({channel, level: mapLevel}, unpackMoobeMapBounds(mapBounds)));\n    } else {\n        query = buildQuery({channel, level: mapLevel});\n    }\n    return axios.get(expandUrl(CLUSTER_LOCATIONS_URL, {}, query));\n}\n\nconst getLocationSearchType = (searchType) => {\n    switch(searchType) {\n        case SEARCH_TYPE_ADDRESS: return 5;\n        case SEARCH_TYPE_TAG: return 4;\n        case SEARCH_TYPE_TITLE: return 3;\n        case SEARCH_TYPE_STORE: return 2;\n        default : return 1;\n    }\n}\n\nexport const getFavoriteContents = (channel=null) => {\n    if (_isNil(channel)) {\n        return axios.get(FAVORITE_CONTENTS_URL, {withCredentials: true});\n    } else {\n        return axios.get(expandUrl(FAVORITE_CONTENTS_CHANNEL_URL, {channelId: channel}), {withCredentials: true});\n    }\n}\n\nexport const getMoobeComment = (contentId, page) => {\n    let query = buildQuery({page});\n    return axios.get(expandUrl(COMMENT_MOOBE_URL, {contentId}, query),{withCredentials: true});\n};\n\nexport const getYoutubeComment = (contentId, page) => {\n    let query = buildQuery({page});\n    return axios.get(expandUrl(COMMENT_YOUTUBE_URL, {contentId}, query), {withCredentials: true});\n};\n\nexport const getUser = () => axios.get(USER_URL,{withCredentials: true});\nexport const checkAdmin = () => axios.get(ADMIN_URL, {withCredentials: true});\n\nconst getCsrfHeader = () => {\n    let token = document.getElementById(\"_csrf\").getAttribute(\"content\")\n    let headerName = document.getElementById(\"_csrf_header\").getAttribute(\"content\")\n    return {[headerName] : token}\n}\nexport const updateContentLike = (email, contentId, like) => {\n    let body = {\n        id: contentId,\n        email: email\n    };\n    if (like) {\n        return axios.post(CONTENT_LIKE_URL, body, {withCredentials: true});\n    } else {\n        return axios.post(CONTENT_UNLIKE_URL, body, {withCredentials: true});\n    }\n};\n\nexport const updateCommentLike = (email, commentId, contentsId, like) => {\n    let body = {\n        id: commentId,\n        email: email,\n        contentsId: contentsId\n    };\n    if (like) {\n        return axios.post(COMMENT_LIKE_URL, body, {withCredentials: true});\n    } else {\n        return axios.post(COMMENT_UNLIKE_URL, body, {withCredentials: true});\n    }\n};\n\nexport const insertComment = (email, contentId, value) => {\n    let body = {\n        email: email,\n        contentsId: contentId,\n        comment: value,\n        likeCount: 0\n    }\n    return axios.post(COMMENT_INSERT_URL, body, {withCredentials: true});\n\n}\n\nexport const updateComment = (email, commentId, value) => {\n    let body = {\n        id: commentId,\n        email: email,\n        comment: value,\n    }\n    return axios.post(COMMENT_UPDATE_URL, body, {withCredentials: true});\n}\n\nexport const deleteComment = (email, commentId) => {\n    let body = {\n        id: commentId,\n        email: email\n    }\n    return axios.post(COMMENT_DELETE_URL, body, {withCredentials: true});\n}\n\nexport const insertChannels = (data) => {\n    return axios.post(ADMIN_CHANNEL_INSERT_URL, data, {headers: getCsrfHeader(), withCredentials: true})\n}\nexport const insertContents = (data) => {\n    return axios.post(ADMIN_CONTENT_INSERT_URL, data, {headers: getCsrfHeader(), withCredentials: true})\n}\n\nexport const uploadImage = (blob) => {\n    let formData = new FormData();\n    formData.append(\"imageFile\", blob);\n    return axios.post(ADMIN_IMAGE_UPLOAD_URL, formData, {headers: getCsrfHeader(), withCredentials: true});\n}\n\nexport const insertNotice = (notice) => {\n    return axios.post(ADMIN_NOTICE_INSERT_URL, notice, {headers: getCsrfHeader(), withCredentials: true});\n}\n\nexport const updateNotice = (notice) => {\n    return axios.put(ADMIN_NOTICE_INSERT_URL, notice, {headers: getCsrfHeader(), withCredentials: true});\n}\n\nexport const getNotices = () => {\n    return axios.get(NOTICE_LIST_URL);\n}\n\nexport const getNotice = (id) => {\n    return axios.get(expandUrl(NOTICE_URL, {id}));\n}\n\nexport const getTodayNotices = () => {\n    return axios.get(NOTICE_TODAY_URL);\n}\n"]},"metadata":{},"sourceType":"module"}