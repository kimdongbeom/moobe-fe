{"ast":null,"code":"import { COMMENT_ADD_MOOBE_COMMENT_FIRST, COMMENT_DELETE_MOOBE_COMMENT_DELETED, COMMENT_FETCH_MOOBE_FINISHED, COMMENT_FETCH_MOOBE_STARTED, COMMENT_FETCH_MOOBE_SUCCESS, COMMENT_FETCH_YOUTUBE_FINISHED, COMMENT_FETCH_YOUTUBE_STARTED, COMMENT_FETCH_YOUTUBE_SUCCESS, COMMENT_RESET_COMMENT, COMMENT_UPDATE_MOOBE_COMMENT_UPDATED } from \"data/redux/action/comment\";\nimport { concat as _concat, filter as _filter, map as _map } from \"lodash\";\nimport { updateObject } from \"data/util\";\nimport Comment from \"data/redux/model/Comment\";\nconst initialStateComment = {\n  videoId: null,\n  moobeCommentList: [],\n  moobeCommentPageNum: 0,\n  moobeCommentMaxPage: 0,\n  moobeCommentTotalCount: 0,\n  moobeCommentLoading: false,\n  youtubeCommentList: [],\n  youtubeCommentPageNum: 0,\n  youtubeCommentMaxPage: 0,\n  youtubeCommentTotalCount: 0,\n  youtubeCommentLoading: false\n};\n\nconst fetchSuccessYoutubeComment = (commentState, response) => {\n  const apiResponse = response.apiResponse,\n        page = response.page;\n  let commentList = apiResponse.renderContents(Comment);\n  return updateObject(commentState, {\n    youtubeCommentLoading: false,\n    youtubeCommentList: commentState.youtubeCommentList.concat(commentList),\n    youtubeCommentPageNum: page,\n    youtubeCommentMaxPage: apiResponse.maxPage,\n    youtubeCommentTotalCount: apiResponse.totalCount\n  });\n};\n\nconst fetchSuccessMoobeComment = (commentState, response) => {\n  const apiResponse = response.apiResponse,\n        page = response.page;\n  let commentList = apiResponse.renderContents(Comment);\n  return updateObject(commentState, {\n    moobeCommentLoading: false,\n    moobeCommentList: commentState.moobeCommentList.concat(commentList),\n    moobeCommentPageNum: page,\n    moobeCommentMaxPage: apiResponse.maxPage,\n    moobeCommentTotalCount: apiResponse.totalCount\n  });\n};\n\nconst updateMoobeComment = (commentState, data) => {\n  const id = data.id,\n        updatedValue = data.updatedValue;\n\n  let updateCommentList = _map(commentState.moobeCommentList, comment => {\n    if (comment.id === id) {\n      return new Comment(updateObject(comment, updatedValue));\n    } else {\n      return comment;\n    }\n  });\n\n  return updateObject(commentState, {\n    moobeCommentList: updateCommentList\n  });\n};\n\nexport default function (commentState = initialStateComment, action) {\n  switch (action.type) {\n    case COMMENT_RESET_COMMENT:\n      return updateObject(commentState, initialStateComment);\n\n    case COMMENT_ADD_MOOBE_COMMENT_FIRST:\n      return updateObject(commentState, {\n        moobeCommentList: _concat([action.data], commentState.moobeCommentList),\n        moobeCommentTotalCount: commentState.moobeCommentTotalCount + 1\n      });\n\n    case COMMENT_UPDATE_MOOBE_COMMENT_UPDATED:\n      return updateMoobeComment(commentState, action.data);\n\n    case COMMENT_DELETE_MOOBE_COMMENT_DELETED:\n      return updateObject(commentState, {\n        moobeCommentList: _filter(commentState.moobeCommentList, comment => comment.id !== action.data.id),\n        moobeCommentTotalCount: commentState.moobeCommentTotalCount - 1\n      });\n\n    case COMMENT_FETCH_YOUTUBE_STARTED:\n      return updateObject(commentState, {\n        youtubeCommentLoading: true\n      });\n\n    case COMMENT_FETCH_YOUTUBE_SUCCESS:\n      return fetchSuccessYoutubeComment(commentState, action.data);\n\n    case COMMENT_FETCH_YOUTUBE_FINISHED:\n      return updateObject(commentState, {\n        youtubeCommentLoading: false\n      });\n\n    case COMMENT_FETCH_MOOBE_STARTED:\n      return updateObject(commentState, {\n        moobeCommentLoading: true\n      });\n\n    case COMMENT_FETCH_MOOBE_SUCCESS:\n      return fetchSuccessMoobeComment(commentState, action.data);\n\n    case COMMENT_FETCH_MOOBE_FINISHED:\n      return updateObject(commentState, {\n        moobeCommentLoading: false\n      });\n\n    default:\n      return commentState;\n  }\n}","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/redux/reducers/commentReducer.js"],"names":["COMMENT_ADD_MOOBE_COMMENT_FIRST","COMMENT_DELETE_MOOBE_COMMENT_DELETED","COMMENT_FETCH_MOOBE_FINISHED","COMMENT_FETCH_MOOBE_STARTED","COMMENT_FETCH_MOOBE_SUCCESS","COMMENT_FETCH_YOUTUBE_FINISHED","COMMENT_FETCH_YOUTUBE_STARTED","COMMENT_FETCH_YOUTUBE_SUCCESS","COMMENT_RESET_COMMENT","COMMENT_UPDATE_MOOBE_COMMENT_UPDATED","concat","_concat","filter","_filter","map","_map","updateObject","Comment","initialStateComment","videoId","moobeCommentList","moobeCommentPageNum","moobeCommentMaxPage","moobeCommentTotalCount","moobeCommentLoading","youtubeCommentList","youtubeCommentPageNum","youtubeCommentMaxPage","youtubeCommentTotalCount","youtubeCommentLoading","fetchSuccessYoutubeComment","commentState","response","apiResponse","page","commentList","renderContents","maxPage","totalCount","fetchSuccessMoobeComment","updateMoobeComment","data","id","updatedValue","updateCommentList","comment","action","type"],"mappings":"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","sourcesContent":["import {\n    COMMENT_ADD_MOOBE_COMMENT_FIRST, COMMENT_DELETE_MOOBE_COMMENT_DELETED,\n    COMMENT_FETCH_MOOBE_FINISHED,\n    COMMENT_FETCH_MOOBE_STARTED,\n    COMMENT_FETCH_MOOBE_SUCCESS,\n    COMMENT_FETCH_YOUTUBE_FINISHED,\n    COMMENT_FETCH_YOUTUBE_STARTED,\n    COMMENT_FETCH_YOUTUBE_SUCCESS,\n    COMMENT_RESET_COMMENT, COMMENT_UPDATE_MOOBE_COMMENT_UPDATED\n} from \"data/redux/action/comment\";\nimport {\n    concat as _concat,\n    filter as _filter,\n    map as _map\n} from \"lodash\";\nimport {updateObject} from \"data/util\";\nimport Comment from \"data/redux/model/Comment\";\n\nconst initialStateComment = {\n    videoId: null,\n    moobeCommentList: [],\n    moobeCommentPageNum: 0,\n    moobeCommentMaxPage: 0,\n    moobeCommentTotalCount: 0,\n    moobeCommentLoading: false,\n    youtubeCommentList: [],\n    youtubeCommentPageNum: 0,\n    youtubeCommentMaxPage: 0,\n    youtubeCommentTotalCount: 0,\n    youtubeCommentLoading: false\n};\n\nconst fetchSuccessYoutubeComment = (commentState, response) => {\n    const {apiResponse, page} = response;\n    let commentList = apiResponse.renderContents(Comment);\n    return updateObject(commentState, {\n        youtubeCommentLoading: false,\n        youtubeCommentList: commentState.youtubeCommentList.concat(commentList),\n        youtubeCommentPageNum: page,\n        youtubeCommentMaxPage: apiResponse.maxPage,\n        youtubeCommentTotalCount: apiResponse.totalCount,\n    })\n};\n\nconst fetchSuccessMoobeComment = (commentState, response) => {\n    const {apiResponse, page} = response;\n    let commentList = apiResponse.renderContents(Comment);\n    return updateObject(commentState, {\n        moobeCommentLoading: false,\n        moobeCommentList: commentState.moobeCommentList.concat(commentList),\n        moobeCommentPageNum: page,\n        moobeCommentMaxPage: apiResponse.maxPage,\n        moobeCommentTotalCount: apiResponse.totalCount,\n    })\n};\n\nconst updateMoobeComment = (commentState, data) => {\n    const {id, updatedValue} = data\n    let updateCommentList = _map(commentState.moobeCommentList, (comment) => {\n        if (comment.id === id) {\n            return new Comment(updateObject(comment, updatedValue));\n        } else {\n            return comment;\n        }\n    });\n    return updateObject(commentState, {moobeCommentList: updateCommentList});\n}\n\nexport default function(commentState = initialStateComment, action) {\n    switch (action.type) {\n        case COMMENT_RESET_COMMENT: return updateObject(commentState, initialStateComment);\n        case COMMENT_ADD_MOOBE_COMMENT_FIRST: return updateObject(commentState, {moobeCommentList: _concat([action.data], commentState.moobeCommentList), moobeCommentTotalCount: commentState.moobeCommentTotalCount + 1});\n        case COMMENT_UPDATE_MOOBE_COMMENT_UPDATED: return updateMoobeComment(commentState, action.data);\n        case COMMENT_DELETE_MOOBE_COMMENT_DELETED: return updateObject(commentState, {moobeCommentList: _filter(commentState.moobeCommentList, (comment) => comment.id !== action.data.id), moobeCommentTotalCount: commentState.moobeCommentTotalCount - 1});\n        case COMMENT_FETCH_YOUTUBE_STARTED: return updateObject(commentState, {youtubeCommentLoading: true});\n        case COMMENT_FETCH_YOUTUBE_SUCCESS: return fetchSuccessYoutubeComment(commentState, action.data);\n        case COMMENT_FETCH_YOUTUBE_FINISHED: return updateObject(commentState, {youtubeCommentLoading: false});\n        case COMMENT_FETCH_MOOBE_STARTED: return updateObject(commentState, {moobeCommentLoading: true});\n        case COMMENT_FETCH_MOOBE_SUCCESS: return fetchSuccessMoobeComment(commentState, action.data);\n        case COMMENT_FETCH_MOOBE_FINISHED: return updateObject(commentState, {moobeCommentLoading: false});\n        default : return commentState;\n    }\n}"]},"metadata":{},"sourceType":"module"}