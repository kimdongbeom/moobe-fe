{"ast":null,"code":"var _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/SearchCurrentButton.jsx\";\nimport React, { useEffect } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearchLocation } from \"@fortawesome/free-solid-svg-icons\";\nimport { buildContentPath, buildQuery, getSearchQueryParams, getSearchQueryText, isSimilarLocation, parsePath, updateObject } from \"data/util\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { isEmpty as _isEmpty } from \"lodash\";\nimport queryString from \"query-string\";\nimport { setSearchOnBoundChange } from \"data/redux/action/map\";\nimport { setFocusedLocation } from \"data/redux/action/location\";\nimport { uuid } from \"bulma-extensions/bulma-carousel/src/js/utils\";\n\nconst SearchCurrentButton = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const _useSelector = useSelector(state => state.channel),\n        activeChannel = _useSelector.activeChannel;\n\n  const _useSelector2 = useSelector(state => state.content),\n        contentList = _useSelector2.contentList,\n        contentLoading = _useSelector2.contentLoading;\n\n  const _useSelector3 = useSelector(state => state.map),\n        centerChanged = _useSelector3.centerChanged,\n        mapBounds = _useSelector3.mapBounds,\n        searchOnBoundChange = _useSelector3.searchOnBoundChange,\n        changedCenterLat = _useSelector3.changedCenterLat,\n        changedCenterLng = _useSelector3.changedCenterLng;\n\n  const location = useLocation();\n\n  const _queryString$parse = queryString.parse(location.search),\n        query = _queryString$parse.query,\n        searchType = _queryString$parse.searchType;\n\n  const search = e => {\n    if (e) e.target.blur();\n    dispatch(setFocusedLocation(null));\n\n    const _parsePath = parsePath(location.pathname),\n          channels = _parsePath.channels,\n          contents = _parsePath.contents; //fail over if active channel not set.\n\n\n    let queryParams = updateObject(getSearchQueryParams(query, searchType), {\n      page: 1,\n      swLat: mapBounds.sw.lat,\n      swLng: mapBounds.sw.lng,\n      neLat: mapBounds.ne.lat,\n      neLng: mapBounds.ne.lng,\n      k: uuid().substring(0, 5)\n    });\n    history.push({\n      pathname: buildContentPath(activeChannel ? activeChannel : channels ? {\n        id: channels\n      } : null, null),\n      search: buildQuery(queryParams)\n    });\n  };\n\n  const searchCurrentLocationText = () => {\n    if (!_isEmpty(query)) {\n      return \"현재 지도에서 [\" + getSearchQueryText(query, searchType) + \"] 다시 찾기\";\n    }\n\n    return \"현재 지도에서 찾기\";\n  };\n\n  const isVisible = () => {\n    if (centerChanged) {\n      if (contentLoading) {\n        return true;\n      }\n\n      if (contentList.length == 0) {\n        return false;\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    if (searchOnBoundChange && mapBounds) {\n      search();\n      dispatch(setSearchOnBoundChange(false));\n    }\n  }, [mapBounds]);\n  return React.createElement(\"button\", {\n    className: \"location-search-button button has-text-weight-semibold\" + (contentLoading ? \" is-loading\" : \"\") + (isVisible() ? \"\" : \" is-hidden\"),\n    onClick: search,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faSearchLocation,\n    size: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, searchCurrentLocationText()));\n};\n\nexport default SearchCurrentButton;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/SearchCurrentButton.jsx"],"names":["React","useEffect","FontAwesomeIcon","faSearchLocation","buildContentPath","buildQuery","getSearchQueryParams","getSearchQueryText","isSimilarLocation","parsePath","updateObject","useHistory","useLocation","useDispatch","useSelector","isEmpty","_isEmpty","queryString","setSearchOnBoundChange","setFocusedLocation","uuid","SearchCurrentButton","dispatch","history","state","channel","activeChannel","content","contentList","contentLoading","map","centerChanged","mapBounds","searchOnBoundChange","changedCenterLat","changedCenterLng","location","parse","search","query","searchType","e","target","blur","pathname","channels","contents","queryParams","page","swLat","sw","lat","swLng","lng","neLat","ne","neLng","k","substring","push","id","searchCurrentLocationText","isVisible","length"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSearchLocation} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n    buildContentPath,\n    buildQuery,\n    getSearchQueryParams,\n    getSearchQueryText,\n    isSimilarLocation, parsePath,\n    updateObject\n} from \"data/util\";\nimport {useHistory, useLocation} from \"react-router\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {isEmpty as _isEmpty} from \"lodash\";\nimport queryString from \"query-string\";\nimport {setSearchOnBoundChange} from \"data/redux/action/map\";\nimport {setFocusedLocation} from \"data/redux/action/location\";\nimport {uuid} from \"bulma-extensions/bulma-carousel/src/js/utils\";\n\nconst SearchCurrentButton = () => {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const {activeChannel} = useSelector(state => state.channel);\n    const {contentList, contentLoading} = useSelector(state => state.content);\n    const {centerChanged, mapBounds, searchOnBoundChange, changedCenterLat, changedCenterLng} = useSelector(state => state.map);\n    const location = useLocation();\n    const {query, searchType} = queryString.parse(location.search);\n\n    const search = (e) => {\n        if (e) e.target.blur();\n        dispatch(setFocusedLocation(null))\n        const {channels, contents} = parsePath(location.pathname) //fail over if active channel not set.\n        let queryParams = updateObject(getSearchQueryParams(query, searchType)\n            ,{page: 1, swLat: mapBounds.sw.lat, swLng: mapBounds.sw.lng, neLat: mapBounds.ne.lat, neLng: mapBounds.ne.lng, k: uuid().substring(0, 5)});\n        history.push({\n            pathname: buildContentPath(activeChannel ? activeChannel : channels ? {id: channels} : null, null),\n            search: buildQuery(queryParams)\n        });\n    };\n\n    const searchCurrentLocationText = () => {\n        if (!_isEmpty(query)) {\n            return \"현재 지도에서 [\" + getSearchQueryText(query, searchType) + \"] 다시 찾기\";\n        }\n        return \"현재 지도에서 찾기\"\n    }\n\n    const isVisible = () => {\n        if (centerChanged) {\n            if (contentLoading) {\n                return true\n            }\n            if (contentList.length == 0) {\n                return false\n            }\n            return true\n        } else {\n            return false\n        }\n    }\n\n    useEffect(() => {\n        if (searchOnBoundChange && mapBounds) {\n            search();\n            dispatch(setSearchOnBoundChange(false))\n        }\n    }, [mapBounds])\n\n\n    return (\n        <button className={\"location-search-button button has-text-weight-semibold\" + (contentLoading? \" is-loading\" : \"\") + (isVisible() ? \"\" : \" is-hidden\")} onClick={search}>\n            <span className=\"icon\">\n                <FontAwesomeIcon icon={faSearchLocation} size={\"sm\"} />\n            </span>\n            <span>{searchCurrentLocationText()}</span>\n        </button>\n    )\n};\n\nexport default SearchCurrentButton;"]},"metadata":{},"sourceType":"module"}