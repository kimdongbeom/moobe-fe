{"ast":null,"code":"var _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/SearchWideLocationButton.jsx\";\nimport React, { useEffect } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearchLocation } from \"@fortawesome/free-solid-svg-icons\";\nimport { buildContentPath, buildQuery, getSearchQueryParams, getSearchQueryText, isSimilarLocation, updateObject } from \"data/util\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { isEmpty as _isEmpty } from \"lodash\";\nimport queryString from \"query-string\";\nimport { setSearchOnBoundChange } from \"data/redux/action/map\";\nimport { setFocusedLocation } from \"data/redux/action/location\";\n\nconst SearchWideLocationButton = () => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(state => state.content),\n        contentList = _useSelector.contentList,\n        contentLoading = _useSelector.contentLoading;\n\n  const _useSelector2 = useSelector(state => state.map),\n        map = _useSelector2.map;\n\n  const _queryString$parse = queryString.parse(useLocation().search),\n        query = _queryString$parse.query,\n        searchType = _queryString$parse.searchType;\n\n  const search = () => {\n    dispatch(setFocusedLocation(null));\n    dispatch(setSearchOnBoundChange(true));\n    map.setLevel(map.getLevel() + 1, {\n      animate: {\n        duration: 200\n      }\n    });\n  };\n\n  const searchWideLocationText = () => {\n    if (!_isEmpty(query)) {\n      return \"더 넓은 범위에서 [\" + getSearchQueryText(query, searchType) + \"] 다시 찾기\";\n    }\n\n    return \"더 넓은 범위에서 찾기\";\n  };\n\n  const isVisible = !contentLoading && contentList.length == 0;\n  return React.createElement(\"button\", {\n    className: \"location-search-button button is-link \" + (isVisible ? \"\" : \"is-hidden\"),\n    onClick: search,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faSearchLocation,\n    size: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, searchWideLocationText()));\n};\n\nexport default SearchWideLocationButton;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/SearchWideLocationButton.jsx"],"names":["React","useEffect","FontAwesomeIcon","faSearchLocation","buildContentPath","buildQuery","getSearchQueryParams","getSearchQueryText","isSimilarLocation","updateObject","useHistory","useLocation","useDispatch","useSelector","isEmpty","_isEmpty","queryString","setSearchOnBoundChange","setFocusedLocation","SearchWideLocationButton","dispatch","state","content","contentList","contentLoading","map","parse","search","query","searchType","setLevel","getLevel","animate","duration","searchWideLocationText","isVisible","length"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAAQC,gBAAR,QAA+B,mCAA/B;AACA,SACIC,gBADJ,EAEIC,UAFJ,EAGIC,oBAHJ,EAIIC,kBAJJ,EAKIC,iBALJ,EAMIC,YANJ,QAOO,WAPP;AAQA,SAAQC,UAAR,EAAoBC,WAApB,QAAsC,cAAtC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,OAAO,IAAIC,QAAnB,QAAkC,QAAlC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAAQC,sBAAR,QAAqC,uBAArC;AACA,SAAQC,kBAAR,QAAiC,4BAAjC;;AAEA,MAAMC,wBAAwB,GAAG,MAAM;AAEnC,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;;AAFmC,uBAGGC,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,OAAhB,CAHd;AAAA,QAG5BC,WAH4B,gBAG5BA,WAH4B;AAAA,QAGfC,cAHe,gBAGfA,cAHe;;AAAA,wBAIrBX,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACI,GAAhB,CAJU;AAAA,QAI5BA,GAJ4B,iBAI5BA,GAJ4B;;AAAA,6BAKPT,WAAW,CAACU,KAAZ,CAAkBf,WAAW,GAAGgB,MAAhC,CALO;AAAA,QAK5BC,KAL4B,sBAK5BA,KAL4B;AAAA,QAKrBC,UALqB,sBAKrBA,UALqB;;AAOnC,QAAMF,MAAM,GAAG,MAAM;AACjBP,IAAAA,QAAQ,CAACF,kBAAkB,CAAC,IAAD,CAAnB,CAAR;AACAE,IAAAA,QAAQ,CAACH,sBAAsB,CAAC,IAAD,CAAvB,CAAR;AACAQ,IAAAA,GAAG,CAACK,QAAJ,CAAaL,GAAG,CAACM,QAAJ,KAAiB,CAA9B,EAAiC;AAC7BC,MAAAA,OAAO,EAAE;AACLC,QAAAA,QAAQ,EAAE;AADL;AADoB,KAAjC;AAKH,GARD;;AAUA,QAAMC,sBAAsB,GAAG,MAAM;AACjC,QAAI,CAACnB,QAAQ,CAACa,KAAD,CAAb,EAAsB;AAClB,aAAO,gBAAgBrB,kBAAkB,CAACqB,KAAD,EAAQC,UAAR,CAAlC,GAAwD,SAA/D;AACH;;AACD,WAAO,cAAP;AACH,GALD;;AAMA,QAAMM,SAAS,GAAG,CAACX,cAAD,IAAmBD,WAAW,CAACa,MAAZ,IAAsB,CAA3D;AAEA,SACI;AAAQ,IAAA,SAAS,EAAE,4CAA4CD,SAAS,GAAG,EAAH,GAAQ,WAA7D,CAAnB;AAA8F,IAAA,OAAO,EAAER,MAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAExB,gBAAvB;AAAyC,IAAA,IAAI,EAAE,IAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO+B,sBAAsB,EAA7B,CAJJ,CADJ;AAQH,CAjCD;;AAmCA,eAAef,wBAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSearchLocation} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n    buildContentPath,\n    buildQuery,\n    getSearchQueryParams,\n    getSearchQueryText,\n    isSimilarLocation,\n    updateObject\n} from \"data/util\";\nimport {useHistory, useLocation} from \"react-router\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {isEmpty as _isEmpty} from \"lodash\";\nimport queryString from \"query-string\";\nimport {setSearchOnBoundChange} from \"data/redux/action/map\";\nimport {setFocusedLocation} from \"data/redux/action/location\";\n\nconst SearchWideLocationButton = () => {\n\n    const dispatch = useDispatch();\n    const {contentList, contentLoading} = useSelector(state => state.content);\n    const {map} = useSelector(state => state.map);\n    const {query, searchType} = queryString.parse(useLocation().search);\n\n    const search = () => {\n        dispatch(setFocusedLocation(null))\n        dispatch(setSearchOnBoundChange(true))\n        map.setLevel(map.getLevel() + 1, {\n            animate: {\n                duration: 200\n            }\n        })\n    };\n\n    const searchWideLocationText = () => {\n        if (!_isEmpty(query)) {\n            return \"더 넓은 범위에서 [\" + getSearchQueryText(query, searchType) + \"] 다시 찾기\";\n        }\n        return \"더 넓은 범위에서 찾기\"\n    }\n    const isVisible = !contentLoading && contentList.length == 0\n\n    return (\n        <button className={\"location-search-button button is-link \" + (isVisible ? \"\" : \"is-hidden\")} onClick={search}>\n            <span className=\"icon\">\n                <FontAwesomeIcon icon={faSearchLocation} size={\"sm\"} />\n            </span>\n            <span>{searchWideLocationText()}</span>\n        </button>\n    )\n};\n\nexport default SearchWideLocationButton;"]},"metadata":{},"sourceType":"module"}