{"ast":null,"code":"var _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/home/Home.jsx\";\nimport React, { useEffect } from 'react';\nimport { fetchContentList } from \"data/redux/action/content\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DesktopHome from \"components/home/DesktopHome\";\nimport MobileHome from \"components/home/MobileHome\";\nimport queryString from 'query-string';\nimport { useMobile } from \"components/common/layout/WindowDimensions\";\nimport { useLocation, useParams } from \"react-router\";\nimport { fetchChannel } from \"data/redux/action/channel\";\nimport { forceCleanMarkerClusterer, resetMapCenterChange } from \"data/redux/action/map\";\nimport { isNil as _isNil } from 'lodash';\nimport { buildMoobeMapBounds, unpackMoobeMapBounds } from \"data/util\";\nimport { fetchLocation, resetLocationData, resetLocationList } from \"data/redux/action/location\";\nimport { fetchClusterLocation, resetClusterLocationData } from \"data/redux/action/clusterLocation\";\n\nconst MoobeHome = () => {\n  const _useParams = useParams(),\n        channelId = _useParams.channelId,\n        contentId = _useParams.contentId;\n\n  const _useSelector = useSelector(state => state.map),\n        mapLoading = _useSelector.mapLoading,\n        mapBounds = _useSelector.mapBounds,\n        mapLevel = _useSelector.mapLevel;\n\n  const _queryString$parse = queryString.parse(useLocation().search),\n        query = _queryString$parse.query,\n        searchType = _queryString$parse.searchType,\n        page = _queryString$parse.page,\n        swLat = _queryString$parse.swLat,\n        swLng = _queryString$parse.swLng,\n        neLat = _queryString$parse.neLat,\n        neLng = _queryString$parse.neLng,\n        k = _queryString$parse.k; // k for force refresh\n\n\n  const queryMapBounds = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n  const searchMapBounds = unpackMoobeMapBounds(mapBounds) ? mapBounds : unpackMoobeMapBounds(queryMapBounds) ? queryMapBounds : null;\n  const mobile = useMobile();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(resetLocationData());\n    dispatch(fetchChannel(channelId));\n  }, [channelId]);\n  useEffect(() => {\n    if (mapLoading) {\n      return;\n    }\n\n    if (mapLevel < 6 || !_isNil(query)) {\n      dispatch(resetClusterLocationData());\n      dispatch(fetchLocation(channelId, query, searchType, searchMapBounds));\n    } else {\n      dispatch(resetLocationList());\n      dispatch(fetchClusterLocation(channelId, mapLevel, searchMapBounds));\n    }\n\n    return () => {\n      dispatch(forceCleanMarkerClusterer());\n      dispatch(resetLocationList());\n    };\n  }, [channelId, query, searchType, swLat, swLng, neLat, neLng, k]);\n  useEffect(() => {\n    if (mapLoading) {\n      return;\n    }\n\n    dispatch(fetchContentList(channelId, query, searchType, searchMapBounds, page, false, fetchContentCallback));\n  }, [channelId, query, searchType, swLat, swLng, neLat, neLng, page, k]);\n\n  const fetchContentCallback = (channelId, contentId) => {\n    dispatch(resetMapCenterChange());\n  };\n\n  return React.createElement(React.Fragment, null, !mobile ? React.createElement(DesktopHome, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }) : React.createElement(MobileHome, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }));\n};\n\nexport default MoobeHome;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/home/Home.jsx"],"names":["React","useEffect","fetchContentList","useDispatch","useSelector","DesktopHome","MobileHome","queryString","useMobile","useLocation","useParams","fetchChannel","forceCleanMarkerClusterer","resetMapCenterChange","isNil","_isNil","buildMoobeMapBounds","unpackMoobeMapBounds","fetchLocation","resetLocationData","resetLocationList","fetchClusterLocation","resetClusterLocationData","MoobeHome","channelId","contentId","state","map","mapLoading","mapBounds","mapLevel","parse","search","query","searchType","page","swLat","swLng","neLat","neLng","k","queryMapBounds","searchMapBounds","mobile","dispatch","fetchContentCallback"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport {fetchContentList} from \"data/redux/action/content\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport DesktopHome from \"components/home/DesktopHome\";\nimport MobileHome from \"components/home/MobileHome\";\nimport queryString from 'query-string'\nimport {useMobile} from \"components/common/layout/WindowDimensions\";\nimport {useLocation, useParams} from \"react-router\";\nimport {fetchChannel} from \"data/redux/action/channel\";\nimport {forceCleanMarkerClusterer, resetMapCenterChange} from \"data/redux/action/map\";\nimport {isNil as _isNil} from 'lodash';\nimport {buildMoobeMapBounds, unpackMoobeMapBounds} from \"data/util\";\nimport {fetchLocation, resetLocationData, resetLocationList} from \"data/redux/action/location\";\nimport {fetchClusterLocation, resetClusterLocationData} from \"data/redux/action/clusterLocation\";\n\nconst MoobeHome = () => {\n    const {channelId, contentId} = useParams();\n    const {mapLoading, mapBounds, mapLevel} = useSelector(state => state.map)\n    const {query, searchType, page, swLat, swLng, neLat, neLng, k} = queryString.parse(useLocation().search); // k for force refresh\n    const queryMapBounds = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n    const searchMapBounds = unpackMoobeMapBounds(mapBounds)\n        ? mapBounds\n        : unpackMoobeMapBounds(queryMapBounds)\n            ? queryMapBounds : null;\n    const mobile = useMobile();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(resetLocationData());\n        dispatch(fetchChannel(channelId));\n    }, [channelId]);\n\n    useEffect(() => {\n        if (mapLoading) {\n            return ;\n        }\n        if (mapLevel < 6 || !_isNil(query)) {\n            dispatch(resetClusterLocationData());\n            dispatch(fetchLocation(channelId, query, searchType, searchMapBounds));\n        } else {\n            dispatch(resetLocationList());\n            dispatch(fetchClusterLocation(channelId, mapLevel, searchMapBounds))\n        }\n        return () => {\n            dispatch(forceCleanMarkerClusterer());\n            dispatch(resetLocationList());\n        }\n    }, [channelId, query, searchType, swLat, swLng, neLat, neLng, k])\n\n    useEffect(() => {\n        if (mapLoading) {\n            return ;\n        }\n        dispatch(fetchContentList(channelId, query, searchType, searchMapBounds, page, false, fetchContentCallback));\n    }, [channelId, query, searchType, swLat, swLng, neLat, neLng, page, k])\n\n    const fetchContentCallback = (channelId, contentId) => {\n        dispatch(resetMapCenterChange());\n    };\n\n    return (\n        <>\n            {!mobile ? <DesktopHome /> : <MobileHome />}\n        </>\n    )\n};\n\nexport default MoobeHome;"]},"metadata":{},"sourceType":"module"}