{"ast":null,"code":"import _objectSpread from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/CustomOverlay.jsx\";\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { MapContext } from \"./KakaoMap\";\n\nconst CustomOverlay = props => {\n  const _useContext = useContext(MapContext),\n        kakao = _useContext.kakao,\n        map = _useContext.map;\n\n  const _useState = useState({\n    overlay: null,\n    kakao,\n    map\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const overlayRef = useCallback(node => {\n    const _props$options = props.options,\n          lat = _props$options.lat,\n          lng = _props$options.lng,\n          visible = _props$options.visible,\n          clickable = _props$options.clickable,\n          yAnchor = _props$options.yAnchor,\n          xAnchor = _props$options.xAnchor;\n    if (state.overlay !== null) return;\n    if (node == null) return;\n    const overlay = new kakao.maps.CustomOverlay({\n      position: new kakao.maps.LatLng(lat, lng),\n      content: node.firstChild,\n      clickable: clickable ? clickable : true,\n      yAnchor: yAnchor ? yAnchor : 0.5,\n      xAnchor: xAnchor ? xAnchor : 0.5\n    });\n    if (visible) overlay.setMap(map);\n    setState(_objectSpread({}, state, {\n      overlay\n    }));\n    return () => {\n      overlay.setMap(null);\n    };\n  }, []);\n  useEffect(() => {\n    const _props$options2 = props.options,\n          lat = _props$options2.lat,\n          lng = _props$options2.lng,\n          visible = _props$options2.visible,\n          clickable = _props$options2.clickable;\n    const overlay = state.overlay;\n    if (overlay === null) return;\n    overlay.setPosition(new kakao.maps.LatLng(lat, lng));\n\n    if (visible) {\n      overlay.setMap(map);\n    }\n\n    return () => {\n      overlay.setMap(null);\n    };\n  }, [props.options]);\n  return React.createElement(\"div\", {\n    ref: overlayRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default CustomOverlay;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/CustomOverlay.jsx"],"names":["React","useCallback","useContext","useEffect","useState","MapContext","CustomOverlay","props","kakao","map","overlay","state","setState","overlayRef","node","options","lat","lng","visible","clickable","yAnchor","xAnchor","maps","position","LatLng","content","firstChild","setMap","setPosition","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,QAAkE,OAAlE;AACA,SAAQC,UAAR,QAAyB,YAAzB;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAAA,sBACJL,UAAU,CAACG,UAAD,CADN;AAAA,QACnBG,KADmB,eACnBA,KADmB;AAAA,QACZC,GADY,eACZA,GADY;;AAAA,oBAEDL,QAAQ,CAAC;AAC/BM,IAAAA,OAAO,EAAE,IADsB;AAE/BF,IAAAA,KAF+B;AAG/BC,IAAAA;AAH+B,GAAD,CAFP;AAAA;AAAA,QAEpBE,KAFoB;AAAA,QAEbC,QAFa;;AAQ3B,QAAMC,UAAU,GAAGZ,WAAW,CAACa,IAAI,IAAI;AAAA,2BACwBP,KAAK,CAACQ,OAD9B;AAAA,UAC3BC,GAD2B,kBAC3BA,GAD2B;AAAA,UACtBC,GADsB,kBACtBA,GADsB;AAAA,UACjBC,OADiB,kBACjBA,OADiB;AAAA,UACRC,SADQ,kBACRA,SADQ;AAAA,UACGC,OADH,kBACGA,OADH;AAAA,UACYC,OADZ,kBACYA,OADZ;AAEnC,QAAIV,KAAK,CAACD,OAAN,KAAkB,IAAtB,EAA4B;AAC5B,QAAII,IAAI,IAAI,IAAZ,EAAkB;AAClB,UAAMJ,OAAO,GAAG,IAAIF,KAAK,CAACc,IAAN,CAAWhB,aAAf,CAA6B;AACzCiB,MAAAA,QAAQ,EAAE,IAAIf,KAAK,CAACc,IAAN,CAAWE,MAAf,CAAsBR,GAAtB,EAA2BC,GAA3B,CAD+B;AAEzCQ,MAAAA,OAAO,EAAEX,IAAI,CAACY,UAF2B;AAGzCP,MAAAA,SAAS,EAAEA,SAAS,GAAGA,SAAH,GAAe,IAHM;AAIzCC,MAAAA,OAAO,EAAEA,OAAO,GAAGA,OAAH,GAAa,GAJY;AAKzCC,MAAAA,OAAO,EAAEA,OAAO,GAAGA,OAAH,GAAa;AALY,KAA7B,CAAhB;AAOA,QAAIH,OAAJ,EAAaR,OAAO,CAACiB,MAAR,CAAelB,GAAf;AACbG,IAAAA,QAAQ,mBAAMD,KAAN;AAAaD,MAAAA;AAAb,OAAR;AACA,WAAO,MAAM;AACTA,MAAAA,OAAO,CAACiB,MAAR,CAAe,IAAf;AACH,KAFD;AAGH,GAhB6B,EAgB3B,EAhB2B,CAA9B;AAkBAxB,EAAAA,SAAS,CAAC,MAAM;AAAA,4BAC6BI,KAAK,CAACQ,OADnC;AAAA,UACJC,GADI,mBACJA,GADI;AAAA,UACCC,GADD,mBACCA,GADD;AAAA,UACMC,OADN,mBACMA,OADN;AAAA,UACeC,SADf,mBACeA,SADf;AAAA,UAEJT,OAFI,GAEQC,KAFR,CAEJD,OAFI;AAGZ,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACtBA,IAAAA,OAAO,CAACkB,WAAR,CAAoB,IAAIpB,KAAK,CAACc,IAAN,CAAWE,MAAf,CAAsBR,GAAtB,EAA2BC,GAA3B,CAApB;;AACA,QAAIC,OAAJ,EAAa;AACTR,MAAAA,OAAO,CAACiB,MAAR,CAAelB,GAAf;AACH;;AACD,WAAO,MAAM;AACTC,MAAAA,OAAO,CAACiB,MAAR,CAAe,IAAf;AACH,KAFD;AAGH,GAXQ,EAWN,CAACpB,KAAK,CAACQ,OAAP,CAXM,CAAT;AAaA,SAAO;AAAK,IAAA,GAAG,EAAEF,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEN,KAAK,CAACsB,QADR,CAAP;AAGH,CA1CD;;AA4CA,eAAevB,aAAf","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from \"react\";\nimport {MapContext} from \"./KakaoMap\";\n\nconst CustomOverlay = props => {\n    const { kakao, map } = useContext(MapContext);\n    const [state, setState] = useState({\n        overlay: null,\n        kakao,\n        map\n    });\n\n    const overlayRef = useCallback(node => {\n        const { lat, lng, visible, clickable, yAnchor, xAnchor } = props.options;\n        if (state.overlay !== null) return;\n        if (node == null) return;\n        const overlay = new kakao.maps.CustomOverlay({\n            position: new kakao.maps.LatLng(lat, lng),\n            content: node.firstChild,\n            clickable: clickable ? clickable : true,\n            yAnchor: yAnchor ? yAnchor : 0.5,\n            xAnchor: xAnchor ? xAnchor : 0.5\n        });\n        if (visible) overlay.setMap(map);\n        setState({ ...state, overlay });\n        return () => {\n            overlay.setMap(null)\n        }\n    }, []);\n\n    useEffect(() => {\n        const { lat, lng, visible, clickable } = props.options;\n        const { overlay } = state;\n        if (overlay === null) return;\n        overlay.setPosition(new kakao.maps.LatLng(lat, lng));\n        if (visible) {\n            overlay.setMap(map);\n        }\n        return () => {\n            overlay.setMap(null)\n        }\n    }, [props.options]);\n\n    return <div ref={overlayRef}>\n            {props.children}\n        </div>\n};\n\nexport default CustomOverlay;\n"]},"metadata":{},"sourceType":"module"}