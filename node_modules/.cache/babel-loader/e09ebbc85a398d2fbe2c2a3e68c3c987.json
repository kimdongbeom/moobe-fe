{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/MoobeKakaoMap.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport LoadingOverlay from \"react-loading-overlay\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCrosshairs, faSpinner, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport withJs from \"components/common/map/WithJs\";\nimport withKakaoMap from \"components/common/map/WithKakaoMap\";\nimport KakaoMap from \"components/common/map/KakaoMap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadingGeoLocationFail, loadingGeoLocationStarted, loadingGeoLocationSuccess, loadingMapStarted, setMapBounds, setMapCenter, setMapCenterChange } from \"data/redux/action/map\";\nimport { MapLoadingSpinner } from \"components/common/layout/PresentUtil\";\nimport { isEmpty as _isEmpty, isNil as _isNil } from 'lodash';\nimport GeoLocationMarker from \"components/common/map/GeoLocationMarker\";\nimport { MAP_GEOLOCATION_DISABLE, MAP_GEOLOCATION_ENABLE, MAP_LOADING_SPINNER } from \"assets/styles/colors\";\nimport SearchCurrentButton from \"components/common/map/SearchCurrentButton\";\nimport debounce from 'lodash.debounce';\nimport { buildMoobeMapBounds, isSimilarLocation, unpackMoobeMapBounds } from \"data/util\";\nimport queryString from \"query-string\";\nimport { useLocation } from \"react-router\";\nimport { showOverlayContent } from \"data/redux/action/content\";\nconst Kakao = withJs(`//dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.REACT_APP_KAKAO_API_KEY}&libraries=services,clusterer,drawing&autoload=false`)(withKakaoMap(KakaoMap));\n\nconst MoobeKakaoMap = props => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(state => state.content),\n        activeContent = _useSelector.activeContent,\n        contentList = _useSelector.contentList,\n        contentLoading = _useSelector.contentLoading;\n\n  const _queryString$parse = queryString.parse(useLocation().search),\n        swLat = _queryString$parse.swLat,\n        swLng = _queryString$parse.swLng,\n        neLat = _queryString$parse.neLat,\n        neLng = _queryString$parse.neLng;\n\n  const _useSelector2 = useSelector(state => state.map),\n        centerLat = _useSelector2.centerLat,\n        centerLng = _useSelector2.centerLng,\n        refreshCenter = _useSelector2.refreshCenter,\n        mapLoading = _useSelector2.mapLoading,\n        changedCenterLat = _useSelector2.changedCenterLat,\n        changedCenterLng = _useSelector2.changedCenterLng,\n        enableGeolocation = _useSelector2.enableGeolocation,\n        geoLocationCenterLat = _useSelector2.geoLocationCenterLat,\n        geoLocationCenterLng = _useSelector2.geoLocationCenterLng,\n        geolocationLoading = _useSelector2.geolocationLoading,\n        centerChanged = _useSelector2.centerChanged;\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        bounds = _useState2[0],\n        setBounds = _useState2[1];\n\n  const initialOptions = {\n    lat: centerLat,\n    lng: centerLng,\n    level: 4,\n    refreshCenter: refreshCenter,\n    zoom: \"TOPRIGHT\"\n  }; // 초기 center, query param으로 부터 lat,lng받아서 map bounds 셋팅, map loading start\n\n  useEffect(() => {\n    dispatch(setMapCenter({\n      lat: process.env.REACT_APP_INIT_LAT,\n      lng: process.env.REACT_APP_INIT_LNG\n    }));\n    dispatch(setMapBounds({\n      swLat,\n      swLng,\n      neLat,\n      neLng\n    }));\n    dispatch(loadingMapStarted()); //initial map bound from query\n\n    setBounds(buildKakaoMapBounds(buildMoobeMapBounds(swLat, swLng, neLat, neLng)));\n  }, []); //query에 bounds정보가 없을 때 content list의 데이터로 bound를 결정.\n\n  useEffect(() => {\n    if (_isNil(buildMoobeMapBounds(swLat, swLng, neLat, neLng)) && !_isEmpty(contentList) && _isNil(activeContent)) {\n      setBounds(contentList.map(content => {\n        return {\n          lat: content.store.latitude,\n          lng: content.store.longitude\n        };\n      }));\n    }\n  }, [contentList]);\n  useEffect(() => {\n    if (!_isNil(activeContent) && !mapLoading) {\n      dispatch(setMapCenter({\n        lat: activeContent.store.latitude,\n        lng: activeContent.store.longitude\n      }));\n    }\n  }, [activeContent, mapLoading]);\n\n  const buildKakaoMapBounds = moobeMapBounds => {\n    const unpackedBounds = unpackMoobeMapBounds(moobeMapBounds);\n\n    if (!_isNil(unpackedBounds)) {\n      return [{\n        lat: unpackedBounds.swLat,\n        lng: unpackedBounds.swLng\n      }, {\n        lat: unpackedBounds.neLat,\n        lng: unpackedBounds.neLng\n      }];\n    } else {\n      return null;\n    }\n  };\n\n  const toggleGeolocation = () => {\n    dispatch(loadingGeoLocationStarted());\n\n    if (enableGeolocation) {\n      dispatch(loadingGeoLocationFail()); //call force failed to disable geolocation for a moment\n\n      setTimeout(() => {\n        dispatch(loadingGeoLocationSuccess());\n      }, 500); //delay for geo marker unmount\n    } else {\n      dispatch(loadingGeoLocationSuccess());\n    }\n  }; //every map center changed, save changed center and bounds for search current location\n\n\n  const centerChange = map => {\n    let center = map.getCenter();\n    dispatch(setMapCenterChange({\n      lat: center.getLat(),\n      lng: center.getLng()\n    }));\n  };\n\n  const boundChange = map => {\n    let bounds = map.getBounds();\n    let sw = bounds.getSouthWest(),\n        ne = bounds.getNorthEast();\n    dispatch(setMapBounds({\n      swLat: sw.getLat(),\n      swLng: sw.getLng(),\n      neLat: ne.getLat(),\n      neLng: ne.getLng()\n    }));\n  };\n\n  const zoomChange = map => {\n    if (map.getLevel() > 5) {\n      dispatch(showOverlayContent(null));\n    }\n  };\n\n  const geoLocationCenterChanged = () => {\n    return !isSimilarLocation({\n      lat: changedCenterLat,\n      lng: changedCenterLng\n    }, {\n      lat: geoLocationCenterLat,\n      lng: geoLocationCenterLng\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Kakao, {\n    className: props.className,\n    options: Object.assign(initialOptions, {\n      bounds\n    }),\n    onZoomChange: debounce(zoomChange, 300),\n    onCenterChange: debounce(centerChange, 500),\n    onBoundsChange: debounce(boundChange, 500),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, props.children, enableGeolocation ? React.createElement(GeoLocationMarker, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }) : null), React.createElement(\"button\", {\n    className: \"button geo-button\",\n    onClick: toggleGeolocation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    className: geolocationLoading ? \"fast-spin\" : \"\",\n    icon: geolocationLoading ? faSpinner : faCrosshairs,\n    color: enableGeolocation && !geoLocationCenterChanged() ? MAP_GEOLOCATION_ENABLE : MAP_GEOLOCATION_DISABLE,\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  })), centerChanged ? React.createElement(SearchCurrentButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }) : null));\n};\n\nconst Loading = props => {\n  const _useSelector3 = useSelector(state => state.map),\n        mapLoading = _useSelector3.mapLoading,\n        errorMapLoading = _useSelector3.errorMapLoading;\n\n  const loadingText = () => errorMapLoading ? \"지도를 불러오는데에 실패했습니다. 일시적인 문제일 수 있습니다. 페이지를 다시 로딩 해 주세요.\" : \"Loading...\";\n\n  const loadingSpinner = () => errorMapLoading ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faTimesCircle,\n    size: \"3x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  })) : React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(MapLoadingSpinner, {\n    color: MAP_LOADING_SPINNER,\n    loading: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }));\n\n  return React.createElement(LoadingOverlay, {\n    className: \"loading-overlay box column is-full kakao-map is-fullheight-with-navbar-tablet is-fullheight-with-navbar-mobile is-paddingless\",\n    active: mapLoading || errorMapLoading,\n    spinner: loadingSpinner(),\n    text: loadingText(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default MoobeKakaoMap;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/MoobeKakaoMap.jsx"],"names":["React","useEffect","useState","LoadingOverlay","FontAwesomeIcon","faCrosshairs","faSpinner","faTimesCircle","withJs","withKakaoMap","KakaoMap","useDispatch","useSelector","loadingGeoLocationFail","loadingGeoLocationStarted","loadingGeoLocationSuccess","loadingMapStarted","setMapBounds","setMapCenter","setMapCenterChange","MapLoadingSpinner","isEmpty","_isEmpty","isNil","_isNil","GeoLocationMarker","MAP_GEOLOCATION_DISABLE","MAP_GEOLOCATION_ENABLE","MAP_LOADING_SPINNER","SearchCurrentButton","debounce","buildMoobeMapBounds","isSimilarLocation","unpackMoobeMapBounds","queryString","useLocation","showOverlayContent","Kakao","process","env","REACT_APP_KAKAO_API_KEY","MoobeKakaoMap","props","dispatch","state","content","activeContent","contentList","contentLoading","parse","search","swLat","swLng","neLat","neLng","map","centerLat","centerLng","refreshCenter","mapLoading","changedCenterLat","changedCenterLng","enableGeolocation","geoLocationCenterLat","geoLocationCenterLng","geolocationLoading","centerChanged","bounds","setBounds","initialOptions","lat","lng","level","zoom","REACT_APP_INIT_LAT","REACT_APP_INIT_LNG","buildKakaoMapBounds","store","latitude","longitude","moobeMapBounds","unpackedBounds","toggleGeolocation","setTimeout","centerChange","center","getCenter","getLat","getLng","boundChange","getBounds","sw","getSouthWest","ne","getNorthEast","zoomChange","getLevel","geoLocationCenterChanged","className","Object","assign","children","Loading","errorMapLoading","loadingText","loadingSpinner"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport LoadingOverlay from \"react-loading-overlay\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faCrosshairs, faSpinner, faTimesCircle} from '@fortawesome/free-solid-svg-icons'\nimport withJs from \"components/common/map/WithJs\";\nimport withKakaoMap from \"components/common/map/WithKakaoMap\";\nimport KakaoMap from \"components/common/map/KakaoMap\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    loadingGeoLocationFail,\n    loadingGeoLocationStarted,\n    loadingGeoLocationSuccess,\n    loadingMapStarted,\n    setMapBounds,\n    setMapCenter,\n    setMapCenterChange\n} from \"data/redux/action/map\";\nimport {MapLoadingSpinner} from \"components/common/layout/PresentUtil\";\nimport {isEmpty as _isEmpty, isNil as _isNil} from 'lodash'\nimport GeoLocationMarker from \"components/common/map/GeoLocationMarker\";\nimport {MAP_GEOLOCATION_DISABLE, MAP_GEOLOCATION_ENABLE, MAP_LOADING_SPINNER} from \"assets/styles/colors\";\nimport SearchCurrentButton from \"components/common/map/SearchCurrentButton\";\nimport debounce from 'lodash.debounce';\nimport {buildMoobeMapBounds, isSimilarLocation, unpackMoobeMapBounds} from \"data/util\";\nimport queryString from \"query-string\";\nimport {useLocation} from \"react-router\";\nimport {showOverlayContent} from \"data/redux/action/content\";\n\nconst Kakao = withJs(\n    `//dapi.kakao.com/v2/maps/sdk.js?appkey=${\n        process.env.REACT_APP_KAKAO_API_KEY\n    }&libraries=services,clusterer,drawing&autoload=false`\n)(withKakaoMap(KakaoMap));\n\nconst MoobeKakaoMap = (props) => {\n    const dispatch = useDispatch();\n    const {activeContent, contentList, contentLoading} = useSelector(state => state.content)\n    const {swLat, swLng, neLat, neLng} = queryString.parse(useLocation().search);\n    const {\n        centerLat,\n        centerLng,\n        refreshCenter,\n        mapLoading,\n        changedCenterLat,\n        changedCenterLng,\n        enableGeolocation,\n        geoLocationCenterLat,\n        geoLocationCenterLng,\n        geolocationLoading,\n        centerChanged } = useSelector(state => state.map);\n    const [bounds, setBounds] = useState(null);\n    const initialOptions = {\n        lat: centerLat,\n        lng: centerLng,\n        level: 4,\n        refreshCenter: refreshCenter,\n        zoom: \"TOPRIGHT\"\n    };\n    // 초기 center, query param으로 부터 lat,lng받아서 map bounds 셋팅, map loading start\n    useEffect(() => {\n        dispatch(setMapCenter({lat: process.env.REACT_APP_INIT_LAT, lng:process.env.REACT_APP_INIT_LNG}));\n        dispatch(setMapBounds({swLat, swLng, neLat, neLng}));\n        dispatch(loadingMapStarted());\n        //initial map bound from query\n        setBounds(buildKakaoMapBounds(buildMoobeMapBounds(swLat, swLng, neLat, neLng)));\n    }, []);\n\n    //query에 bounds정보가 없을 때 content list의 데이터로 bound를 결정.\n    useEffect(() => {\n        if (_isNil(buildMoobeMapBounds(swLat, swLng, neLat, neLng)) && !_isEmpty(contentList) && _isNil(activeContent)) {\n            setBounds(contentList.map(content => {\n                return {lat: content.store.latitude, lng: content.store.longitude}\n            }));\n        }\n    }, [contentList]);\n\n    useEffect(() => {\n        if (!_isNil(activeContent) && !mapLoading) {\n            dispatch(setMapCenter({lat: activeContent.store.latitude, lng: activeContent.store.longitude}));\n        }\n    }, [activeContent, mapLoading]);\n\n    const buildKakaoMapBounds = (moobeMapBounds) => {\n        const unpackedBounds = unpackMoobeMapBounds(moobeMapBounds);\n        if (!_isNil(unpackedBounds)) {\n            return [{lat: unpackedBounds.swLat, lng: unpackedBounds.swLng}, {lat: unpackedBounds.neLat, lng: unpackedBounds.neLng}];\n        } else {\n            return null;\n        }\n    };\n\n    const toggleGeolocation = () => {\n        dispatch(loadingGeoLocationStarted());\n        if(enableGeolocation) {\n            dispatch(loadingGeoLocationFail()); //call force failed to disable geolocation for a moment\n            setTimeout(() => {\n                dispatch(loadingGeoLocationSuccess());\n            }, 500) //delay for geo marker unmount\n        } else {\n            dispatch(loadingGeoLocationSuccess());\n        }\n    };\n\n    //every map center changed, save changed center and bounds for search current location\n    const centerChange = (map) => {\n        let center = map.getCenter();\n        dispatch(setMapCenterChange({lat: center.getLat(), lng: center.getLng()}));\n    };\n\n    const boundChange = (map) => {\n        let bounds = map.getBounds();\n        let sw = bounds.getSouthWest(), ne = bounds.getNorthEast();\n        dispatch(setMapBounds({swLat: sw.getLat(), swLng: sw.getLng(), neLat: ne.getLat(), neLng: ne.getLng()}));\n    };\n\n    const zoomChange = (map) => {\n        if(map.getLevel() > 5) {\n            dispatch(showOverlayContent(null))\n        }\n    }\n\n    const geoLocationCenterChanged = () => {\n        return !isSimilarLocation({lat: changedCenterLat, lng: changedCenterLng}, {lat: geoLocationCenterLat, lng: geoLocationCenterLng})\n    }\n\n    return (\n        <>\n            <Loading>\n                <Kakao className={props.className}\n                        options={Object.assign(initialOptions, {bounds})}\n                        onZoomChange={debounce(zoomChange, 300)}\n                        onCenterChange={debounce(centerChange, 500)}\n                        onBoundsChange={debounce(boundChange, 500)}>\n                        {/*>*/}\n                    {props.children}\n                    {enableGeolocation ? <GeoLocationMarker/> : null}\n                </Kakao>\n                <button className=\"button geo-button\" onClick={toggleGeolocation}>\n                    <FontAwesomeIcon className={geolocationLoading ? \"fast-spin\" : \"\"}\n                                     icon={geolocationLoading ? faSpinner : faCrosshairs}\n                                     color={enableGeolocation && !geoLocationCenterChanged() ? MAP_GEOLOCATION_ENABLE : MAP_GEOLOCATION_DISABLE}\n                                     size={\"lg\"}/>\n                </button>\n                {centerChanged ? <SearchCurrentButton /> : null}\n\n            </Loading>\n        </>\n    )\n};\n\nconst Loading = (props) => {\n    const {mapLoading, errorMapLoading} = useSelector(state => state.map);\n    const loadingText = () => errorMapLoading ? \"지도를 불러오는데에 실패했습니다. 일시적인 문제일 수 있습니다. 페이지를 다시 로딩 해 주세요.\" : \"Loading...\";\n    const loadingSpinner = () => errorMapLoading ? <h2><FontAwesomeIcon icon={faTimesCircle} size='3x' /></h2>\n        : <h6><MapLoadingSpinner color={MAP_LOADING_SPINNER} loading={true} /></h6>;\n    return (\n        <LoadingOverlay\n            className={\"loading-overlay box column is-full kakao-map is-fullheight-with-navbar-tablet is-fullheight-with-navbar-mobile is-paddingless\"}\n            active={mapLoading || errorMapLoading}\n            spinner={loadingSpinner()}\n            text={loadingText()}\n        >\n            {props.children}\n        </LoadingOverlay>\n    )\n};\n\nexport default MoobeKakaoMap;"]},"metadata":{},"sourceType":"module"}