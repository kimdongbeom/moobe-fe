{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/mobile/store/StoreList.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LoadingSpinner } from \"components/common/layout/PresentUtil\";\nimport Store from \"components/mobile/store/Store\";\nimport { fetchContentList } from \"data/redux/action/content\";\nimport { useLocation, useParams } from \"react-router\";\nimport SearchInfoHeader from \"components/common/search/SearchInfoHeader\";\nimport { _insert, buildMoobeMapBounds } from \"data/util\";\nimport queryString from \"query-string\";\nimport { isEmpty as _isEmpty } from \"lodash\";\nimport { MOBILE_CONTENT_LIST_LOADING } from \"assets/styles/colors\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport StoreAdSense from \"components/google/StoreAdSense\";\nimport { isEnableAdSense } from \"assets/styles/const\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGrinTears } from \"@fortawesome/free-regular-svg-icons\";\n\nconst StoreListEmpty = () => React.createElement(\"div\", {\n  className: \"has-text-centered has-text-grey-light has-text-weight-semibold has-margin-top-10\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}, React.createElement(FontAwesomeIcon, {\n  className: \"is-marginless has-text-grey-light has-text-weight-semibold has-margin-top-15\",\n  icon: faGrinTears,\n  size: \"3x\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}), React.createElement(\"h1\", {\n  className: \"title is-5 has-margin-top-20\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}, \"\\uACB0\\uACFC\\uAC00 \\uC5C6\\uC5B4\\uC694...\")), React.createElement(\"h3\", {\n  className: \"title is-5 has-margin-top-15\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}, React.createElement(\"button\", {\n  className: \"button is-danger is-md\",\n  onClick: e => window.location.href = '/',\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}, \"\\uBA54\\uC778\\uC5D0\\uC11C \\uB2E4\\uC2DC \\uCC3E\\uAE30\")));\n\nexport const StoreList = ({\n  isListVisible\n}) => {\n  const _useSelector = useSelector(state => state.content),\n        contentList = _useSelector.contentList,\n        contentLoading = _useSelector.contentLoading,\n        activeContent = _useSelector.activeContent,\n        pageSize = _useSelector.pageSize,\n        maxPage = _useSelector.maxPage,\n        totalCount = _useSelector.totalCount;\n\n  const _useState = useState(1),\n        _useState2 = _slicedToArray(_useState, 2),\n        pageNum = _useState2[0],\n        setPageNum = _useState2[1];\n\n  const _useSelector2 = useSelector(state => state.channel),\n        channelList = _useSelector2.channelList,\n        channelLoading = _useSelector2.channelLoading;\n\n  const _useParams = useParams(),\n        channelId = _useParams.channelId,\n        contentId = _useParams.contentId;\n\n  const _queryString$parse = queryString.parse(useLocation().search),\n        query = _queryString$parse.query,\n        searchType = _queryString$parse.searchType,\n        swLat = _queryString$parse.swLat,\n        swLng = _queryString$parse.swLng,\n        neLat = _queryString$parse.neLat,\n        neLng = _queryString$parse.neLng;\n\n  const mapBounds = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n  const dispatch = useDispatch();\n\n  const renderContentList = () => {\n    if (_isEmpty(contentList)) {\n      return React.createElement(StoreListEmpty, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      });\n    }\n\n    let storeList = contentList.map(content => {\n      let channel = channelList.find(c => c.id == content.channelId);\n      return React.createElement(Store, {\n        key: content.id,\n        content: content,\n        channel: channel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      });\n    });\n\n    if (!isListVisible || !isEnableAdSense()) {\n      return storeList;\n    }\n\n    const adCount = (storeList.length / 3).toFixed() * 1;\n\n    for (let i = adCount; i > 0; i--) {\n      storeList = _insert(i * 3, React.createElement(StoreAdSense, {\n        key: `ad-${i * 3}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), storeList);\n    }\n\n    return storeList;\n  };\n\n  useEffect(() => {\n    if (_isEmpty(contentList)) {\n      setPageNum(1);\n    }\n  }, [contentList]);\n\n  const isLoadMore = () => !(contentList.length === totalCount);\n\n  const loadMore = () => {\n    dispatch(fetchContentList(channelId, query, searchType, mapBounds, pageNum + 1, true, () => setPageNum(pageNum + 1)));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(SearchInfoHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), renderContentList(), React.createElement(LoadingOverlay, {\n    className: \"store-loading-overlay\",\n    active: channelLoading || contentLoading,\n    spinner: React.createElement(LoadingSpinner, {\n      color: MOBILE_CONTENT_LIST_LOADING,\n      loading: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: isLoadMore() ? \"column box has-text-centered\" : \"is-hidden\",\n    onClick: loadMore,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"\\uB354\\uBCF4\\uAE30\"))));\n};\nexport default StoreList;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/mobile/store/StoreList.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","LoadingSpinner","Store","fetchContentList","useLocation","useParams","SearchInfoHeader","_insert","buildMoobeMapBounds","queryString","isEmpty","_isEmpty","MOBILE_CONTENT_LIST_LOADING","LoadingOverlay","StoreAdSense","isEnableAdSense","FontAwesomeIcon","faGrinTears","StoreListEmpty","e","window","location","href","StoreList","isListVisible","state","content","contentList","contentLoading","activeContent","pageSize","maxPage","totalCount","pageNum","setPageNum","channel","channelList","channelLoading","channelId","contentId","parse","search","query","searchType","swLat","swLng","neLat","neLng","mapBounds","dispatch","renderContentList","storeList","map","find","c","id","adCount","length","toFixed","i","isLoadMore","loadMore"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {LoadingSpinner} from \"components/common/layout/PresentUtil\";\nimport Store from \"components/mobile/store/Store\";\nimport {fetchContentList} from \"data/redux/action/content\";\nimport {useLocation, useParams} from \"react-router\";\nimport SearchInfoHeader from \"components/common/search/SearchInfoHeader\";\nimport {_insert, buildMoobeMapBounds} from \"data/util\";\nimport queryString from \"query-string\";\nimport {isEmpty as _isEmpty} from \"lodash\";\nimport {MOBILE_CONTENT_LIST_LOADING} from \"assets/styles/colors\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport StoreAdSense from \"components/google/StoreAdSense\";\nimport {isEnableAdSense} from \"assets/styles/const\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faGrinTears} from \"@fortawesome/free-regular-svg-icons\";\n\nconst StoreListEmpty = () => (\n    <div className=\"has-text-centered has-text-grey-light has-text-weight-semibold has-margin-top-10\">\n        <FontAwesomeIcon className=\"is-marginless has-text-grey-light has-text-weight-semibold has-margin-top-15\"\n                         icon={faGrinTears}\n                         size={\"3x\"}/>\n        <h1 className=\"title is-5 has-margin-top-20\">\n            <p>결과가 없어요...</p>\n        </h1>\n        <h3 className=\"title is-5 has-margin-top-15\">\n            <button className=\"button is-danger is-md\" onClick={(e) => window.location.href='/'}>메인에서 다시 찾기</button>\n        </h3>\n    </div>\n)\n\nexport const StoreList = ({isListVisible}) => {\n    const {contentList, contentLoading, activeContent, pageSize, maxPage, totalCount} = useSelector(state => state.content);\n    const [pageNum, setPageNum] = useState(1);\n    const {channelList, channelLoading} = useSelector(state => state.channel);\n    const {channelId, contentId} = useParams();\n    const {query, searchType, swLat, swLng, neLat, neLng} = queryString.parse(useLocation().search);\n    const mapBounds = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n    const dispatch = useDispatch();\n    const renderContentList = () => {\n        if (_isEmpty(contentList)) {\n            return <StoreListEmpty />\n        }\n        let storeList = contentList.map(content => {\n            let channel = channelList.find(c => c.id == content.channelId)\n            return <Store key={content.id} content={content} channel={channel} />\n        })\n        if (!isListVisible || !isEnableAdSense()) {\n            return storeList;\n        }\n        const adCount = (storeList.length / 3).toFixed() * 1\n        for (let i = adCount; i > 0; i--) {\n            storeList = _insert(i*3, <StoreAdSense key={`ad-${i*3}`}/>, storeList)\n        }\n        return storeList\n    };\n    useEffect(() => {\n        if (_isEmpty(contentList)) {\n            setPageNum(1)\n        }\n    }, [contentList])\n    const isLoadMore = () => !(contentList.length === totalCount);\n    const loadMore = () => {\n        dispatch(fetchContentList(channelId, query, searchType, mapBounds,  pageNum + 1, true, () => setPageNum(pageNum + 1)));\n    };\n    return (\n        <>\n            <SearchInfoHeader />\n            {renderContentList()}\n            <LoadingOverlay className={\"store-loading-overlay\"}\n                active={channelLoading || contentLoading}\n                spinner={<LoadingSpinner color={MOBILE_CONTENT_LIST_LOADING} loading={true}/>}>\n                <div className={isLoadMore() ? \"column box has-text-centered\" : \"is-hidden\"} onClick={loadMore}><strong>더보기</strong></div>\n            </LoadingOverlay>\n        </>\n    )\n};\n\n\nexport default StoreList;"]},"metadata":{},"sourceType":"module"}