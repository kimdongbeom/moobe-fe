{"ast":null,"code":"var _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/ClusterMarker.jsx\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport MarkerClusterer, { MarkerClustererStyles } from \"components/common/map/MarkerClusterer\";\nimport CustomOverlay from \"components/common/map/CustomOverlay\";\nimport MapLocationOverlay from \"components/common/map/MapLocationOverlay\";\nimport Marker from \"components/common/map/Marker\";\nimport { setSearchOnBoundChange } from \"data/redux/action/map\";\n\nconst ClusterMarker = ({\n  mapClusterLocation,\n  renderFocusedMarker,\n  renderSingleMarker\n}) => {\n  const _useSelector = useSelector(state => state.map),\n        map = _useSelector.map;\n\n  const _useSelector2 = useSelector(state => state.contentDetail),\n        contentDetail = _useSelector2.contentDetail;\n\n  const _useSelector3 = useSelector(state => state.mapLocation),\n        focusedMapLocation = _useSelector3.focusedMapLocation;\n\n  const dispatch = useDispatch();\n\n  const getClusterStyle = () => {\n    let clusterStyle;\n\n    if (mapClusterLocation.markerListSize > 150) {\n      clusterStyle = Object.assign({}, MarkerClustererStyles[2]);\n    } else if (mapClusterLocation.markerListSize > 50) {\n      clusterStyle = Object.assign({}, MarkerClustererStyles[1]);\n    } else {\n      clusterStyle = Object.assign({}, MarkerClustererStyles[0]);\n    }\n\n    return [clusterStyle];\n  };\n\n  const getText = () => {\n    return [mapClusterLocation.markerListSize];\n  };\n\n  const onClusterClick = cluster => {\n    if (map) {\n      const bounds = new kakao.maps.LatLngBounds();\n      mapClusterLocation.locationList.map(m => {\n        bounds.extend(new kakao.maps.LatLng(m.latitude, m.longitude));\n      });\n      dispatch(setSearchOnBoundChange(true));\n      map.setBounds(bounds, 0, 0, 0, 0);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, mapClusterLocation.markerListSize == 1 ? renderSingleMarker(mapClusterLocation) : React.createElement(MarkerClusterer, {\n    options: {\n      minLevel: 0,\n      disableClickZoom: true,\n      minClusterSize: 1,\n      styles: getClusterStyle(),\n      texts: getText()\n    },\n    onClusterClick: onClusterClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Marker, {\n    options: {\n      lat: mapClusterLocation.centerLatitude,\n      lng: mapClusterLocation.centerLongitude,\n      content: mapClusterLocation.markerListSize\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), focusedMapLocation && mapClusterLocation.locationIdList.includes(focusedMapLocation.id) ? renderFocusedMarker(mapClusterLocation.findLocation(focusedMapLocation.id)) : null));\n};\n\nexport default ClusterMarker;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/ClusterMarker.jsx"],"names":["React","useDispatch","useSelector","MarkerClusterer","MarkerClustererStyles","CustomOverlay","MapLocationOverlay","Marker","setSearchOnBoundChange","ClusterMarker","mapClusterLocation","renderFocusedMarker","renderSingleMarker","state","map","contentDetail","mapLocation","focusedMapLocation","dispatch","getClusterStyle","clusterStyle","markerListSize","Object","assign","getText","onClusterClick","cluster","bounds","kakao","maps","LatLngBounds","locationList","m","extend","LatLng","latitude","longitude","setBounds","minLevel","disableClickZoom","minClusterSize","styles","texts","lat","centerLatitude","lng","centerLongitude","content","locationIdList","includes","id","findLocation"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,eAAP,IAAyBC,qBAAzB,QAAqD,uCAArD;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AACA,OAAOC,kBAAP,MAA+B,0CAA/B;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AACA,SAAQC,sBAAR,QAAqC,uBAArC;;AAGA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,kBAAD;AAAqBC,EAAAA,mBAArB;AAA0CC,EAAAA;AAA1C,CAAD,KAAmE;AAAA,uBACvEV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,GAAhB,CAD4D;AAAA,QAC9EA,GAD8E,gBAC9EA,GAD8E;;AAAA,wBAE7DZ,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACE,aAAhB,CAFkD;AAAA,QAE9EA,aAF8E,iBAE9EA,aAF8E;;AAAA,wBAGxDb,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACG,WAAhB,CAH6C;AAAA,QAG9EC,kBAH8E,iBAG9EA,kBAH8E;;AAIrF,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B;;AAEA,QAAMkB,eAAe,GAAG,MAAM;AAC1B,QAAIC,YAAJ;;AACA,QAAIV,kBAAkB,CAACW,cAAnB,GAAoC,GAAxC,EAA6C;AACzCD,MAAAA,YAAY,GAAGE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnB,qBAAqB,CAAC,CAAD,CAAvC,CAAf;AACH,KAFD,MAEO,IAAIM,kBAAkB,CAACW,cAAnB,GAAoC,EAAxC,EAA4C;AAC/CD,MAAAA,YAAY,GAAGE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnB,qBAAqB,CAAC,CAAD,CAAvC,CAAf;AACH,KAFM,MAEA;AACHgB,MAAAA,YAAY,GAAGE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnB,qBAAqB,CAAC,CAAD,CAAvC,CAAf;AACH;;AACD,WAAO,CAACgB,YAAD,CAAP;AACH,GAVD;;AAYA,QAAMI,OAAO,GAAG,MAAM;AAClB,WAAO,CAACd,kBAAkB,CAACW,cAApB,CAAP;AACH,GAFD;;AAIA,QAAMI,cAAc,GAAIC,OAAD,IAAa;AAChC,QAAIZ,GAAJ,EAAS;AACL,YAAMa,MAAM,GAAG,IAAIC,KAAK,CAACC,IAAN,CAAWC,YAAf,EAAf;AACApB,MAAAA,kBAAkB,CAACqB,YAAnB,CAAgCjB,GAAhC,CAAoCkB,CAAC,IAAI;AACrCL,QAAAA,MAAM,CAACM,MAAP,CAAc,IAAIL,KAAK,CAACC,IAAN,CAAWK,MAAf,CAAsBF,CAAC,CAACG,QAAxB,EAAkCH,CAAC,CAACI,SAApC,CAAd;AACH,OAFD;AAGAlB,MAAAA,QAAQ,CAACV,sBAAsB,CAAC,IAAD,CAAvB,CAAR;AACAM,MAAAA,GAAG,CAACuB,SAAJ,CAAcV,MAAd,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B;AACH;AACJ,GATD;;AAWA,SACI,0CACKjB,kBAAkB,CAACW,cAAnB,IAAqC,CAArC,GACKT,kBAAkB,CAACF,kBAAD,CADvB,GAEK,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAE;AACxB4B,MAAAA,QAAQ,EAAE,CADc;AAExBC,MAAAA,gBAAgB,EAAE,IAFM;AAGxBC,MAAAA,cAAc,EAAE,CAHQ;AAIxBC,MAAAA,MAAM,EAAEtB,eAAe,EAJC;AAKxBuB,MAAAA,KAAK,EAAElB,OAAO;AALU,KAA1B;AAMC,IAAA,cAAc,EAAEC,cANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE;AAACkB,MAAAA,GAAG,EAAEjC,kBAAkB,CAACkC,cAAzB;AAAyCC,MAAAA,GAAG,EAAEnC,kBAAkB,CAACoC,eAAjE;AAAkFC,MAAAA,OAAO,EAAErC,kBAAkB,CAACW;AAA9G,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAQGJ,kBAAkB,IAAIP,kBAAkB,CAACsC,cAAnB,CAAkCC,QAAlC,CAA2ChC,kBAAkB,CAACiC,EAA9D,CAAtB,GACKvC,mBAAmB,CAACD,kBAAkB,CAACyC,YAAnB,CAAgClC,kBAAkB,CAACiC,EAAnD,CAAD,CADxB,GAEK,IAVR,CAHV,CADJ;AAoBH,CArDD;;AAuDA,eAAezC,aAAf","sourcesContent":["import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport MarkerClusterer, {MarkerClustererStyles} from \"components/common/map/MarkerClusterer\";\nimport CustomOverlay from \"components/common/map/CustomOverlay\";\nimport MapLocationOverlay from \"components/common/map/MapLocationOverlay\";\nimport Marker from \"components/common/map/Marker\";\nimport {setSearchOnBoundChange} from \"data/redux/action/map\";\n\n\nconst ClusterMarker = ({mapClusterLocation, renderFocusedMarker, renderSingleMarker}) => {\n    const {map} = useSelector(state => state.map);\n    const {contentDetail} = useSelector(state => state.contentDetail);\n    const {focusedMapLocation} = useSelector(state => state.mapLocation);\n    const dispatch = useDispatch();\n\n    const getClusterStyle = () => {\n        let clusterStyle;\n        if (mapClusterLocation.markerListSize > 150) {\n            clusterStyle = Object.assign({}, MarkerClustererStyles[2]);\n        } else if (mapClusterLocation.markerListSize > 50) {\n            clusterStyle = Object.assign({}, MarkerClustererStyles[1]);\n        } else {\n            clusterStyle = Object.assign({}, MarkerClustererStyles[0]);\n        }\n        return [clusterStyle]\n    }\n\n    const getText = () => {\n        return [mapClusterLocation.markerListSize];\n    }\n\n    const onClusterClick = (cluster) => {\n        if (map) {\n            const bounds = new kakao.maps.LatLngBounds();\n            mapClusterLocation.locationList.map(m => {\n                bounds.extend(new kakao.maps.LatLng(m.latitude, m.longitude))\n            })\n            dispatch(setSearchOnBoundChange(true))\n            map.setBounds(bounds, 0, 0, 0, 0);\n        }\n    }\n\n    return (\n        <>\n            {mapClusterLocation.markerListSize == 1\n                ? renderSingleMarker(mapClusterLocation)\n                : <MarkerClusterer options={{\n                    minLevel: 0,\n                    disableClickZoom: true,\n                    minClusterSize: 1,\n                    styles: getClusterStyle(),\n                    texts: getText(),\n                }} onClusterClick={onClusterClick}>\n                    <Marker options={{lat: mapClusterLocation.centerLatitude, lng: mapClusterLocation.centerLongitude, content: mapClusterLocation.markerListSize,}} />\n                    {focusedMapLocation && mapClusterLocation.locationIdList.includes(focusedMapLocation.id)\n                        ? renderFocusedMarker(mapClusterLocation.findLocation(focusedMapLocation.id))\n                        : null\n                    }\n                </MarkerClusterer>\n            }\n        </>\n    )\n}\n\nexport default ClusterMarker;"]},"metadata":{},"sourceType":"module"}