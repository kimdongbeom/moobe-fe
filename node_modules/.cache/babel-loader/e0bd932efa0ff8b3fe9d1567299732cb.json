{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/home/Home.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { fetchContent, fetchContentList, setActiveContent, setFocusedContent, showOverlayContent } from \"data/redux/action/content\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DesktopHome from \"components/home/DesktopHome\";\nimport MobileHome from \"components/home/MobileHome\";\nimport { isMobile } from \"react-device-detect\";\nimport queryString from 'query-string';\nimport useWindowDimensions, { isMobileWidth } from \"components/common/layout/WindowDimensions\";\nimport { useLocation, useParams } from \"react-router\";\nimport { findIndex as _findIndex, isEmpty as _isEmpty, isNil as _isNil, toString as _toString } from \"lodash\";\nimport { fetchChannel, setActiveChannel } from \"data/redux/action/channel\";\nimport { resetMapCenterChange } from \"data/redux/action/map\";\nimport { buildMoobeMapBounds, isEqualBounds } from \"data/util\";\n\nconst MoobeHome = () => {\n  const _useState = useState(isMobile),\n        _useState2 = _slicedToArray(_useState, 2),\n        mobile = _useState2[0],\n        setMobile = _useState2[1];\n\n  const _useParams = useParams(),\n        channelId = _useParams.channelId,\n        contentId = _useParams.contentId;\n\n  const _queryString$parse = queryString.parse(useLocation().search),\n        page = _queryString$parse.page,\n        swLat = _queryString$parse.swLat,\n        swLng = _queryString$parse.swLng,\n        neLat = _queryString$parse.neLat,\n        neLng = _queryString$parse.neLng;\n\n  const _useState3 = useState(channelId),\n        _useState4 = _slicedToArray(_useState3, 2),\n        prevChannelId = _useState4[0],\n        setPrevChannelId = _useState4[1];\n\n  const _useState5 = useState(page),\n        _useState6 = _slicedToArray(_useState5, 2),\n        prevPage = _useState6[0],\n        setPrevPage = _useState6[1];\n\n  const mapBounds = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n\n  const _useState7 = useState(mapBounds),\n        _useState8 = _slicedToArray(_useState7, 2),\n        prevMapBounds = _useState8[0],\n        setPrevMapBounds = _useState8[1];\n\n  const _useSelector = useSelector(state => state.channel),\n        channelList = _useSelector.channelList;\n\n  const _useSelector2 = useSelector(state => state.content),\n        contentList = _useSelector2.contentList,\n        activeContent = _useSelector2.activeContent,\n        contentLoading = _useSelector2.contentLoading;\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (_isEmpty(channelList)) {\n      //initial both channel list and content list\n      dispatch(fetchChannel(channelId));\n      dispatch(fetchContentList(channelId, contentId, mapBounds, page, mobile, fetchContentCallback));\n    } else if (prevChannelId != channelId) {\n      //if channelid change, change channel and init content list\n      dispatch(setActiveChannel(channelId));\n      dispatch(fetchContentList(channelId, contentId, mapBounds, page, mobile, fetchContentCallback));\n    } else if (!isEqualBounds(prevMapBounds, mapBounds)) {\n      //change location\n      dispatch(fetchContentList(channelId, contentId, mapBounds, page, false, fetchContentCallback));\n    } else if (prevPage != page) {\n      //change page\n      dispatch(fetchContentList(channelId, contentId, mapBounds, page, mobile));\n    } else {\n      // others only set active content\n      let contentIndex = _findIndex(contentList, content => _toString(content.id) === contentId);\n\n      if (contentIndex !== -1) {\n        let content = contentList[contentIndex];\n        dispatch(setActiveContent(content));\n        dispatch(showOverlayContent(content));\n        dispatch(setFocusedContent(null));\n      } else {\n        dispatch(setActiveContent(null));\n        dispatch(setFocusedContent(null)); // dispatch(showOverlayContent(null));\n      }\n    }\n\n    setPrevPage(page);\n    setPrevMapBounds(buildMoobeMapBounds(swLat, swLng, neLat, neLng));\n    setPrevChannelId(channelId);\n  }, [channelId, contentId, page, swLat, swLng, neLat, neLng]); //update every location changed.\n\n  const fetchContentCallback = (channelId, contentId) => {\n    dispatch(resetMapCenterChange());\n  };\n\n  const dimensions = useWindowDimensions(); //for responsive height in mobile web.\n\n  useEffect(() => {\n    setTimeout(() => {\n      setMobile(isMobile || isMobileWidth());\n    }, 500); //delay for dimention detected\n  }, [dimensions]);\n  return React.createElement(React.Fragment, null, !mobile ? React.createElement(DesktopHome, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }) : React.createElement(MobileHome, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }));\n};\n\nexport default MoobeHome;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/home/Home.jsx"],"names":["React","useEffect","useState","fetchContent","fetchContentList","setActiveContent","setFocusedContent","showOverlayContent","useDispatch","useSelector","DesktopHome","MobileHome","isMobile","queryString","useWindowDimensions","isMobileWidth","useLocation","useParams","findIndex","_findIndex","isEmpty","_isEmpty","isNil","_isNil","toString","_toString","fetchChannel","setActiveChannel","resetMapCenterChange","buildMoobeMapBounds","isEqualBounds","MoobeHome","mobile","setMobile","channelId","contentId","parse","search","page","swLat","swLng","neLat","neLng","prevChannelId","setPrevChannelId","prevPage","setPrevPage","mapBounds","prevMapBounds","setPrevMapBounds","state","channel","channelList","content","contentList","activeContent","contentLoading","dispatch","fetchContentCallback","contentIndex","id","dimensions","setTimeout"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {\n    fetchContent,\n    fetchContentList,\n    setActiveContent, setFocusedContent,\n    showOverlayContent\n} from \"data/redux/action/content\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport DesktopHome from \"components/home/DesktopHome\";\nimport MobileHome from \"components/home/MobileHome\";\nimport {isMobile} from \"react-device-detect\";\nimport queryString from 'query-string'\nimport useWindowDimensions, {isMobileWidth} from \"components/common/layout/WindowDimensions\";\nimport {useLocation, useParams} from \"react-router\";\nimport {findIndex as _findIndex, isEmpty as _isEmpty, isNil as _isNil, toString as _toString} from \"lodash\";\nimport {fetchChannel, setActiveChannel} from \"data/redux/action/channel\";\nimport {resetMapCenterChange} from \"data/redux/action/map\";\nimport {buildMoobeMapBounds, isEqualBounds} from \"data/util\";\n\nconst MoobeHome = () => {\n    const [mobile, setMobile]  = useState(isMobile);\n    const {channelId, contentId} = useParams();\n    const {page, swLat, swLng, neLat, neLng} = queryString.parse(useLocation().search);\n    const [prevChannelId, setPrevChannelId] = useState(channelId);\n    const [prevPage, setPrevPage] = useState(page);\n    const mapBounds = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n    const [prevMapBounds, setPrevMapBounds] = useState(mapBounds);\n    const {channelList} = useSelector(state => state.channel);\n    const {contentList, activeContent, contentLoading} = useSelector(state => state.content);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        if (_isEmpty(channelList)) { //initial both channel list and content list\n            dispatch(fetchChannel(channelId));\n            dispatch(fetchContentList(channelId, contentId, mapBounds, page, mobile, fetchContentCallback));\n        } else if (prevChannelId != channelId) { //if channelid change, change channel and init content list\n            dispatch(setActiveChannel(channelId));\n            dispatch(fetchContentList(channelId, contentId, mapBounds, page, mobile, fetchContentCallback));\n        } else if (!isEqualBounds(prevMapBounds, mapBounds)) { //change location\n            dispatch(fetchContentList(channelId, contentId, mapBounds, page, false, fetchContentCallback));\n        } else if (prevPage != page) { //change page\n            dispatch(fetchContentList(channelId, contentId, mapBounds, page, mobile));\n        } else { // others only set active content\n            let contentIndex = _findIndex(contentList, (content) => (_toString(content.id) === contentId))\n            if (contentIndex !== -1) {\n                let content = contentList[contentIndex]\n                dispatch(setActiveContent(content));\n                dispatch(showOverlayContent(content));\n                dispatch(setFocusedContent(null));\n            } else {\n                dispatch(setActiveContent(null));\n                dispatch(setFocusedContent(null));\n                // dispatch(showOverlayContent(null));\n            }\n        }\n        setPrevPage(page);\n        setPrevMapBounds(buildMoobeMapBounds(swLat, swLng, neLat, neLng));\n        setPrevChannelId(channelId);\n    }, [channelId, contentId, page, swLat, swLng, neLat, neLng]); //update every location changed.\n\n    const fetchContentCallback = (channelId, contentId) => {\n        dispatch(resetMapCenterChange());\n    };\n\n    const dimensions = useWindowDimensions() //for responsive height in mobile web.\n    useEffect(() => {\n        setTimeout(() => {\n            setMobile(isMobile || isMobileWidth());\n        }, 500) //delay for dimention detected\n    }, [dimensions])\n    return (\n        <>\n            {!mobile ? <DesktopHome /> : <MobileHome />}\n        </>\n    )\n};\n\nexport default MoobeHome;"]},"metadata":{},"sourceType":"module"}