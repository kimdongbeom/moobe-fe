{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/MoobeKakaoMap.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport LoadingOverlay from \"react-loading-overlay\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfo, faSpinner, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport withJs from \"components/common/map/WithJs\";\nimport withKakaoMap from \"components/common/map/WithKakaoMap\";\nimport KakaoMap from \"components/common/map/KakaoMap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { isMobile } from \"react-device-detect\";\nimport MapImages from \"assets/images/map_images.png\";\nimport { loadingGeoLocationFail, loadingGeoLocationStarted, loadingGeoLocationSuccess, setMapBoundChanged, setMapBounds, setMapCenterChange, setMapCenterForce, setMapLevel } from \"data/redux/action/map\";\nimport { MapLoadingSpinner } from \"components/common/layout/PresentUtil\";\nimport { isEmpty as _isEmpty, isNil as _isNil } from 'lodash';\nimport GeoLocationMarker from \"components/common/map/GeoLocationMarker\";\nimport { MAP_LOADING_SPINNER } from \"assets/styles/colors\";\nimport SearchCurrentButton from \"components/common/map/SearchCurrentButton\";\nimport debounce from 'lodash.debounce';\nimport { buildKakaoMapBounds, buildMoobeMapBounds, isSimilarLocation } from \"data/util\";\nimport queryString from \"query-string\";\nimport { useLocation, useParams } from \"react-router\";\nimport SearchWideLocationButton from \"components/common/map/SearchWideLocationButton\";\nimport { getWindowDimensions, initVH } from \"components/common/layout/WindowDimensions\";\nimport { initMapLevel } from \"data/redux/reducers/mapReducer\";\nconst Kakao = withJs(`//dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.REACT_APP_KAKAO_API_KEY}&libraries=services,clusterer,drawing&autoload=false`)(withKakaoMap(KakaoMap));\n\nconst MoobeKakaoMap = props => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(state => state.mapLocation),\n        focusedMapLocation = _useSelector.focusedMapLocation;\n\n  const _useSelector2 = useSelector(state => state.contentDetail),\n        contentDetail = _useSelector2.contentDetail;\n\n  const location = useLocation();\n\n  const _queryString$parse = queryString.parse(location.search),\n        swLat = _queryString$parse.swLat,\n        swLng = _queryString$parse.swLng,\n        neLat = _queryString$parse.neLat,\n        neLng = _queryString$parse.neLng,\n        queryMapLevel = _queryString$parse.level;\n\n  const _useSelector3 = useSelector(state => state.map),\n        centerLat = _useSelector3.centerLat,\n        centerLng = _useSelector3.centerLng,\n        refreshCenter = _useSelector3.refreshCenter,\n        mapLoading = _useSelector3.mapLoading,\n        changedCenterLat = _useSelector3.changedCenterLat,\n        changedCenterLng = _useSelector3.changedCenterLng,\n        enableGeolocation = _useSelector3.enableGeolocation,\n        geoLocationCenterLat = _useSelector3.geoLocationCenterLat,\n        geoLocationCenterLng = _useSelector3.geoLocationCenterLng,\n        geolocationLoading = _useSelector3.geolocationLoading,\n        mapLevel = _useSelector3.mapLevel,\n        mapBounds = _useSelector3.mapBounds,\n        mapBoundMargins = _useSelector3.mapBoundMargins;\n\n  const _useState = useState(buildKakaoMapBounds(buildMoobeMapBounds(swLat, swLng, neLat, neLng))),\n        _useState2 = _slicedToArray(_useState, 2),\n        bounds = _useState2[0],\n        setBounds = _useState2[1];\n\n  const _useState3 = useState(queryMapLevel),\n        _useState4 = _slicedToArray(_useState3, 2),\n        level = _useState4[0],\n        setLevel = _useState4[1];\n\n  const initialOptions = {\n    lat: centerLat,\n    lng: centerLng,\n    level: level,\n    refreshCenter: refreshCenter,\n    zoom: props.zoom ? props.zoom : \"TOPRIGHT\"\n  };\n  useEffect(() => {\n    return () => {\n      dispatch(loadingGeoLocationFail()); // reset geolocation\n    };\n  }, []); //mapBounds의 변화에 따라 지도의 bound를 바꿈\n\n  useEffect(() => {\n    if (_isNil(mapBounds)) {\n      setLevel(initMapLevel);\n      dispatch(setMapLevel(initMapLevel));\n      dispatch(setMapCenterForce({\n        lat: process.env.REACT_APP_INIT_MAP_CENTER_LAT,\n        lng: process.env.REACT_APP_INIT_MAP_CENTER_LNG\n      }));\n      dispatch(setMapBounds([]));\n    } else if (_isEmpty(mapBounds)) {//pass\n    } else {\n      setBounds(mapBounds);\n    }\n  }, [mapBounds]);\n  useEffect(() => {\n    setLevel(mapLevel);\n  }, [mapLevel]); //content를 선택 하면 지도 center를 옮기고 이전화면으로 돌아왔을때 mapBound설정.\n\n  useEffect(() => {\n    if (isMobile || mapLoading) {\n      return;\n    }\n\n    if (!_isEmpty(contentDetail)) {\n      if (mapLevel > 6) {\n        dispatch(setMapLevel(6));\n      }\n\n      dispatch(setMapCenterForce({\n        lat: contentDetail.store.latitude,\n        lng: contentDetail.store.longitude\n      }));\n    } else {\n      let queryMapBound = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n\n      if (!_isNil(queryMapBound)) {\n        dispatch(setMapBounds(buildKakaoMapBounds(queryMapBound)));\n      } else {\n        resetMap();\n      }\n    }\n  }, [contentDetail, swLat, swLng, neLat, neLng, mapLoading]); //content를 선택했다가 이전화면으로 돌아왔을때 mapBound설정.\n\n  useEffect(() => {\n    if (!isMobile || mapLoading) {\n      return;\n    }\n\n    if (!_isEmpty(focusedMapLocation)) {\n      if (mapLevel > 5) {\n        dispatch(setMapLevel(5));\n      }\n\n      dispatch(setMapCenterForce({\n        lat: focusedMapLocation.latitude,\n        lng: focusedMapLocation.longitude\n      }));\n    } else {\n      let queryMapBound = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n\n      if (!_isNil(queryMapBound)) {\n        dispatch(setMapBounds(buildKakaoMapBounds(queryMapBound)));\n      } else {\n        resetMap();\n      }\n    }\n  }, [focusedMapLocation, swLat, swLng, neLat, neLng, mapLoading]);\n\n  const resetMap = () => {\n    setLevel(initMapLevel);\n    dispatch(setMapLevel(initMapLevel));\n    dispatch(setMapCenterForce({\n      lat: process.env.REACT_APP_INIT_MAP_CENTER_LAT,\n      lng: process.env.REACT_APP_INIT_MAP_CENTER_LNG\n    }));\n    dispatch(setMapBounds([]));\n  };\n\n  const toggleGeolocation = () => {\n    dispatch(loadingGeoLocationStarted());\n\n    if (enableGeolocation) {\n      dispatch(loadingGeoLocationFail()); //call force failed to disable geolocation for a moment\n\n      setTimeout(() => {\n        dispatch(loadingGeoLocationSuccess());\n      }, 500); //delay for geo marker unmount\n    } else {\n      setTimeout(() => {\n        dispatch(loadingGeoLocationSuccess());\n      }, 200); //delay for user wait\n    }\n  };\n\n  const showDevInfo = () => {\n    initVH();\n    const dimention = getWindowDimensions();\n    const vh = getWindowDimensions().height * 0.01;\n    alert(\"width : \" + dimention.width + \"\\n\" + \"height : \" + dimention.height + \"\\n\" + \"vh : \" + vh + \"\\n\" + \"document.body.scrollHeight : \" + document.body.scrollHeight + \"\\n\" + \"document.body.clientHeight : \" + document.body.clientHeight + \"\\n\" + \"document.documentElement.scrollHeight : \" + document.documentElement.scrollHeight + \"\\n\" + \"document.documentElement.clientHeight : \" + document.documentElement.clientHeight + \"\\n\" + \"document.height : \" + document.height + \"\\n\");\n  }; //every map center changed, save changed center and bounds for search current location\n\n\n  const centerChange = map => {\n    let center = map.getCenter();\n    dispatch(setMapCenterChange({\n      lat: center.getLat(),\n      lng: center.getLng()\n    }));\n  };\n\n  const boundChange = map => {\n    let bounds = map.getBounds();\n    let sw = bounds.getSouthWest(),\n        ne = bounds.getNorthEast();\n    dispatch(setMapBoundChanged({\n      swLat: sw.getLat(),\n      swLng: sw.getLng(),\n      neLat: ne.getLat(),\n      neLng: ne.getLng()\n    }));\n  };\n\n  const zoomChange = map => {\n    dispatch(setMapLevel(map.getLevel()));\n  };\n\n  const geoLocationCenterChanged = () => {\n    return !isSimilarLocation({\n      lat: changedCenterLat,\n      lng: changedCenterLng\n    }, {\n      lat: geoLocationCenterLat,\n      lng: geoLocationCenterLng\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(Kakao, {\n    className: props.className,\n    options: Object.assign(initialOptions, {\n      zoom: props.zoom\n    }, {\n      bounds\n    }, {\n      boundMargins: mapBoundMargins\n    }, {\n      refreshCenter\n    }),\n    onZoomChange: debounce(zoomChange, 100),\n    onCenterChange: debounce(centerChange, 100),\n    onBoundsChange: debounce(boundChange, 100),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, props.children, enableGeolocation ? React.createElement(GeoLocationMarker, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }) : null), React.createElement(\"button\", {\n    style: {\n      backgroundImage: geolocationLoading ? \"\" : 'url(' + MapImages + ')',\n      backgroundSize: \"453px 434px\",\n      color: geolocationLoading ? \"\" : \"transparent\"\n    },\n    className: \"button geo-button\" + (isMobile ? \" mobile\" : \"\") + (enableGeolocation && !geoLocationCenterChanged() ? \" active\" : \"\"),\n    onClick: toggleGeolocation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, geolocationLoading ? React.createElement(FontAwesomeIcon, {\n    className: \"fast-spin\",\n    icon: faSpinner,\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }) : null), process.env.REACT_APP_ENV !== 'real' ? React.createElement(\"button\", {\n    className: \"button dev-button\" + (isMobile ? \" mobile\" : \"\"),\n    id: \"showDevInfo\",\n    onClick: showDevInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faInfo,\n    size: \"1x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  })) : null, React.createElement(SearchCurrentButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }), React.createElement(SearchWideLocationButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  })));\n};\n\nconst Loading = props => {\n  const _useSelector4 = useSelector(state => state.map),\n        mapLoading = _useSelector4.mapLoading,\n        errorMapLoading = _useSelector4.errorMapLoading;\n\n  const loadingText = () => errorMapLoading ? \"지도를 불러오는데에 실패했습니다. 일시적인 문제일 수 있습니다. 페이지를 다시 로딩 해 주세요.\" : \"Loading...\";\n\n  const loadingSpinner = () => errorMapLoading ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faTimesCircle,\n    size: \"3x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  })) : React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(MapLoadingSpinner, {\n    color: MAP_LOADING_SPINNER,\n    loading: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }));\n\n  return React.createElement(LoadingOverlay, {\n    fadeSpeed: 200,\n    className: \"loading-overlay box column is-full kakao-map is-fullheight-with-navbar-tablet is-fullheight-with-navbar-mobile is-paddingless\",\n    active: mapLoading || errorMapLoading,\n    spinner: loadingSpinner(),\n    text: loadingText(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default MoobeKakaoMap;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/MoobeKakaoMap.jsx"],"names":["React","useEffect","useState","LoadingOverlay","FontAwesomeIcon","faInfo","faSpinner","faTimesCircle","withJs","withKakaoMap","KakaoMap","useDispatch","useSelector","isMobile","MapImages","loadingGeoLocationFail","loadingGeoLocationStarted","loadingGeoLocationSuccess","setMapBoundChanged","setMapBounds","setMapCenterChange","setMapCenterForce","setMapLevel","MapLoadingSpinner","isEmpty","_isEmpty","isNil","_isNil","GeoLocationMarker","MAP_LOADING_SPINNER","SearchCurrentButton","debounce","buildKakaoMapBounds","buildMoobeMapBounds","isSimilarLocation","queryString","useLocation","useParams","SearchWideLocationButton","getWindowDimensions","initVH","initMapLevel","Kakao","process","env","REACT_APP_KAKAO_API_KEY","MoobeKakaoMap","props","dispatch","state","mapLocation","focusedMapLocation","contentDetail","location","parse","search","swLat","swLng","neLat","neLng","queryMapLevel","level","map","centerLat","centerLng","refreshCenter","mapLoading","changedCenterLat","changedCenterLng","enableGeolocation","geoLocationCenterLat","geoLocationCenterLng","geolocationLoading","mapLevel","mapBounds","mapBoundMargins","bounds","setBounds","setLevel","initialOptions","lat","lng","zoom","REACT_APP_INIT_MAP_CENTER_LAT","REACT_APP_INIT_MAP_CENTER_LNG","store","latitude","longitude","queryMapBound","resetMap","toggleGeolocation","setTimeout","showDevInfo","dimention","vh","height","alert","width","document","body","scrollHeight","clientHeight","documentElement","centerChange","center","getCenter","getLat","getLng","boundChange","getBounds","sw","getSouthWest","ne","getNorthEast","zoomChange","getLevel","geoLocationCenterChanged","className","Object","assign","boundMargins","children","backgroundImage","backgroundSize","color","REACT_APP_ENV","Loading","errorMapLoading","loadingText","loadingSpinner"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport LoadingOverlay from \"react-loading-overlay\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faInfo, faSpinner, faTimesCircle} from '@fortawesome/free-solid-svg-icons'\nimport withJs from \"components/common/map/WithJs\";\nimport withKakaoMap from \"components/common/map/WithKakaoMap\";\nimport KakaoMap from \"components/common/map/KakaoMap\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {isMobile} from \"react-device-detect\";\nimport MapImages from \"assets/images/map_images.png\"\nimport {\n    loadingGeoLocationFail,\n    loadingGeoLocationStarted,\n    loadingGeoLocationSuccess,\n    setMapBoundChanged,\n    setMapBounds,\n    setMapCenterChange,\n    setMapCenterForce,\n    setMapLevel\n} from \"data/redux/action/map\";\nimport {MapLoadingSpinner} from \"components/common/layout/PresentUtil\";\nimport {isEmpty as _isEmpty, isNil as _isNil} from 'lodash'\nimport GeoLocationMarker from \"components/common/map/GeoLocationMarker\";\nimport {MAP_LOADING_SPINNER} from \"assets/styles/colors\";\nimport SearchCurrentButton from \"components/common/map/SearchCurrentButton\";\nimport debounce from 'lodash.debounce';\nimport {buildKakaoMapBounds, buildMoobeMapBounds, isSimilarLocation} from \"data/util\";\nimport queryString from \"query-string\";\nimport {useLocation, useParams} from \"react-router\";\nimport SearchWideLocationButton from \"components/common/map/SearchWideLocationButton\";\nimport {getWindowDimensions, initVH} from \"components/common/layout/WindowDimensions\";\nimport {initMapLevel} from \"data/redux/reducers/mapReducer\";\n\nconst Kakao = withJs(\n    `//dapi.kakao.com/v2/maps/sdk.js?appkey=${\n        process.env.REACT_APP_KAKAO_API_KEY\n    }&libraries=services,clusterer,drawing&autoload=false`\n)(withKakaoMap(KakaoMap));\n\n\nconst MoobeKakaoMap = (props) => {\n    const dispatch = useDispatch();\n    const {focusedMapLocation} = useSelector(state => state.mapLocation)\n    const {contentDetail} = useSelector(state => state.contentDetail)\n    const location = useLocation();\n    const {swLat, swLng, neLat, neLng, level: queryMapLevel} = queryString.parse(location.search);\n    const {\n        centerLat,\n        centerLng,\n        refreshCenter,\n        mapLoading,\n        changedCenterLat,\n        changedCenterLng,\n        enableGeolocation,\n        geoLocationCenterLat,\n        geoLocationCenterLng,\n        geolocationLoading,\n        mapLevel,\n        mapBounds, mapBoundMargins} = useSelector(state => state.map);\n    const [bounds, setBounds] = useState(buildKakaoMapBounds(buildMoobeMapBounds(swLat, swLng, neLat, neLng)));\n    const [level, setLevel] = useState(queryMapLevel);\n    const initialOptions = {\n        lat: centerLat,\n        lng: centerLng,\n        level: level,\n        refreshCenter: refreshCenter,\n        zoom: props.zoom ? props.zoom : \"TOPRIGHT\"\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(loadingGeoLocationFail()); // reset geolocation\n        }\n    }, []);\n\n    //mapBounds의 변화에 따라 지도의 bound를 바꿈\n    useEffect(() => {\n        if (_isNil(mapBounds)) {\n            setLevel(initMapLevel);\n            dispatch(setMapLevel(initMapLevel));\n            dispatch(setMapCenterForce({lat: process.env.REACT_APP_INIT_MAP_CENTER_LAT, lng:process.env.REACT_APP_INIT_MAP_CENTER_LNG}));\n            dispatch(setMapBounds([]));\n        } else if(_isEmpty(mapBounds)) {\n            //pass\n        } else {\n            setBounds(mapBounds)\n        }\n    }, [mapBounds])\n\n    useEffect(() => {\n        setLevel(mapLevel);\n    }, [mapLevel])\n\n    //content를 선택 하면 지도 center를 옮기고 이전화면으로 돌아왔을때 mapBound설정.\n    useEffect(() => {\n        if (isMobile || mapLoading) {\n            return ;\n        }\n        if (!_isEmpty(contentDetail)) {\n            if (mapLevel > 6) {\n                dispatch(setMapLevel(6))\n            }\n            dispatch(setMapCenterForce({lat: contentDetail.store.latitude, lng: contentDetail.store.longitude}));\n        } else {\n            let queryMapBound = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n            if (!_isNil(queryMapBound)) {\n                dispatch(setMapBounds(buildKakaoMapBounds(queryMapBound)));\n            } else {\n                resetMap()\n            }\n        }\n    }, [contentDetail,swLat, swLng, neLat, neLng, mapLoading])\n\n    //content를 선택했다가 이전화면으로 돌아왔을때 mapBound설정.\n    useEffect(() => {\n        if (!isMobile || mapLoading) {\n            return ;\n        }\n        if (!_isEmpty(focusedMapLocation)) {\n            if (mapLevel > 5) {\n                dispatch(setMapLevel(5))\n            }\n            dispatch(setMapCenterForce({lat: focusedMapLocation.latitude, lng: focusedMapLocation.longitude}));\n        } else {\n            let queryMapBound = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n            if (!_isNil(queryMapBound)) {\n                dispatch(setMapBounds(buildKakaoMapBounds(queryMapBound)));\n            } else {\n                resetMap();\n            }\n        }\n    }, [focusedMapLocation,swLat, swLng, neLat, neLng, mapLoading])\n\n    const resetMap = () => {\n        setLevel(initMapLevel);\n        dispatch(setMapLevel(initMapLevel));\n        dispatch(setMapCenterForce({lat: process.env.REACT_APP_INIT_MAP_CENTER_LAT, lng:process.env.REACT_APP_INIT_MAP_CENTER_LNG}));\n        dispatch(setMapBounds([]));\n    }\n\n    const toggleGeolocation = () => {\n        dispatch(loadingGeoLocationStarted());\n        if(enableGeolocation) {\n            dispatch(loadingGeoLocationFail()); //call force failed to disable geolocation for a moment\n            setTimeout(() => {\n                dispatch(loadingGeoLocationSuccess());\n            }, 500) //delay for geo marker unmount\n        } else {\n            setTimeout(() => {\n                dispatch(loadingGeoLocationSuccess());\n            }, 200) //delay for user wait\n        }\n    };\n\n    const showDevInfo = () => {\n        initVH()\n        const dimention = getWindowDimensions()\n\n        const vh = getWindowDimensions().height * 0.01;\n        alert(\"width : \" + dimention.width + \"\\n\" +\n            \"height : \" + dimention.height + \"\\n\" +\n            \"vh : \" + vh + \"\\n\" +\n            \"document.body.scrollHeight : \" + document.body.scrollHeight + \"\\n\" +\n            \"document.body.clientHeight : \" + document.body.clientHeight + \"\\n\" +\n            \"document.documentElement.scrollHeight : \" + document.documentElement.scrollHeight + \"\\n\" +\n            \"document.documentElement.clientHeight : \" + document.documentElement.clientHeight + \"\\n\" +\n            \"document.height : \" + document.height + \"\\n\"\n        )\n    }\n\n    //every map center changed, save changed center and bounds for search current location\n    const centerChange = (map) => {\n        let center = map.getCenter();\n        dispatch(setMapCenterChange({lat: center.getLat(), lng: center.getLng()}));\n    };\n\n    const boundChange = (map) => {\n        let bounds = map.getBounds();\n        let sw = bounds.getSouthWest(), ne = bounds.getNorthEast();\n        dispatch(setMapBoundChanged({swLat: sw.getLat(), swLng: sw.getLng(), neLat: ne.getLat(), neLng: ne.getLng()}));\n    };\n\n    const zoomChange = (map) => {\n        dispatch(setMapLevel(map.getLevel()));\n    }\n\n    const geoLocationCenterChanged = () => {\n        return !isSimilarLocation({lat: changedCenterLat, lng: changedCenterLng}, {lat: geoLocationCenterLat, lng: geoLocationCenterLng})\n    }\n    return (\n        <>\n            <Loading>\n                <Kakao className={props.className}\n                        options={Object.assign(initialOptions, {zoom: props.zoom}, {bounds}, {boundMargins: mapBoundMargins}, {refreshCenter})}\n                        onZoomChange={debounce(zoomChange, 100)}\n                        onCenterChange={debounce(centerChange, 100)}\n                        onBoundsChange={debounce(boundChange, 100)}>\n                    {props.children}\n                    {enableGeolocation ? <GeoLocationMarker/> : null}\n                </Kakao>\n                <button style={{\n                    backgroundImage: geolocationLoading ? \"\" : 'url(' + MapImages + ')',\n                    backgroundSize: \"453px 434px\",\n                    color: geolocationLoading ? \"\" : \"transparent\"\n                }} className={\"button geo-button\" + (isMobile ? \" mobile\" : \"\") + (enableGeolocation && !geoLocationCenterChanged() ? \" active\" : \"\")} onClick={toggleGeolocation}>\n                    {geolocationLoading ? <FontAwesomeIcon className=\"fast-spin\" icon={faSpinner} size={\"lg\"}/> : null }\n                </button>\n                {process.env.REACT_APP_ENV !== 'real'\n                ? <button className={\"button dev-button\"  + (isMobile ? \" mobile\" : \"\")} id={\"showDevInfo\"} onClick={showDevInfo} >\n                        <FontAwesomeIcon icon={faInfo} size={\"1x\"} />\n                    </button>\n                : null}\n                <SearchCurrentButton />\n                <SearchWideLocationButton />\n\n            </Loading>\n        </>\n    )\n};\n\nconst Loading = (props) => {\n    const {mapLoading, errorMapLoading} = useSelector(state => state.map);\n    const loadingText = () => errorMapLoading ? \"지도를 불러오는데에 실패했습니다. 일시적인 문제일 수 있습니다. 페이지를 다시 로딩 해 주세요.\" : \"Loading...\";\n    const loadingSpinner = () => errorMapLoading ? <h2><FontAwesomeIcon icon={faTimesCircle} size='3x' /></h2>\n        : <h6><MapLoadingSpinner color={MAP_LOADING_SPINNER} loading={true} /></h6>;\n    return (\n        <LoadingOverlay\n            fadeSpeed={200}\n            className={\"loading-overlay box column is-full kakao-map is-fullheight-with-navbar-tablet is-fullheight-with-navbar-mobile is-paddingless\"}\n            active={mapLoading || errorMapLoading}\n            spinner={loadingSpinner()}\n            text={loadingText()}\n        >\n            {props.children}\n        </LoadingOverlay>\n    )\n};\n\nexport default MoobeKakaoMap;"]},"metadata":{},"sourceType":"module"}