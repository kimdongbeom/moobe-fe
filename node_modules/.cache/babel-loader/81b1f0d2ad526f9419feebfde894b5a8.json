{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/MoobeKakaoMap.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport LoadingOverlay from \"react-loading-overlay\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfo, faSpinner, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport withJs from \"components/common/map/WithJs\";\nimport withKakaoMap from \"components/common/map/WithKakaoMap\";\nimport KakaoMap from \"components/common/map/KakaoMap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { isMobile } from \"react-device-detect\";\nimport MapImages from \"assets/images/map_images.png\";\nimport { loadingGeoLocationFail, loadingGeoLocationStarted, loadingGeoLocationSuccess, loadingMapStarted, setMapBounds, setMapCenter, setMapCenterChange, setMapCenterForce, setMapLevel } from \"data/redux/action/map\";\nimport { MapLoadingSpinner } from \"components/common/layout/PresentUtil\";\nimport { isEmpty as _isEmpty, isNil as _isNil } from 'lodash';\nimport GeoLocationMarker from \"components/common/map/GeoLocationMarker\";\nimport { MAP_GEOLOCATION_DISABLE, MAP_GEOLOCATION_ENABLE, MAP_LOADING_SPINNER } from \"assets/styles/colors\";\nimport SearchCurrentButton from \"components/common/map/SearchCurrentButton\";\nimport debounce from 'lodash.debounce';\nimport { buildMoobeMapBounds, isSimilarLocation, unpackMoobeMapBounds } from \"data/util\";\nimport queryString from \"query-string\";\nimport { useLocation } from \"react-router\";\nimport SearchWideLocationButton from \"components/common/map/SearchWideLocationButton\";\nimport { getWindowDimensions, initVH } from \"components/common/layout/WindowDimensions\";\nconst Kakao = withJs(`//dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.REACT_APP_KAKAO_API_KEY}&libraries=services,clusterer,drawing&autoload=false`)(withKakaoMap(KakaoMap));\n\nconst MoobeKakaoMap = props => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(state => state.mapLocation),\n        mapLocationList = _useSelector.mapLocationList,\n        focusedMapLocation = _useSelector.focusedMapLocation;\n\n  const _useSelector2 = useSelector(state => state.contentDetail),\n        contentDetail = _useSelector2.contentDetail;\n\n  const _queryString$parse = queryString.parse(useLocation().search),\n        swLat = _queryString$parse.swLat,\n        swLng = _queryString$parse.swLng,\n        neLat = _queryString$parse.neLat,\n        neLng = _queryString$parse.neLng;\n\n  const _useSelector3 = useSelector(state => state.map),\n        centerLat = _useSelector3.centerLat,\n        centerLng = _useSelector3.centerLng,\n        refreshCenter = _useSelector3.refreshCenter,\n        mapLoading = _useSelector3.mapLoading,\n        changedCenterLat = _useSelector3.changedCenterLat,\n        changedCenterLng = _useSelector3.changedCenterLng,\n        enableGeolocation = _useSelector3.enableGeolocation,\n        geoLocationCenterLat = _useSelector3.geoLocationCenterLat,\n        geoLocationCenterLng = _useSelector3.geoLocationCenterLng,\n        geolocationLoading = _useSelector3.geolocationLoading;\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        bounds = _useState2[0],\n        setBounds = _useState2[1];\n\n  const initialOptions = {\n    lat: centerLat,\n    lng: centerLng,\n    level: process.env.REACT_APP_INIT_MAP_LEVEL || 4,\n    refreshCenter: refreshCenter,\n    zoom: props.zoom ? props.zoom : \"TOPRIGHT\"\n  }; // 초기 center, query param으로 부터 lat,lng받아서 map bounds 셋팅, map loading start\n\n  useEffect(() => {\n    dispatch(setMapCenter({\n      lat: process.env.REACT_APP_INIT_MAP_LAT,\n      lng: process.env.REACT_APP_INIT_MAP_LNG\n    }));\n    dispatch(setMapBounds({\n      swLat,\n      swLng,\n      neLat,\n      neLng\n    }));\n    dispatch(loadingMapStarted());\n    setBounds(buildKakaoMapBounds(buildMoobeMapBounds(swLat, swLng, neLat, neLng)));\n    return () => {\n      dispatch(loadingGeoLocationFail()); // reset geolocation\n    };\n  }, []); //query에 bounds정보가 없을 때 map location list 데이터로 bound를 결정.\n\n  useEffect(() => {\n    if (_isNil(buildMoobeMapBounds(swLat, swLng, neLat, neLng)) && !_isEmpty(mapLocationList)) {\n      setBounds(mapLocationList.map(mapLocation => {\n        return {\n          lat: mapLocation.latitude,\n          lng: mapLocation.longitude\n        };\n      }));\n    }\n  }, [mapLocationList]); //desktop: map이 loading되어 있고 content detail이 load될 때 content의 center로 map center change\n\n  useEffect(() => {\n    if (!isMobile && !_isEmpty(contentDetail) && !mapLoading) {\n      dispatch(setMapCenterForce({\n        lat: contentDetail.store.latitude,\n        lng: contentDetail.store.longitude\n      }));\n    }\n  }, [contentDetail, mapLoading]); //mobile: map이 loading되어 있고 focusedMapLocation이 load될 때 location center로 map center change\n\n  useEffect(() => {\n    if (isMobile && !_isEmpty(focusedMapLocation) && !mapLoading) {\n      dispatch(setMapCenterForce({\n        lat: focusedMapLocation.latitude,\n        lng: focusedMapLocation.longitude\n      }));\n    }\n  }, [focusedMapLocation, mapLoading]);\n\n  const buildKakaoMapBounds = moobeMapBounds => {\n    const unpackedBounds = unpackMoobeMapBounds(moobeMapBounds);\n\n    if (!_isNil(unpackedBounds)) {\n      return [{\n        lat: unpackedBounds.swLat,\n        lng: unpackedBounds.swLng\n      }, {\n        lat: unpackedBounds.neLat,\n        lng: unpackedBounds.neLng\n      }];\n    } else {\n      return null;\n    }\n  };\n\n  const toggleGeolocation = () => {\n    dispatch(loadingGeoLocationStarted());\n\n    if (enableGeolocation) {\n      dispatch(loadingGeoLocationFail()); //call force failed to disable geolocation for a moment\n\n      setTimeout(() => {\n        dispatch(loadingGeoLocationSuccess());\n      }, 500); //delay for geo marker unmount\n    } else {\n      setTimeout(() => {\n        dispatch(loadingGeoLocationSuccess());\n      }, 200); //delay for user wait\n    }\n  };\n\n  const showDevInfo = () => {\n    initVH();\n    const dimention = getWindowDimensions();\n    const vh = getWindowDimensions().height * 0.01;\n    alert(\"width : \" + dimention.width + \"\\n\" + \"height : \" + dimention.height + \"\\n\" + \"vh : \" + vh + \"\\n\" + \"document.body.scrollHeight : \" + document.body.scrollHeight + \"\\n\" + \"document.body.clientHeight : \" + document.body.clientHeight + \"\\n\" + \"document.documentElement.scrollHeight : \" + document.documentElement.scrollHeight + \"\\n\" + \"document.documentElement.clientHeight : \" + document.documentElement.clientHeight + \"\\n\" + \"document.height : \" + document.height + \"\\n\");\n  }; //every map center changed, save changed center and bounds for search current location\n\n\n  const centerChange = map => {\n    let center = map.getCenter();\n    dispatch(setMapCenterChange({\n      lat: center.getLat(),\n      lng: center.getLng()\n    }));\n  };\n\n  const boundChange = map => {\n    let bounds = map.getBounds();\n    let sw = bounds.getSouthWest(),\n        ne = bounds.getNorthEast();\n    dispatch(setMapBounds({\n      swLat: sw.getLat(),\n      swLng: sw.getLng(),\n      neLat: ne.getLat(),\n      neLng: ne.getLng()\n    }));\n  };\n\n  const zoomChange = map => {\n    dispatch(setMapLevel(map.getLevel()));\n  };\n\n  const geoLocationCenterChanged = () => {\n    return !isSimilarLocation({\n      lat: changedCenterLat,\n      lng: changedCenterLng\n    }, {\n      lat: geoLocationCenterLat,\n      lng: geoLocationCenterLng\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(Kakao, {\n    className: props.className,\n    options: Object.assign(initialOptions, {\n      zoom: props.zoom\n    }, {\n      bounds\n    }, {\n      refreshCenter\n    }),\n    onZoomChange: debounce(zoomChange, 100),\n    onCenterChange: debounce(centerChange, 100),\n    onBoundsChange: debounce(boundChange, 100),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, props.children, enableGeolocation ? React.createElement(GeoLocationMarker, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }) : null), React.createElement(\"button\", {\n    style: {\n      backgroundImage: geolocationLoading ? \"\" : 'url(' + MapImages + ')',\n      backgroundSize: \"453px 434px\",\n      color: geolocationLoading ? \"\" : \"transparent\"\n    },\n    className: \"button geo-button\" + (isMobile ? \" mobile\" : \"\") + (enableGeolocation && !geoLocationCenterChanged() ? \" active\" : \"\"),\n    onClick: toggleGeolocation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, geolocationLoading ? React.createElement(FontAwesomeIcon, {\n    className: \"fast-spin\",\n    icon: faSpinner,\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }) : null), process.env.REACT_APP_ENV !== 'real' ? React.createElement(\"button\", {\n    className: \"button dev-button\" + (isMobile ? \" mobile\" : \"\"),\n    id: \"showDevInfo\",\n    onClick: showDevInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faInfo,\n    size: \"1x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  })) : null, React.createElement(SearchCurrentButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }), React.createElement(SearchWideLocationButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  })));\n};\n\nconst Loading = props => {\n  const _useSelector4 = useSelector(state => state.map),\n        mapLoading = _useSelector4.mapLoading,\n        errorMapLoading = _useSelector4.errorMapLoading;\n\n  const loadingText = () => errorMapLoading ? \"지도를 불러오는데에 실패했습니다. 일시적인 문제일 수 있습니다. 페이지를 다시 로딩 해 주세요.\" : \"Loading...\";\n\n  const loadingSpinner = () => errorMapLoading ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faTimesCircle,\n    size: \"3x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  })) : React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(MapLoadingSpinner, {\n    color: MAP_LOADING_SPINNER,\n    loading: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }));\n\n  return React.createElement(LoadingOverlay, {\n    fadeSpeed: 200,\n    className: \"loading-overlay box column is-full kakao-map is-fullheight-with-navbar-tablet is-fullheight-with-navbar-mobile is-paddingless\",\n    active: mapLoading || errorMapLoading,\n    spinner: loadingSpinner(),\n    text: loadingText(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default MoobeKakaoMap;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/MoobeKakaoMap.jsx"],"names":["React","useEffect","useState","LoadingOverlay","FontAwesomeIcon","faInfo","faSpinner","faTimesCircle","withJs","withKakaoMap","KakaoMap","useDispatch","useSelector","isMobile","MapImages","loadingGeoLocationFail","loadingGeoLocationStarted","loadingGeoLocationSuccess","loadingMapStarted","setMapBounds","setMapCenter","setMapCenterChange","setMapCenterForce","setMapLevel","MapLoadingSpinner","isEmpty","_isEmpty","isNil","_isNil","GeoLocationMarker","MAP_GEOLOCATION_DISABLE","MAP_GEOLOCATION_ENABLE","MAP_LOADING_SPINNER","SearchCurrentButton","debounce","buildMoobeMapBounds","isSimilarLocation","unpackMoobeMapBounds","queryString","useLocation","SearchWideLocationButton","getWindowDimensions","initVH","Kakao","process","env","REACT_APP_KAKAO_API_KEY","MoobeKakaoMap","props","dispatch","state","mapLocation","mapLocationList","focusedMapLocation","contentDetail","parse","search","swLat","swLng","neLat","neLng","map","centerLat","centerLng","refreshCenter","mapLoading","changedCenterLat","changedCenterLng","enableGeolocation","geoLocationCenterLat","geoLocationCenterLng","geolocationLoading","bounds","setBounds","initialOptions","lat","lng","level","REACT_APP_INIT_MAP_LEVEL","zoom","REACT_APP_INIT_MAP_LAT","REACT_APP_INIT_MAP_LNG","buildKakaoMapBounds","latitude","longitude","store","moobeMapBounds","unpackedBounds","toggleGeolocation","setTimeout","showDevInfo","dimention","vh","height","alert","width","document","body","scrollHeight","clientHeight","documentElement","centerChange","center","getCenter","getLat","getLng","boundChange","getBounds","sw","getSouthWest","ne","getNorthEast","zoomChange","getLevel","geoLocationCenterChanged","className","Object","assign","children","backgroundImage","backgroundSize","color","REACT_APP_ENV","Loading","errorMapLoading","loadingText","loadingSpinner"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport LoadingOverlay from \"react-loading-overlay\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faInfo, faSpinner, faTimesCircle} from '@fortawesome/free-solid-svg-icons'\nimport withJs from \"components/common/map/WithJs\";\nimport withKakaoMap from \"components/common/map/WithKakaoMap\";\nimport KakaoMap from \"components/common/map/KakaoMap\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {isMobile} from \"react-device-detect\";\nimport MapImages from \"assets/images/map_images.png\"\nimport {\n    loadingGeoLocationFail,\n    loadingGeoLocationStarted,\n    loadingGeoLocationSuccess,\n    loadingMapStarted,\n    setMapBounds,\n    setMapCenter,\n    setMapCenterChange,\n    setMapCenterForce,\n    setMapLevel\n} from \"data/redux/action/map\";\nimport {MapLoadingSpinner} from \"components/common/layout/PresentUtil\";\nimport {isEmpty as _isEmpty, isNil as _isNil} from 'lodash'\nimport GeoLocationMarker from \"components/common/map/GeoLocationMarker\";\nimport {MAP_GEOLOCATION_DISABLE, MAP_GEOLOCATION_ENABLE, MAP_LOADING_SPINNER} from \"assets/styles/colors\";\nimport SearchCurrentButton from \"components/common/map/SearchCurrentButton\";\nimport debounce from 'lodash.debounce';\nimport {buildMoobeMapBounds, isSimilarLocation, unpackMoobeMapBounds} from \"data/util\";\nimport queryString from \"query-string\";\nimport {useLocation} from \"react-router\";\nimport SearchWideLocationButton from \"components/common/map/SearchWideLocationButton\";\nimport {getWindowDimensions, initVH} from \"components/common/layout/WindowDimensions\";\n\nconst Kakao = withJs(\n    `//dapi.kakao.com/v2/maps/sdk.js?appkey=${\n        process.env.REACT_APP_KAKAO_API_KEY\n    }&libraries=services,clusterer,drawing&autoload=false`\n)(withKakaoMap(KakaoMap));\n\nconst MoobeKakaoMap = (props) => {\n    const dispatch = useDispatch();\n    const {mapLocationList, focusedMapLocation} = useSelector(state => state.mapLocation)\n    const {contentDetail} = useSelector(state => state.contentDetail)\n    const {swLat, swLng, neLat, neLng} = queryString.parse(useLocation().search);\n    const {\n        centerLat,\n        centerLng,\n        refreshCenter,\n        mapLoading,\n        changedCenterLat,\n        changedCenterLng,\n        enableGeolocation,\n        geoLocationCenterLat,\n        geoLocationCenterLng,\n        geolocationLoading} = useSelector(state => state.map);\n    const [bounds, setBounds] = useState(null);\n    const initialOptions = {\n        lat: centerLat,\n        lng: centerLng,\n        level: process.env.REACT_APP_INIT_MAP_LEVEL || 4,\n        refreshCenter: refreshCenter,\n        zoom: props.zoom ? props.zoom : \"TOPRIGHT\"\n    };\n\n    // 초기 center, query param으로 부터 lat,lng받아서 map bounds 셋팅, map loading start\n    useEffect(() => {\n        dispatch(setMapCenter({lat: process.env.REACT_APP_INIT_MAP_LAT, lng:process.env.REACT_APP_INIT_MAP_LNG}));\n        dispatch(setMapBounds({swLat, swLng, neLat, neLng}));\n        dispatch(loadingMapStarted());\n        setBounds(buildKakaoMapBounds(buildMoobeMapBounds(swLat, swLng, neLat, neLng)));\n        return () => {\n            dispatch(loadingGeoLocationFail()); // reset geolocation\n        }\n    }, []);\n\n\n\n    //query에 bounds정보가 없을 때 map location list 데이터로 bound를 결정.\n    useEffect(() => {\n        if (_isNil(buildMoobeMapBounds(swLat, swLng, neLat, neLng)) && !_isEmpty(mapLocationList)) {\n            setBounds(mapLocationList.map(mapLocation => {\n                return {lat: mapLocation.latitude, lng: mapLocation.longitude}\n            }));\n        }\n    }, [mapLocationList]);\n\n    //desktop: map이 loading되어 있고 content detail이 load될 때 content의 center로 map center change\n    useEffect(() => {\n        if (!isMobile && !_isEmpty(contentDetail) && !mapLoading) {\n            dispatch(setMapCenterForce({lat: contentDetail.store.latitude, lng: contentDetail.store.longitude}));\n        }\n    }, [contentDetail, mapLoading]);\n\n    //mobile: map이 loading되어 있고 focusedMapLocation이 load될 때 location center로 map center change\n    useEffect(() => {\n        if (isMobile && !_isEmpty(focusedMapLocation) && !mapLoading) {\n            dispatch(setMapCenterForce({lat: focusedMapLocation.latitude, lng: focusedMapLocation.longitude}));\n        }\n    }, [focusedMapLocation, mapLoading]);\n\n    const buildKakaoMapBounds = (moobeMapBounds) => {\n        const unpackedBounds = unpackMoobeMapBounds(moobeMapBounds);\n        if (!_isNil(unpackedBounds)) {\n            return [{lat: unpackedBounds.swLat, lng: unpackedBounds.swLng}, {lat: unpackedBounds.neLat, lng: unpackedBounds.neLng}];\n        } else {\n            return null;\n        }\n    };\n\n    const toggleGeolocation = () => {\n        dispatch(loadingGeoLocationStarted());\n        if(enableGeolocation) {\n            dispatch(loadingGeoLocationFail()); //call force failed to disable geolocation for a moment\n            setTimeout(() => {\n                dispatch(loadingGeoLocationSuccess());\n            }, 500) //delay for geo marker unmount\n        } else {\n            setTimeout(() => {\n                dispatch(loadingGeoLocationSuccess());\n            }, 200) //delay for user wait\n\n        }\n    };\n\n    const showDevInfo = () => {\n        initVH()\n        const dimention = getWindowDimensions()\n\n        const vh = getWindowDimensions().height * 0.01;\n        alert(\"width : \" + dimention.width + \"\\n\" +\n            \"height : \" + dimention.height + \"\\n\" +\n            \"vh : \" + vh + \"\\n\" +\n            \"document.body.scrollHeight : \" + document.body.scrollHeight + \"\\n\" +\n            \"document.body.clientHeight : \" + document.body.clientHeight + \"\\n\" +\n            \"document.documentElement.scrollHeight : \" + document.documentElement.scrollHeight + \"\\n\" +\n            \"document.documentElement.clientHeight : \" + document.documentElement.clientHeight + \"\\n\" +\n            \"document.height : \" + document.height + \"\\n\"\n\n        )\n    }\n\n    //every map center changed, save changed center and bounds for search current location\n    const centerChange = (map) => {\n        let center = map.getCenter();\n        dispatch(setMapCenterChange({lat: center.getLat(), lng: center.getLng()}));\n    };\n\n    const boundChange = (map) => {\n        let bounds = map.getBounds();\n        let sw = bounds.getSouthWest(), ne = bounds.getNorthEast();\n        dispatch(setMapBounds({swLat: sw.getLat(), swLng: sw.getLng(), neLat: ne.getLat(), neLng: ne.getLng()}));\n    };\n\n    const zoomChange = (map) => {\n        dispatch(setMapLevel(map.getLevel()));\n    }\n\n    const geoLocationCenterChanged = () => {\n        return !isSimilarLocation({lat: changedCenterLat, lng: changedCenterLng}, {lat: geoLocationCenterLat, lng: geoLocationCenterLng})\n    }\n    return (\n        <>\n            <Loading>\n                <Kakao className={props.className}\n                        options={Object.assign(initialOptions, {zoom: props.zoom}, {bounds}, {refreshCenter})}\n                        onZoomChange={debounce(zoomChange, 100)}\n                        onCenterChange={debounce(centerChange, 100)}\n                        onBoundsChange={debounce(boundChange, 100)}>\n                    {props.children}\n                    {enableGeolocation ? <GeoLocationMarker/> : null}\n                </Kakao>\n                <button style={{\n                    backgroundImage: geolocationLoading ? \"\" : 'url(' + MapImages + ')',\n                    backgroundSize: \"453px 434px\",\n                    color: geolocationLoading ? \"\" : \"transparent\"\n                }} className={\"button geo-button\" + (isMobile ? \" mobile\" : \"\") + (enableGeolocation && !geoLocationCenterChanged() ? \" active\" : \"\")} onClick={toggleGeolocation}>\n                    {geolocationLoading ? <FontAwesomeIcon className=\"fast-spin\" icon={faSpinner} size={\"lg\"}/> : null }\n                </button>\n                {process.env.REACT_APP_ENV !== 'real'\n                ? <button className={\"button dev-button\"  + (isMobile ? \" mobile\" : \"\")} id={\"showDevInfo\"} onClick={showDevInfo} >\n                        <FontAwesomeIcon icon={faInfo} size={\"1x\"} />\n                    </button>\n                : null}\n                <SearchCurrentButton />\n                <SearchWideLocationButton />\n\n            </Loading>\n        </>\n    )\n};\n\nconst Loading = (props) => {\n    const {mapLoading, errorMapLoading} = useSelector(state => state.map);\n    const loadingText = () => errorMapLoading ? \"지도를 불러오는데에 실패했습니다. 일시적인 문제일 수 있습니다. 페이지를 다시 로딩 해 주세요.\" : \"Loading...\";\n    const loadingSpinner = () => errorMapLoading ? <h2><FontAwesomeIcon icon={faTimesCircle} size='3x' /></h2>\n        : <h6><MapLoadingSpinner color={MAP_LOADING_SPINNER} loading={true} /></h6>;\n    return (\n        <LoadingOverlay\n            fadeSpeed={200}\n            className={\"loading-overlay box column is-full kakao-map is-fullheight-with-navbar-tablet is-fullheight-with-navbar-mobile is-paddingless\"}\n            active={mapLoading || errorMapLoading}\n            spinner={loadingSpinner()}\n            text={loadingText()}\n        >\n            {props.children}\n        </LoadingOverlay>\n    )\n};\n\nexport default MoobeKakaoMap;"]},"metadata":{},"sourceType":"module"}