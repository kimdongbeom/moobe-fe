{"ast":null,"code":"import _objectSpread from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { MapContext } from \"components/common/map/KakaoMap\";\nimport { MarkerClustererContext } from \"components/common/map/MarkerClusterer\";\nimport { Observable } from \"rxjs\";\n\nconst Marker = props => {\n  const _useContext = useContext(MapContext),\n        kakao = _useContext.kakao,\n        map = _useContext.map;\n\n  const _useContext2 = useContext(MarkerClustererContext),\n        clusterer = _useContext2.clusterer;\n\n  const _useState = useState({\n    marker: null,\n    kakao,\n    map,\n    clusterer\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const setMarkerImage = (marker, image) => {\n    const url = image.url,\n          width = image.width,\n          height = image.height;\n    const markerImage = new kakao.maps.MarkerImage(url, new kakao.maps.Size(width, height));\n    marker.setImage(markerImage);\n  };\n\n  const delayObservable = delay => {\n    return new Observable(observer => {\n      setTimeout(() => {\n        observer.next(delay);\n        observer.complete();\n      }, delay);\n    });\n  };\n\n  useEffect(() => {\n    const onClick = props.onClick,\n          onMouseOver = props.onMouseOver,\n          onMouseOut = props.onMouseOut,\n          options = props.options,\n          delay = props.delay;\n    const lat = options.lat,\n          lng = options.lng,\n          image = options.image;\n    const marker = new kakao.maps.Marker({\n      position: new kakao.maps.LatLng(lat, lng)\n    });\n    if (image) setMarkerImage(marker, image);\n    const subscription = delayObservable(delay ? delay : 0).subscribe({\n      next(x) {},\n\n      error(err) {},\n\n      complete() {\n        clusterer ? clusterer.addMarker(marker) : marker.setMap(map);\n      }\n\n    });\n\n    const mouseOver = () => {\n      if (onMouseOver) onMouseOver(marker);\n    };\n\n    const mouseOut = () => {\n      if (onMouseOut) onMouseOut(marker);\n    };\n\n    const click = () => {\n      if (onClick) onClick(marker);\n    };\n\n    kakao.maps.event.addListener(marker, \"mouseover\", mouseOver);\n    kakao.maps.event.addListener(marker, \"mouseout\", mouseOut);\n    kakao.maps.event.addListener(marker, \"click\", click);\n    setState(_objectSpread({}, state, {\n      marker\n    }));\n    return () => {\n      subscription.unsubscribe();\n      marker.setMap(null);\n      kakao.maps.event.removeListener(marker, \"mouseover\", mouseOver);\n      kakao.maps.event.removeListener(marker, \"mouseout\", mouseOut);\n      kakao.maps.event.removeListener(marker, \"click\", click);\n      clusterer.removeMarker(marker);\n    };\n  }, []); //\n  // useEffect(() => {\n  //     const { lat, lng } = props.options;\n  //     const { marker } = state;\n  //     if (marker === null) return;\n  //     const position = new kakao.maps.LatLng(lat, lng);\n  //     marker.setPosition(position);\n  // }, [props.options.lat, props.options.lng]);\n  //\n  // useEffect(() => {\n  //     const { image } = props.options;\n  //     const { marker } = state;\n  //     if (marker === null || image === null) return;\n  //     if (image) setMarkerImage(marker, image);\n  // }, [props.options.image]);\n\n  return null;\n};\n\nexport default Marker;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/Marker.jsx"],"names":["React","useContext","useState","useEffect","MapContext","MarkerClustererContext","Observable","Marker","props","kakao","map","clusterer","marker","state","setState","setMarkerImage","image","url","width","height","markerImage","maps","MarkerImage","Size","setImage","delayObservable","delay","observer","setTimeout","next","complete","onClick","onMouseOver","onMouseOut","options","lat","lng","position","LatLng","subscription","subscribe","x","error","err","addMarker","setMap","mouseOver","mouseOut","click","event","addListener","unsubscribe","removeListener","removeMarker"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { MapContext} from \"components/common/map/KakaoMap\";\nimport { MarkerClustererContext} from \"components/common/map/MarkerClusterer\";\nimport { Observable } from \"rxjs\";\n\nconst Marker = props => {\n    const { kakao, map } = useContext(MapContext);\n    const { clusterer } = useContext(MarkerClustererContext);\n    const [state, setState] = useState({\n        marker: null,\n        kakao,\n        map,\n        clusterer\n    });\n\n    const setMarkerImage = (marker, image) => {\n        const { url, width, height } = image;\n        const markerImage = new kakao.maps.MarkerImage(\n            url,\n            new kakao.maps.Size(width, height)\n        );\n        marker.setImage(markerImage);\n    };\n\n    const delayObservable = delay => {\n        return new Observable(observer => {\n            setTimeout(() => {\n                observer.next(delay);\n                observer.complete();\n            }, delay);\n        });\n    };\n\n    useEffect(() => {\n        const { onClick, onMouseOver, onMouseOut, options, delay } = props;\n        const { lat, lng, image } = options;\n        const marker = new kakao.maps.Marker({\n            position: new kakao.maps.LatLng(lat, lng)\n        });\n        if (image) setMarkerImage(marker, image);\n\n        const subscription = delayObservable(delay ? delay : 0).subscribe({\n            next(x) {},\n            error(err) {},\n            complete() {\n                clusterer ? clusterer.addMarker(marker) : marker.setMap(map);}\n        });\n\n        const mouseOver = () => { if (onMouseOver) onMouseOver(marker);};\n        const mouseOut = () => { if (onMouseOut) onMouseOut(marker);};\n        const click = () => { if (onClick) onClick(marker);};\n        kakao.maps.event.addListener(marker, \"mouseover\", mouseOver);\n        kakao.maps.event.addListener(marker, \"mouseout\", mouseOut);\n        kakao.maps.event.addListener(marker, \"click\", click);\n\n        setState({ ...state, marker });\n        return () => {\n            subscription.unsubscribe();\n            marker.setMap(null);\n            kakao.maps.event.removeListener(marker, \"mouseover\", mouseOver);\n            kakao.maps.event.removeListener(marker, \"mouseout\", mouseOut);\n            kakao.maps.event.removeListener(marker, \"click\", click);\n            clusterer.removeMarker(marker)\n        };\n    }, []);\n    //\n    // useEffect(() => {\n    //     const { lat, lng } = props.options;\n    //     const { marker } = state;\n    //     if (marker === null) return;\n    //     const position = new kakao.maps.LatLng(lat, lng);\n    //     marker.setPosition(position);\n    // }, [props.options.lat, props.options.lng]);\n    //\n    // useEffect(() => {\n    //     const { image } = props.options;\n    //     const { marker } = state;\n    //     if (marker === null || image === null) return;\n    //     if (image) setMarkerImage(marker, image);\n    // }, [props.options.image]);\n\n    return null;\n};\n\nexport default Marker;"]},"metadata":{},"sourceType":"module"}