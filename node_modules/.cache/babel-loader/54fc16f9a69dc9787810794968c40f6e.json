{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/comment/CommentList.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport uuid from \"react-uuid\";\nimport { isEmpty as _isEmpty } from \"lodash\";\nimport { fetchMoobeComment, fetchYoutubeComment, resetComment } from \"../../../redux/action/comment\";\nimport { LoadingSpinner } from \"../layout/PresentUtil\";\nimport VisibilitySensor from \"react-visibility-sensor\";\nimport Comment from \"./Comment\";\nimport CommentInput from \"./CommentInput\";\n\nconst CommentList = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        activeMoobeComment = _useState2[0],\n        setActiveMoobeComment = _useState2[1];\n\n  const _useSelector = useSelector(state => state.comment),\n        moobeCommentList = _useSelector.moobeCommentList,\n        moobeCommentPage = _useSelector.moobeCommentPage,\n        moobeCommentMaxPage = _useSelector.moobeCommentMaxPage,\n        moobeCommentLoading = _useSelector.moobeCommentLoading,\n        youtubeCommentList = _useSelector.youtubeCommentList,\n        youtubeCommentPage = _useSelector.youtubeCommentPage,\n        youtubeCommentMaxPage = _useSelector.youtubeCommentMaxPage,\n        youtubeCommentLoading = _useSelector.youtubeCommentLoading;\n\n  const _useSelector2 = useSelector(state => state.content),\n        activeContent = _useSelector2.activeContent;\n\n  const getComment = () => activeMoobeComment ? moobeCommentList : youtubeCommentList;\n\n  const getCommentLoading = () => activeMoobeComment ? moobeCommentLoading : youtubeCommentLoading;\n\n  const dispatch = useDispatch();\n\n  const fetchComment = () => {\n    if (!getCommentLoading()) {\n      dispatch(activeMoobeComment ? fetchMoobeComment(moobeCommentPage, moobeCommentMaxPage) : fetchYoutubeComment(youtubeCommentPage, youtubeCommentMaxPage));\n    }\n  };\n\n  useEffect(() => {\n    dispatch(resetComment());\n  }, [activeContent]);\n  useEffect(() => {\n    if (_isEmpty(getComment())) {\n      fetchComment();\n    }\n  }, [activeMoobeComment]);\n\n  const loadComment = visible => visible ? fetchComment() : null;\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"column is-full has-border-top-width-1 is-paddingless\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"column tabs is-toggle is-fullwidth is-marginless\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    className: \"is-size-5 has-padding-left-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"\\uB313\\uAE00\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: activeMoobeComment ? \"\" : \"is-active\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    onClick: () => setActiveMoobeComment(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Youtube\"))), React.createElement(\"li\", {\n    className: activeMoobeComment ? \"is-active\" : \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    onClick: () => setActiveMoobeComment(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Moobe\"))))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, activeMoobeComment ? React.createElement(CommentInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }) : null, getComment().map(comment => React.createElement(Comment, {\n    key: uuid(),\n    comment: comment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })))), React.createElement(VisibilitySensor, {\n    onChange: loadComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"has-min-height-100 has-margin-bottom-25\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    color: \"#000\",\n    loading: getCommentLoading(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }))));\n};\n\nexport default CommentList;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/comment/CommentList.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","uuid","isEmpty","_isEmpty","fetchMoobeComment","fetchYoutubeComment","resetComment","LoadingSpinner","VisibilitySensor","Comment","CommentInput","CommentList","activeMoobeComment","setActiveMoobeComment","state","comment","moobeCommentList","moobeCommentPage","moobeCommentMaxPage","moobeCommentLoading","youtubeCommentList","youtubeCommentPage","youtubeCommentMaxPage","youtubeCommentLoading","content","activeContent","getComment","getCommentLoading","dispatch","fetchComment","loadComment","visible","map"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport uuid from \"react-uuid\";\nimport {isEmpty as _isEmpty} from \"lodash\";\nimport {fetchMoobeComment, fetchYoutubeComment, resetComment} from \"../../../redux/action/comment\";\nimport {LoadingSpinner} from \"../layout/PresentUtil\";\nimport VisibilitySensor from \"react-visibility-sensor\";\nimport Comment from \"./Comment\";\nimport CommentInput from \"./CommentInput\";\n\nconst CommentList = () => {\n    const [activeMoobeComment, setActiveMoobeComment] = useState(false);\n    const {moobeCommentList, moobeCommentPage, moobeCommentMaxPage, moobeCommentLoading,\n        youtubeCommentList, youtubeCommentPage, youtubeCommentMaxPage, youtubeCommentLoading} = useSelector(state => state.comment);\n    const {activeContent} = useSelector(state => state.content);\n    const getComment = () => activeMoobeComment ? moobeCommentList : youtubeCommentList;\n    const getCommentLoading = () => activeMoobeComment ? moobeCommentLoading : youtubeCommentLoading;\n    const dispatch = useDispatch();\n\n    const fetchComment = () => {\n        if (!getCommentLoading()) {\n            dispatch(activeMoobeComment ? fetchMoobeComment(moobeCommentPage, moobeCommentMaxPage): fetchYoutubeComment(youtubeCommentPage, youtubeCommentMaxPage))\n        }\n    };\n\n    useEffect(() => {\n        dispatch(resetComment());\n    }, [activeContent])\n\n    useEffect(() => {\n        if (_isEmpty(getComment())) {\n            fetchComment();\n        }\n    }, [activeMoobeComment]);\n\n    const loadComment = (visible) => visible ? fetchComment() : null;\n\n    return (\n        <>\n            <div className=\"column is-full has-border-top-width-1 is-paddingless\">\n\n                <div className=\"column tabs is-toggle is-fullwidth is-marginless\">\n                    <strong className=\"is-size-5 has-padding-left-5\">댓글</strong>\n                    <ul>\n                        <li className={activeMoobeComment? \"\": \"is-active\"}><a onClick={() => setActiveMoobeComment(false)}><strong>Youtube</strong></a></li>\n                        <li className={activeMoobeComment ? \"is-active\" : \"\"}><a onClick={() => setActiveMoobeComment(true)}><strong>Moobe</strong></a></li>\n                    </ul>\n                </div>\n                <div>\n                    {activeMoobeComment ? <CommentInput /> : null}\n                    {getComment().map(comment => <Comment key={uuid()} comment={comment} />)}\n                </div>\n            </div>\n            <VisibilitySensor onChange={loadComment}>\n                <div className=\"has-min-height-100 has-margin-bottom-25\">\n                    <LoadingSpinner color={\"#000\"} loading={getCommentLoading()} />\n                </div>\n            </VisibilitySensor>\n        </>\n    )\n};\n\nexport default CommentList;"]},"metadata":{},"sourceType":"module"}