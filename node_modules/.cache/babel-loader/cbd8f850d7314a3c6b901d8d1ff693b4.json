{"ast":null,"code":"import { getContent, getContents, searchContents, updateContentLike } from \"data/api\";\nimport { isEmpty as _isEmpty } from \"lodash\";\nimport ApiResponse from \"data/redux/model/ApiResponse\";\nexport const CONTENT_RESET_CONTENT_DATA = 'CONTENT/RESET_CONTENT_DATA';\nexport const CONTENT_SET_CONTENT_LOADING = 'CONTENT/SET_CONTENT_LOADING';\nexport const CONTENT_UPDATE_CONTENT_UPDATED = 'CONTENT/UPDATE_CONTENT_UPDATED';\nexport const CONTENT_FETCH_CONTENT_STARTED = 'CONTENT/FETCH_CONTENT_STARTED';\nexport const CONTENT_FETCH_CONTENT_FINISHED = 'CONTENT/FETCH_CONTENT_FINISHED';\nexport const CONTENT_FETCH_CONTENT_SUCCESS = 'CONTENT/FETCH_CONTENT_SUCCESS';\nexport const CONTENT_FETCH_CONTENT_ERROR = 'CONTENT/FETCH_CONTENT_ERROR';\nexport const CONTENT_FETCH_CONTENT_LIKE_STARTED = 'CONTENT/FETCH_CONTENT_LIKE_STARTED';\nexport const CONTENT_FETCH_CONTENT_LIKE_FINISHED = 'CONTENT/FETCH_CONTENT_LIKE_FINISHED';\nexport const CONTENT_FETCH_CONTENT_LIKE_SUCCESS = 'CONTENT/FETCH_CONTENT_LIKE_SUCCESS';\nexport const CONTENT_FETCH_CONTENT_LIKE_ERROR = 'CONTENT/FETCH_CONTENT_LIKE_ERROR';\nexport const CONTENT_SET_PAGE_NUM = 'CONTENT/SET_PAGE_NUM';\nexport const SEARCH_TYPE_TOTAL = \"total\";\nexport const SEARCH_TYPE_TITLE = \"title\";\nexport const SEARCH_TYPE_STORE = \"store\";\nexport const SEARCH_TYPE_TAG = \"tag\";\nexport const SEARCH_TYPE_ADDRESS = \"address\";\nexport const searchTypeList = [{\n  \"title\": \"전체\",\n  \"type\": SEARCH_TYPE_TOTAL\n}, {\n  \"title\": \"제목\",\n  \"type\": SEARCH_TYPE_TITLE\n}, {\n  \"title\": \"가게 이름\",\n  \"type\": SEARCH_TYPE_STORE\n}, {\n  \"title\": \"태그\",\n  \"type\": SEARCH_TYPE_TAG\n}, {\n  \"title\": \"주소\",\n  \"type\": SEARCH_TYPE_ADDRESS\n}];\nexport const getSearchType = searchType => {\n  return searchTypeList.find(type => type.type == searchType);\n};\nexport const fetchContentList = (channelId, query, searchType, mapBounds = null, pageNum = 1, isAppend = false, callback = null) => {\n  return dispatch => {\n    if (!isAppend) {\n      dispatch(resetContentData());\n    }\n\n    dispatch(fetchContentStarted());\n    let getContentApi;\n\n    if (_isEmpty(query)) {\n      getContentApi = getContents(channelId, mapBounds, pageNum);\n    } else {\n      getContentApi = searchContents(query, searchType, channelId, mapBounds, pageNum);\n    }\n\n    return getContentApi.then(response => {\n      dispatch(fetchContentSuccess({\n        data: response.data,\n        pageNum: pageNum,\n        isAppend: isAppend\n      }));\n      dispatch(fetchContent(channelId));\n    }).catch(error => {\n      dispatch(fetchContentFail(error));\n    }).finally(() => {\n      dispatch(fetchContentFinished());\n      if (callback) callback(channelId);\n    });\n  };\n};\nexport const fetchContent = (channelId, contentId) => {\n  if (!contentId) {\n    return dispatch => {\n      /*do Nothing*/\n    };\n  }\n\n  return dispatch => {\n    dispatch(fetchContentStarted()); //TODO set active channel to get content\n\n    return getContent(contentId, channelId).then(response => {\n      dispatch(fetchContentSuccess({\n        data: response.data,\n        isAppend: true,\n        isUnit: true\n      }));\n    }).catch(error => {\n      dispatch(fetchContentFail(error));\n    }).finally(() => {\n      dispatch(fetchContentFinished());\n    });\n  };\n};\nexport const fetchUpdateContentLike = (email, contentId, like, successCallback, failedCallback) => {\n  return dispatch => {\n    dispatch(fetchContentLikeStarted());\n    return updateContentLike(email, contentId, like).then(response => {\n      let apiResponse = new ApiResponse(response.data);\n\n      if (apiResponse.isSuccess) {\n        dispatch(fetchContentLikeSuccess());\n        if (successCallback) successCallback();\n      } else {\n        dispatch(fetchContentLikeFail());\n        if (failedCallback) failedCallback();\n      }\n    }).catch(error => {\n      dispatch(fetchContentLikeFail());\n      if (failedCallback) failedCallback();\n    }).finally(() => {\n      dispatch(fetchContentLikeFinished());\n    });\n  };\n};\nexport const resetContentData = () => {\n  return {\n    type: CONTENT_RESET_CONTENT_DATA\n  };\n};\nexport const setContentLoading = contentLoading => {\n  return {\n    type: CONTENT_SET_CONTENT_LOADING,\n    contentLoading\n  };\n};\nexport const fetchContentStarted = () => {\n  return {\n    type: CONTENT_FETCH_CONTENT_STARTED\n  };\n};\nexport const fetchContentFinished = () => {\n  return {\n    type: CONTENT_FETCH_CONTENT_FINISHED\n  };\n};\nexport const fetchContentSuccess = data => {\n  return {\n    type: CONTENT_FETCH_CONTENT_SUCCESS,\n    data\n  };\n};\nexport const fetchContentFail = err => {\n  return {\n    type: CONTENT_FETCH_CONTENT_ERROR,\n    err\n  };\n};\nexport const fetchContentLikeStarted = () => {\n  return {\n    type: CONTENT_FETCH_CONTENT_LIKE_STARTED\n  };\n};\nexport const fetchContentLikeFinished = () => {\n  return {\n    type: CONTENT_FETCH_CONTENT_LIKE_FINISHED\n  };\n};\nexport const fetchContentLikeSuccess = () => {\n  return {\n    type: CONTENT_FETCH_CONTENT_LIKE_SUCCESS\n  };\n};\nexport const fetchContentLikeFail = err => {\n  return {\n    type: CONTENT_FETCH_CONTENT_LIKE_ERROR,\n    err\n  };\n};\nexport const updateContentUpdated = (content, updatedValue) => {\n  return {\n    type: CONTENT_UPDATE_CONTENT_UPDATED,\n    data: {\n      id: content.id,\n      updatedValue: updatedValue\n    }\n  };\n};\nexport const setPageNum = pageNum => {\n  return {\n    type: CONTENT_SET_PAGE_NUM,\n    pageNum\n  };\n};","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/redux/action/content.js"],"names":["getContent","getContents","searchContents","updateContentLike","isEmpty","_isEmpty","ApiResponse","CONTENT_RESET_CONTENT_DATA","CONTENT_SET_CONTENT_LOADING","CONTENT_UPDATE_CONTENT_UPDATED","CONTENT_FETCH_CONTENT_STARTED","CONTENT_FETCH_CONTENT_FINISHED","CONTENT_FETCH_CONTENT_SUCCESS","CONTENT_FETCH_CONTENT_ERROR","CONTENT_FETCH_CONTENT_LIKE_STARTED","CONTENT_FETCH_CONTENT_LIKE_FINISHED","CONTENT_FETCH_CONTENT_LIKE_SUCCESS","CONTENT_FETCH_CONTENT_LIKE_ERROR","CONTENT_SET_PAGE_NUM","SEARCH_TYPE_TOTAL","SEARCH_TYPE_TITLE","SEARCH_TYPE_STORE","SEARCH_TYPE_TAG","SEARCH_TYPE_ADDRESS","searchTypeList","getSearchType","searchType","find","type","fetchContentList","channelId","query","mapBounds","pageNum","isAppend","callback","dispatch","resetContentData","fetchContentStarted","getContentApi","then","response","fetchContentSuccess","data","fetchContent","catch","error","fetchContentFail","finally","fetchContentFinished","contentId","isUnit","fetchUpdateContentLike","email","like","successCallback","failedCallback","fetchContentLikeStarted","apiResponse","isSuccess","fetchContentLikeSuccess","fetchContentLikeFail","fetchContentLikeFinished","setContentLoading","contentLoading","err","updateContentUpdated","content","updatedValue","id","setPageNum"],"mappings":"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","sourcesContent":["import {getContent, getContents, searchContents, updateContentLike} from \"data/api\";\nimport {isEmpty as _isEmpty} from \"lodash\";\nimport ApiResponse from \"data/redux/model/ApiResponse\";\n\nexport const CONTENT_RESET_CONTENT_DATA = 'CONTENT/RESET_CONTENT_DATA';\nexport const CONTENT_SET_CONTENT_LOADING = 'CONTENT/SET_CONTENT_LOADING';\n\nexport const CONTENT_UPDATE_CONTENT_UPDATED = 'CONTENT/UPDATE_CONTENT_UPDATED';\n\nexport const CONTENT_FETCH_CONTENT_STARTED = 'CONTENT/FETCH_CONTENT_STARTED';\nexport const CONTENT_FETCH_CONTENT_FINISHED = 'CONTENT/FETCH_CONTENT_FINISHED';\nexport const CONTENT_FETCH_CONTENT_SUCCESS = 'CONTENT/FETCH_CONTENT_SUCCESS';\nexport const CONTENT_FETCH_CONTENT_ERROR = 'CONTENT/FETCH_CONTENT_ERROR';\nexport const CONTENT_FETCH_CONTENT_LIKE_STARTED = 'CONTENT/FETCH_CONTENT_LIKE_STARTED';\nexport const CONTENT_FETCH_CONTENT_LIKE_FINISHED = 'CONTENT/FETCH_CONTENT_LIKE_FINISHED';\nexport const CONTENT_FETCH_CONTENT_LIKE_SUCCESS = 'CONTENT/FETCH_CONTENT_LIKE_SUCCESS';\nexport const CONTENT_FETCH_CONTENT_LIKE_ERROR = 'CONTENT/FETCH_CONTENT_LIKE_ERROR';\nexport const CONTENT_SET_PAGE_NUM = 'CONTENT/SET_PAGE_NUM';\n\nexport const SEARCH_TYPE_TOTAL = \"total\"\nexport const SEARCH_TYPE_TITLE = \"title\"\nexport const SEARCH_TYPE_STORE = \"store\"\nexport const SEARCH_TYPE_TAG = \"tag\"\nexport const SEARCH_TYPE_ADDRESS = \"address\"\nexport const searchTypeList = [\n    { \"title\": \"전체\", \"type\": SEARCH_TYPE_TOTAL },\n    { \"title\": \"제목\", \"type\": SEARCH_TYPE_TITLE },\n    { \"title\": \"가게 이름\", \"type\": SEARCH_TYPE_STORE },\n    { \"title\": \"태그\", \"type\": SEARCH_TYPE_TAG },\n    { \"title\": \"주소\", \"type\": SEARCH_TYPE_ADDRESS },\n]\n\nexport const getSearchType = (searchType) => {\n    return searchTypeList.find((type) => type.type == searchType);\n}\n\nexport const fetchContentList = (channelId, query, searchType, mapBounds=null, pageNum=1, isAppend=false, callback=null) => {\n    return (dispatch) => {\n        if (!isAppend) {\n            dispatch(resetContentData());\n        }\n        dispatch(fetchContentStarted());\n        let getContentApi;\n        if (_isEmpty(query)) {\n            getContentApi = getContents(channelId, mapBounds, pageNum);\n        } else {\n            getContentApi = searchContents(query, searchType, channelId, mapBounds, pageNum);\n        }\n        return getContentApi.then(response => {\n                dispatch(fetchContentSuccess({data: response.data, pageNum: pageNum, isAppend: isAppend}))\n                dispatch(fetchContent(channelId))\n            }).catch((error)  => {\n                dispatch(fetchContentFail(error))\n            }).finally(() => {\n                dispatch(fetchContentFinished());\n                if(callback) callback(channelId);\n        });\n    }\n};\n\nexport const fetchContent = (channelId, contentId) => {\n    if (!contentId) {\n        return (dispatch) => {/*do Nothing*/};\n    }\n    return (dispatch) => {\n        dispatch(fetchContentStarted());\n        //TODO set active channel to get content\n        return getContent(contentId, channelId).then(response => {\n            dispatch(fetchContentSuccess({data: response.data, isAppend: true, isUnit: true}))\n        }).catch((error)  => {\n            dispatch(fetchContentFail(error))\n        }).finally(() => {\n            dispatch(fetchContentFinished())\n        });\n    }\n}\n\nexport const fetchUpdateContentLike = (email, contentId, like, successCallback, failedCallback) => {\n    return (dispatch) => {\n        dispatch(fetchContentLikeStarted());\n        return updateContentLike(email, contentId, like).then(response => {\n            let apiResponse = new ApiResponse(response.data)\n            if (apiResponse.isSuccess) {\n                dispatch(fetchContentLikeSuccess());\n                if (successCallback) successCallback();\n            } else {\n                dispatch(fetchContentLikeFail());\n                if (failedCallback) failedCallback();\n            }\n        }).catch((error) => {\n            dispatch(fetchContentLikeFail());\n            if (failedCallback) failedCallback()\n        }).finally(() => {\n            dispatch(fetchContentLikeFinished());\n        })\n    }\n};\n\nexport const resetContentData = () => {\n    return {\n        type: CONTENT_RESET_CONTENT_DATA\n    }\n};\n\nexport const setContentLoading = (contentLoading) => {\n    return {\n        type: CONTENT_SET_CONTENT_LOADING,\n        contentLoading\n    }\n};\n\nexport const fetchContentStarted = () => {\n    return {\n        type: CONTENT_FETCH_CONTENT_STARTED\n    }\n};\n\nexport const fetchContentFinished = () => {\n    return {\n        type: CONTENT_FETCH_CONTENT_FINISHED\n    }\n};\n\nexport const fetchContentSuccess = (data) => {\n    return {\n        type: CONTENT_FETCH_CONTENT_SUCCESS,\n        data\n    }\n};\n\nexport const fetchContentFail = (err) => {\n    return {\n        type: CONTENT_FETCH_CONTENT_ERROR,\n        err\n    }\n};\n\nexport const fetchContentLikeStarted = () => {\n    return {\n        type: CONTENT_FETCH_CONTENT_LIKE_STARTED\n    }\n};\n\nexport const fetchContentLikeFinished = () => {\n    return {\n        type: CONTENT_FETCH_CONTENT_LIKE_FINISHED\n    }\n};\n\nexport const fetchContentLikeSuccess = () => {\n    return {\n        type: CONTENT_FETCH_CONTENT_LIKE_SUCCESS\n    }\n};\n\nexport const fetchContentLikeFail = (err) => {\n    return {\n        type: CONTENT_FETCH_CONTENT_LIKE_ERROR,\n        err\n    }\n};\n\nexport const updateContentUpdated = (content, updatedValue) => {\n    return {\n        type: CONTENT_UPDATE_CONTENT_UPDATED,\n        data: {\n            id: content.id,\n            updatedValue: updatedValue\n        }\n    }\n}\n\nexport const setPageNum = (pageNum) => {\n    return {\n        type: CONTENT_SET_PAGE_NUM,\n        pageNum\n    }\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}