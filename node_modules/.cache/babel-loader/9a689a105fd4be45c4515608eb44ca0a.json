{"ast":null,"code":"var _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/ClusterMarker.jsx\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport MarkerClusterer, { MarkerClustererStyles } from \"components/common/map/MarkerClusterer\";\nimport Marker from \"components/common/map/Marker\";\nimport { setMapBounds, setSearchOnBoundChange } from \"data/redux/action/map\";\nimport { resetClusterLocationData } from \"data/redux/action/clusterLocation\";\nimport { mapBoundsMargin } from \"data/redux/reducers/mapReducer\";\n\nconst ClusterMarker = ({\n  mapClusterLocation,\n  renderFocusedMarker,\n  renderSingleMarker\n}) => {\n  const _useSelector = useSelector(state => state.map),\n        map = _useSelector.map;\n\n  const _useSelector2 = useSelector(state => state.mapLocation),\n        focusedMapLocation = _useSelector2.focusedMapLocation;\n\n  const dispatch = useDispatch();\n\n  const getClusterStyle = () => {\n    let clusterStyle;\n\n    if (mapClusterLocation.markerListSize > 150) {\n      clusterStyle = Object.assign({}, MarkerClustererStyles[2]);\n    } else if (mapClusterLocation.markerListSize > 50) {\n      clusterStyle = Object.assign({}, MarkerClustererStyles[1]);\n    } else {\n      clusterStyle = Object.assign({}, MarkerClustererStyles[0]);\n    }\n\n    return [clusterStyle];\n  };\n\n  const getText = () => {\n    return [mapClusterLocation.markerListSize];\n  };\n\n  const onClusterClick = cluster => {\n    if (map) {\n      const latLngList = mapClusterLocation.locationList.map(m => {\n        return {\n          lat: m.latitude,\n          lng: m.longitude\n        };\n      });\n      dispatch(setSearchOnBoundChange(true));\n      dispatch(resetClusterLocationData());\n      dispatch(setMapBounds(latLngList, mapBoundsMargin));\n    }\n  };\n\n  return React.createElement(React.Fragment, null, mapClusterLocation.markerListSize == 1 ? renderSingleMarker(mapClusterLocation) : React.createElement(MarkerClusterer, {\n    options: {\n      minLevel: 0,\n      disableClickZoom: true,\n      minClusterSize: 1,\n      styles: getClusterStyle(),\n      texts: getText()\n    },\n    onClusterClick: onClusterClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Marker, {\n    options: {\n      lat: mapClusterLocation.centerLatitude,\n      lng: mapClusterLocation.centerLongitude,\n      content: mapClusterLocation.markerListSize\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), focusedMapLocation && mapClusterLocation.locationIdList.includes(focusedMapLocation.id) ? renderFocusedMarker(mapClusterLocation.findLocation(focusedMapLocation.id)) : null));\n};\n\nexport default ClusterMarker;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/ClusterMarker.jsx"],"names":["React","useDispatch","useSelector","MarkerClusterer","MarkerClustererStyles","Marker","setMapBounds","setSearchOnBoundChange","resetClusterLocationData","mapBoundsMargin","ClusterMarker","mapClusterLocation","renderFocusedMarker","renderSingleMarker","state","map","mapLocation","focusedMapLocation","dispatch","getClusterStyle","clusterStyle","markerListSize","Object","assign","getText","onClusterClick","cluster","latLngList","locationList","m","lat","latitude","lng","longitude","minLevel","disableClickZoom","minClusterSize","styles","texts","centerLatitude","centerLongitude","content","locationIdList","includes","id","findLocation"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport MarkerClusterer, {MarkerClustererStyles} from \"components/common/map/MarkerClusterer\";\nimport Marker from \"components/common/map/Marker\";\nimport {setMapBounds, setSearchOnBoundChange} from \"data/redux/action/map\";\nimport {resetClusterLocationData} from \"data/redux/action/clusterLocation\";\nimport {mapBoundsMargin} from \"data/redux/reducers/mapReducer\";\n\nconst ClusterMarker = ({mapClusterLocation, renderFocusedMarker, renderSingleMarker}) => {\n    const {map} = useSelector(state => state.map);\n    const {focusedMapLocation} = useSelector(state => state.mapLocation);\n    const dispatch = useDispatch();\n\n    const getClusterStyle = () => {\n        let clusterStyle;\n        if (mapClusterLocation.markerListSize > 150) {\n            clusterStyle = Object.assign({}, MarkerClustererStyles[2]);\n        } else if (mapClusterLocation.markerListSize > 50) {\n            clusterStyle = Object.assign({}, MarkerClustererStyles[1]);\n        } else {\n            clusterStyle = Object.assign({}, MarkerClustererStyles[0]);\n        }\n        return [clusterStyle]\n    }\n\n    const getText = () => {\n        return [mapClusterLocation.markerListSize];\n    }\n\n    const onClusterClick = (cluster) => {\n        if (map) {\n            const latLngList = mapClusterLocation.locationList.map(m => {\n                return {lat: m.latitude, lng: m.longitude}\n            });\n            dispatch(setSearchOnBoundChange(true));\n            dispatch(resetClusterLocationData());\n            dispatch(setMapBounds(latLngList, mapBoundsMargin));\n        }\n    }\n\n    return (\n        <>\n            {mapClusterLocation.markerListSize == 1\n                ? renderSingleMarker(mapClusterLocation)\n                : <MarkerClusterer options={{\n                    minLevel: 0,\n                    disableClickZoom: true,\n                    minClusterSize: 1,\n                    styles: getClusterStyle(),\n                    texts: getText(),\n                }} onClusterClick={onClusterClick}>\n                    <Marker options={{lat: mapClusterLocation.centerLatitude, lng: mapClusterLocation.centerLongitude, content: mapClusterLocation.markerListSize,}} />\n                    {focusedMapLocation && mapClusterLocation.locationIdList.includes(focusedMapLocation.id)\n                        ? renderFocusedMarker(mapClusterLocation.findLocation(focusedMapLocation.id))\n                        : null\n                    }\n                </MarkerClusterer>\n            }\n        </>\n    )\n}\n\nexport default ClusterMarker;"]},"metadata":{},"sourceType":"module"}