{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/desktop/map/DesktopKakaoMap.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport MoobeKakaoMap from \"components/common/map/MoobeKakaoMap\";\nimport MarkerClusterer, { MarkerClustererCalculator, MarkerClustererStyles } from \"components/common/map/MarkerClusterer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport MarkerImageSm from \"assets/images/marker_arrow_sm.svg\";\nimport MarkerImagePin from \"assets/images/marker_arrow_pin.svg\";\nimport MarkerImagePinFavorite from 'assets/images/marker_arrow_pin_favorite.png';\nimport CustomOverlay from \"components/common/map/CustomOverlay\";\nimport DetailContentOverlay from \"components/common/map/DetailContentOverlay\";\nimport { isEmpty as _isEmpty, isNil as _isNil } from 'lodash';\nimport { buildContentPath } from \"data/util\";\nimport { useHistory, useLocation } from \"react-router\";\nimport Marker from \"components/common/map/Marker\";\nimport { setShowOverlayContentDetail } from \"data/redux/action/contentDetail\";\nimport { setFocusedLocation } from \"data/redux/action/location\";\nimport MapLocationOverlay from \"components/common/map/MapLocationOverlay\";\nimport { forceCleanMarkerClusterer, setSearchOnBoundChange } from \"data/redux/action/map\";\nimport MapLocation from \"data/redux/model/MapLocation\";\nimport ClusterMarker from \"components/common/map/ClusterMarker\";\n\nconst DesktopKakaoMap = () => {\n  const _useSelector = useSelector(state => state.mapClusterLocation),\n        mapClusterLocationList = _useSelector.mapClusterLocationList,\n        mapClusterLocationMarkerSize = _useSelector.mapClusterLocationMarkerSize,\n        mapClusterLocationMarkerList = _useSelector.mapClusterLocationMarkerList;\n\n  const _useSelector2 = useSelector(state => state.mapLocation),\n        mapLocationList = _useSelector2.mapLocationList,\n        mapLocationLoading = _useSelector2.mapLocationLoading,\n        focusedMapLocation = _useSelector2.focusedMapLocation;\n\n  const _useSelector3 = useSelector(state => state.map),\n        map = _useSelector3.map,\n        mapLevel = _useSelector3.mapLevel,\n        mapLoading = _useSelector3.mapLoading,\n        mapBounds = _useSelector3.mapBounds;\n\n  const _useSelector4 = useSelector(state => state.content),\n        contentLoading = _useSelector4.contentLoading;\n\n  const _useSelector5 = useSelector(state => state.contentDetail),\n        contentDetail = _useSelector5.contentDetail,\n        showOverlayContentDetail = _useSelector5.showOverlayContentDetail;\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const getLocationListWithoutDetailContent = () => {\n    if (!_isNil(contentDetail)) {\n      return mapLocationList.filter(location => location.id != contentDetail.id);\n    } else {\n      return mapLocationList;\n    }\n  };\n\n  const getClusterLocationListWithoutDetailContent = () => {\n    if (!_isNil(contentDetail)) {\n      return mapClusterLocationMarkerList.filter(location => location.id != contentDetail.id);\n    } else {\n      return mapClusterLocationMarkerList;\n    }\n  };\n\n  const onClusterClick = cluster => {\n    if (map) {\n      const bounds = new kakao.maps.LatLngBounds();\n      cluster.getMarkers().map(m => {\n        bounds.extend(new kakao.maps.LatLng(m.mapLocation.latitude, m.mapLocation.longitude));\n      });\n      dispatch(forceCleanMarkerClusterer());\n      dispatch(setSearchOnBoundChange(true));\n      map.setBounds(bounds, 0, 0, 0, 0);\n    }\n  };\n\n  const renderSingleClusterMarker = mapClusterLocation => {\n    return contentDetail && contentDetail.id != mapClusterLocation.markerList[0].id ? React.createElement(MarkerWithFocusedOverlay, {\n      key: mapClusterLocation.markerList[0].id,\n      mapLocation: new MapLocation(mapClusterLocation.markerList[0]),\n      visible: false,\n      isFocusedMarker: focusedMapLocation && focusedMapLocation.id == mapClusterLocation.markerList[0].id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }) : null;\n  };\n\n  const renderClusterFocusedMarker = mapLocation => {\n    return React.createElement(CustomOverlay, {\n      lat: mapLocation.latitude,\n      lng: mapLocation.longitude,\n      visible: true,\n      options: {\n        offsetY: 38,\n        zIndex: 3\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(MapLocationOverlay, {\n      mapLocation: mapLocation,\n      hasShadow: true,\n      hoverShadow: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }));\n  };\n\n  const alwaysShowLocationOverlay = !mapLocationLoading && !_isEmpty(mapLocationList) && !mapLoading && (mapLocationList.length <= 6 || mapLevel < 5);\n  const alwaysShowClusterLocationOverlay = !mapLoading && (mapClusterLocationMarkerSize <= 6 || mapLevel < 5);\n  return React.createElement(React.Fragment, null, React.createElement(MoobeKakaoMap, {\n    className: \"column box is-paddingless kakao-map is-fullheight-with-navbar-fixed-height is-marginless\",\n    zoom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(MarkerClusterer, {\n    isMain: true,\n    options: {\n      averageCenter: true,\n      minLevel: 5,\n      disableClickZoom: true,\n      minClusterSize: 3,\n      calculator: MarkerClustererCalculator,\n      styles: MarkerClustererStyles\n    },\n    onClusterClick: onClusterClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, getLocationListWithoutDetailContent().map(mapLocation => React.createElement(MarkerWithFocusedOverlay, {\n    key: mapLocation.id,\n    mapLocation: mapLocation,\n    visible: alwaysShowLocationOverlay,\n    isFocusedMarker: focusedMapLocation && focusedMapLocation.id == mapLocation.id,\n    hasShadow: !alwaysShowLocationOverlay || focusedMapLocation && focusedMapLocation.id == mapLocation.id,\n    hoverShadow: alwaysShowLocationOverlay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }))), !_isEmpty(contentDetail) ? React.createElement(MarkerWithCustomOverlay, {\n    content: contentDetail,\n    liked: contentDetail && contentDetail.liked ? true : false,\n    visible: showOverlayContentDetail,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }) : null, alwaysShowClusterLocationOverlay ? getClusterLocationListWithoutDetailContent().map(mapLocation => React.createElement(MarkerWithFocusedOverlay, {\n    key: mapLocation.id,\n    mapLocation: mapLocation,\n    visible: alwaysShowClusterLocationOverlay,\n    isFocusedMarker: focusedMapLocation && focusedMapLocation.id == mapLocation.id,\n    hasShadow: !alwaysShowClusterLocationOverlay || focusedMapLocation && focusedMapLocation.id == mapLocation.id,\n    hoverShadow: alwaysShowClusterLocationOverlay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  })) : mapClusterLocationList.map(m => React.createElement(ClusterMarker, {\n    key: m.centerLatitude + \"\" + m.centerLongitude + \"\" + m.markerListSize,\n    mapClusterLocation: m,\n    renderFocusedMarker: renderClusterFocusedMarker,\n    renderSingleMarker: renderSingleClusterMarker,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }))));\n};\n\nconst MarkerWithCustomOverlay = ({\n  content,\n  liked,\n  visible\n}) => {\n  const dispatch = useDispatch();\n\n  const showOverlay = () => {\n    dispatch(setShowOverlayContentDetail(true));\n    dispatch(setFocusedLocation(null));\n  };\n\n  useEffect(() => {\n    dispatch(setFocusedLocation(null));\n  }, [content]);\n  return React.createElement(React.Fragment, null, React.createElement(Marker, {\n    options: {\n      lat: content.store.latitude,\n      lng: content.store.longitude,\n      content: content.store.name,\n      zIndex: 2,\n      imageUrl: liked ? MarkerImagePinFavorite : MarkerImagePin,\n      imageOption: {\n        url: liked ? MarkerImagePinFavorite : MarkerImagePin,\n        width: 46,\n        height: 61\n      }\n    },\n    onClick: marker => showOverlay(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(CustomOverlay, {\n    lat: content.store.latitude,\n    lng: content.store.longitude,\n    visible: visible,\n    options: {\n      offsetY: 72,\n      zIndex: 2\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(DetailContentOverlay, {\n    content: content,\n    visible: visible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })));\n};\n\nconst MarkerWithFocusedOverlay = ({\n  mapLocation,\n  visible = false,\n  isFocusedMarker = false,\n  hasShadow = true,\n  hoverShadow = false\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isFocused = _useState2[0],\n        setIsFocused = _useState2[1];\n\n  const _useState3 = useState(1),\n        _useState4 = _slicedToArray(_useState3, 2),\n        zIndex = _useState4[0],\n        setZIndex = _useState4[1];\n\n  const _useSelector6 = useSelector(state => state.channel),\n        activeChannel = _useSelector6.activeChannel;\n\n  const _useSelector7 = useSelector(state => state.mapLocation),\n        focusedMapLocation = _useSelector7.focusedMapLocation;\n\n  let focused = !_isNil(focusedMapLocation) && mapLocation.id === focusedMapLocation.id || isFocused || isFocusedMarker;\n  const history = useHistory();\n  const location = useLocation();\n\n  const updateActiveContent = content => {\n    history.push({\n      pathname: buildContentPath(activeChannel, content),\n      search: window.location.search\n    });\n  }; //TODO seperate overlay div.\n\n\n  useEffect(() => {\n    if (isFocused || isFocusedMarker) {\n      setZIndex(3);\n    } else {\n      setZIndex(1);\n    }\n  }, [isFocused, isFocusedMarker]);\n  return React.createElement(React.Fragment, null, React.createElement(Marker, {\n    onMouseOver: e => setIsFocused(true),\n    onMouseOut: e => setIsFocused(false),\n    onClick: marker => updateActiveContent(mapLocation),\n    options: {\n      lat: mapLocation.latitude,\n      lng: mapLocation.longitude,\n      content: mapLocation.name,\n      imageUrl: MarkerImageSm,\n      imageOption: {\n        url: MarkerImageSm,\n        width: 30,\n        height: 32\n      },\n      zIndex: zIndex\n    },\n    attributes: {\n      mapLocation\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }), React.createElement(CustomOverlay, {\n    lat: mapLocation.latitude,\n    lng: mapLocation.longitude,\n    visible: visible || focused,\n    options: {\n      offsetY: 38,\n      zIndex: zIndex\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(MapLocationOverlay, {\n    mapLocation: mapLocation,\n    hasShadow: hasShadow,\n    hoverShadow: hoverShadow,\n    handleMouseEnter: e => setIsFocused(true),\n    handleMouseLeave: e => setIsFocused(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  })));\n};\n\nexport default DesktopKakaoMap;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/desktop/map/DesktopKakaoMap.jsx"],"names":["React","useEffect","useState","MoobeKakaoMap","MarkerClusterer","MarkerClustererCalculator","MarkerClustererStyles","useDispatch","useSelector","MarkerImagePinFavorite","CustomOverlay","DetailContentOverlay","isEmpty","_isEmpty","isNil","_isNil","buildContentPath","useHistory","useLocation","Marker","setShowOverlayContentDetail","setFocusedLocation","MapLocationOverlay","forceCleanMarkerClusterer","setSearchOnBoundChange","MapLocation","ClusterMarker","DesktopKakaoMap","state","mapClusterLocation","mapClusterLocationList","mapClusterLocationMarkerSize","mapClusterLocationMarkerList","mapLocation","mapLocationList","mapLocationLoading","focusedMapLocation","map","mapLevel","mapLoading","mapBounds","content","contentLoading","contentDetail","showOverlayContentDetail","dispatch","history","getLocationListWithoutDetailContent","filter","location","id","getClusterLocationListWithoutDetailContent","onClusterClick","cluster","bounds","kakao","maps","LatLngBounds","getMarkers","m","extend","LatLng","latitude","longitude","setBounds","renderSingleClusterMarker","markerList","renderClusterFocusedMarker","offsetY","zIndex","alwaysShowLocationOverlay","length","alwaysShowClusterLocationOverlay","averageCenter","minLevel","disableClickZoom","minClusterSize","calculator","styles","liked","centerLatitude","centerLongitude","markerListSize","MarkerWithCustomOverlay","visible","showOverlay","lat","store","lng","name","imageUrl","MarkerImagePin","imageOption","url","width","height","marker","MarkerWithFocusedOverlay","isFocusedMarker","hasShadow","hoverShadow","isFocused","setIsFocused","setZIndex","channel","activeChannel","focused","updateActiveContent","push","pathname","search","window","e","MarkerImageSm"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport MoobeKakaoMap from \"components/common/map/MoobeKakaoMap\";\nimport MarkerClusterer, {MarkerClustererCalculator, MarkerClustererStyles} from \"components/common/map/MarkerClusterer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport MarkerImageSm from 'assets/images/marker_arrow_sm.svg';\nimport MarkerImagePin from 'assets/images/marker_arrow_pin.svg';\nimport MarkerImagePinFavorite from 'assets/images/marker_arrow_pin_favorite.png';\nimport CustomOverlay from \"components/common/map/CustomOverlay\";\nimport DetailContentOverlay from \"components/common/map/DetailContentOverlay\";\nimport {isEmpty as _isEmpty, isNil as _isNil} from 'lodash';\nimport {buildContentPath} from \"data/util\";\nimport {useHistory, useLocation} from \"react-router\";\nimport Marker from \"components/common/map/Marker\";\nimport {setShowOverlayContentDetail} from \"data/redux/action/contentDetail\";\nimport {setFocusedLocation} from \"data/redux/action/location\";\nimport MapLocationOverlay from \"components/common/map/MapLocationOverlay\";\nimport {forceCleanMarkerClusterer, setSearchOnBoundChange} from \"data/redux/action/map\";\nimport MapLocation from \"data/redux/model/MapLocation\";\nimport ClusterMarker from \"components/common/map/ClusterMarker\";\n\nconst DesktopKakaoMap = () => {\n    const {mapClusterLocationList, mapClusterLocationMarkerSize, mapClusterLocationMarkerList} = useSelector(state => state.mapClusterLocation);\n    const {mapLocationList, mapLocationLoading, focusedMapLocation} = useSelector(state => state.mapLocation);\n    const {map, mapLevel, mapLoading, mapBounds} = useSelector(state => state.map);\n    const {contentLoading} = useSelector(state => state.content);\n    const {contentDetail, showOverlayContentDetail} = useSelector(state => state.contentDetail);\n    const dispatch = useDispatch()\n    const history = useHistory();\n\n    const getLocationListWithoutDetailContent = () => {\n        if (!_isNil(contentDetail)) {\n            return mapLocationList.filter(location => location.id != contentDetail.id)\n        } else {\n            return mapLocationList;\n        }\n    }\n\n    const getClusterLocationListWithoutDetailContent = () => {\n        if (!_isNil(contentDetail)) {\n            return mapClusterLocationMarkerList.filter(location => location.id != contentDetail.id)\n        } else {\n            return mapClusterLocationMarkerList\n        }\n    }\n\n    const onClusterClick = (cluster) => {\n        if(map) {\n            const bounds = new kakao.maps.LatLngBounds();\n            cluster.getMarkers().map(m => {\n                bounds.extend(new kakao.maps.LatLng(m.mapLocation.latitude, m.mapLocation.longitude))\n            })\n            dispatch(forceCleanMarkerClusterer());\n            dispatch(setSearchOnBoundChange(true))\n            map.setBounds(bounds, 0, 0, 0, 0)\n        }\n    }\n\n    const renderSingleClusterMarker = (mapClusterLocation) => {\n        return contentDetail && contentDetail.id != mapClusterLocation.markerList[0].id\n            ? <MarkerWithFocusedOverlay key={mapClusterLocation.markerList[0].id}\n                                        mapLocation={new MapLocation(mapClusterLocation.markerList[0])}\n                                        visible={false}\n                                        isFocusedMarker={focusedMapLocation && focusedMapLocation.id == mapClusterLocation.markerList[0].id}/>\n            : null\n    }\n\n    const renderClusterFocusedMarker = (mapLocation) => {\n        return (\n            <CustomOverlay lat={mapLocation.latitude} lng={mapLocation.longitude} visible={true} options={{offsetY: 38, zIndex: 3}}>\n                <MapLocationOverlay mapLocation={mapLocation}\n                                    hasShadow={true}\n                                    hoverShadow={true}/>\n            </CustomOverlay>\n        )\n    }\n\n    const alwaysShowLocationOverlay =  !mapLocationLoading && !_isEmpty(mapLocationList) && !mapLoading && (mapLocationList.length <= 6 || mapLevel < 5)\n    const alwaysShowClusterLocationOverlay = !mapLoading && (mapClusterLocationMarkerSize <= 6 || mapLevel < 5)\n\n    return (\n        <>\n            <MoobeKakaoMap className=\"column box is-paddingless kakao-map is-fullheight-with-navbar-fixed-height is-marginless\" zoom={true}>\n                {/*single marker*/}\n                <MarkerClusterer\n                    isMain={true}\n                    options={{\n                    averageCenter: true,\n                    minLevel: 5,\n                    disableClickZoom: true,\n                    minClusterSize: 3,\n                    calculator: MarkerClustererCalculator,\n                    styles: MarkerClustererStyles\n                }} onClusterClick={onClusterClick}>\n                    {getLocationListWithoutDetailContent().map(mapLocation =>\n                        <MarkerWithFocusedOverlay key={mapLocation.id}\n                                                  mapLocation={mapLocation}\n                                                  visible={alwaysShowLocationOverlay}\n                                                  isFocusedMarker={focusedMapLocation && focusedMapLocation.id == mapLocation.id}\n                                                  hasShadow={!alwaysShowLocationOverlay || (focusedMapLocation && focusedMapLocation.id == mapLocation.id)}\n                                                  hoverShadow={alwaysShowLocationOverlay}\n                        />)}\n                </MarkerClusterer>\n                {/*detail marker*/}\n                {!_isEmpty(contentDetail) ? <MarkerWithCustomOverlay content={contentDetail} liked={contentDetail && contentDetail.liked ? true : false} visible={showOverlayContentDetail}/> : null}\n                {/*clustering marker*/}\n                {alwaysShowClusterLocationOverlay\n                    ? getClusterLocationListWithoutDetailContent().map(mapLocation =>\n                        <MarkerWithFocusedOverlay key={mapLocation.id}\n                                                  mapLocation={mapLocation}\n                                                  visible={alwaysShowClusterLocationOverlay}\n                                                  isFocusedMarker={focusedMapLocation && focusedMapLocation.id == mapLocation.id}\n                                                  hasShadow={!alwaysShowClusterLocationOverlay || (focusedMapLocation && focusedMapLocation.id == mapLocation.id)}\n                                                  hoverShadow={alwaysShowClusterLocationOverlay}/>)\n                    : mapClusterLocationList.map(m => <ClusterMarker key={m.centerLatitude + \"\" + m.centerLongitude + \"\" + m.markerListSize}\n                                                                     mapClusterLocation={m}\n                                                                     renderFocusedMarker={renderClusterFocusedMarker}\n                                                                     renderSingleMarker={renderSingleClusterMarker} />)}\n            </MoobeKakaoMap>\n        </>\n    )\n};\n\nconst MarkerWithCustomOverlay = ({content, liked, visible}) => {\n    const dispatch = useDispatch();\n    const showOverlay = () => {\n        dispatch(setShowOverlayContentDetail(true))\n        dispatch(setFocusedLocation(null))\n    }\n\n    useEffect(() => {\n        dispatch(setFocusedLocation(null))\n    }, [content])\n\n    return (\n        <>\n            <Marker options={{lat: content.store.latitude, lng: content.store.longitude, content: content.store.name, zIndex: 2,\n                            imageUrl: liked ? MarkerImagePinFavorite : MarkerImagePin,\n                            imageOption: {url: liked ? MarkerImagePinFavorite : MarkerImagePin, width: 46, height: 61}}}\n                onClick={(marker) => showOverlay()}\n            />\n            <CustomOverlay lat={content.store.latitude} lng={content.store.longitude} visible={visible} options={{offsetY: 72, zIndex: 2}}>\n                <DetailContentOverlay content={content} visible={visible}/>\n            </CustomOverlay>\n        </>\n    )\n}\n\nconst MarkerWithFocusedOverlay = ({mapLocation, visible=false, isFocusedMarker = false, hasShadow=true, hoverShadow=false}) => {\n    const [isFocused, setIsFocused] = useState(false);\n    const [zIndex, setZIndex] = useState(1);\n    const {activeChannel} = useSelector(state => state.channel);\n    const {focusedMapLocation} = useSelector(state => state.mapLocation);\n    let focused = (!_isNil(focusedMapLocation) && mapLocation.id === focusedMapLocation.id) || isFocused || isFocusedMarker;\n    const history = useHistory();\n    const location = useLocation();\n    const updateActiveContent = (content) => {\n        history.push({\n            pathname: buildContentPath(activeChannel, content),\n            search: window.location.search\n        });\n    };\n    //TODO seperate overlay div.\n    useEffect(() => {\n        if (isFocused || isFocusedMarker) {\n            setZIndex(3)\n        } else {\n            setZIndex(1)\n        }\n    }, [isFocused, isFocusedMarker])\n\n    return (\n        <>\n            <Marker onMouseOver={(e) => setIsFocused(true)}\n                onMouseOut={(e) => setIsFocused(false)}\n                onClick={(marker) => updateActiveContent(mapLocation)}\n                options={{lat: mapLocation.latitude, lng: mapLocation.longitude, content: mapLocation.name,\n                    imageUrl: MarkerImageSm,\n                    imageOption: {url: MarkerImageSm, width: 30, height: 32},\n                    zIndex: zIndex}}\n                attributes={{mapLocation}}\n            />\n            <CustomOverlay lat={mapLocation.latitude} lng={mapLocation.longitude} visible={visible || focused} options={{offsetY: 38, zIndex: zIndex}}>\n                <MapLocationOverlay mapLocation={mapLocation}\n                                    hasShadow={hasShadow}\n                                    hoverShadow={hoverShadow}\n                                    handleMouseEnter={(e) => setIsFocused(true)}\n                                    handleMouseLeave={(e) => setIsFocused(false)} />\n            </CustomOverlay>\n        </>\n    )\n};\n\n\nexport default DesktopKakaoMap;"]},"metadata":{},"sourceType":"module"}