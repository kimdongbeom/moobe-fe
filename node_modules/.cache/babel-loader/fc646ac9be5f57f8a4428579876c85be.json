{"ast":null,"code":"var _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/home/Home.jsx\";\nimport React, { useEffect } from 'react';\nimport { fetchContentList } from \"data/redux/action/content\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DesktopHome from \"components/home/DesktopHome\";\nimport MobileHome from \"components/home/MobileHome\";\nimport queryString from 'query-string';\nimport { useMobile } from \"components/common/layout/WindowDimensions\";\nimport { useLocation, useParams } from \"react-router\";\nimport { fetchChannel } from \"data/redux/action/channel\";\nimport { forceCleanMarkerClusterer, resetMapCenterChange } from \"data/redux/action/map\";\nimport { isNil as _isNil } from 'lodash';\nimport { buildMoobeMapBounds } from \"data/util\";\nimport { fetchLocation, resetLocationData, resetLocationList } from \"data/redux/action/location\";\nimport { fetchClusterLocation, resetClusterLocationData } from \"data/redux/action/clusterLocation\";\nimport NoticeModal from \"components/notice/NoticeModal\";\n\nconst MoobeHome = () => {\n  const _useParams = useParams(),\n        channelId = _useParams.channelId;\n\n  const _useSelector = useSelector(state => state.map),\n        mapLoading = _useSelector.mapLoading,\n        searchOnBoundChange = _useSelector.searchOnBoundChange;\n\n  const _queryString$parse = queryString.parse(useLocation().search),\n        query = _queryString$parse.query,\n        searchType = _queryString$parse.searchType,\n        page = _queryString$parse.page,\n        swLat = _queryString$parse.swLat,\n        swLng = _queryString$parse.swLng,\n        neLat = _queryString$parse.neLat,\n        neLng = _queryString$parse.neLng,\n        level = _queryString$parse.level,\n        k = _queryString$parse.k; // k for force refresh\n\n\n  const queryMapBounds = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n  const mobile = useMobile();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (mapLoading) {\n      return;\n    }\n\n    dispatch(resetLocationData());\n    dispatch(fetchChannel(channelId));\n    searchLocation();\n    searchContent();\n  }, [channelId]);\n  useEffect(() => {\n    if (mapLoading || searchOnBoundChange) {\n      return;\n    }\n\n    searchLocation();\n    return () => {\n      dispatch(forceCleanMarkerClusterer());\n      dispatch(resetLocationList());\n    };\n  }, [query, searchType, k]);\n  useEffect(() => {\n    if (mapLoading || searchOnBoundChange) {\n      return;\n    }\n\n    searchContent();\n  }, [query, searchType, page, k]);\n  useEffect(() => {\n    if (mapLoading) {\n      return;\n    }\n\n    dispatch(fetchChannel(channelId));\n    searchLocation();\n    searchContent();\n  }, [mapLoading]);\n\n  const searchLocation = () => {\n    if (!_isNil(level) && level < 6 || !_isNil(query)) {\n      dispatch(resetClusterLocationData());\n      dispatch(fetchLocation(channelId, query, searchType, queryMapBounds));\n    } else {\n      dispatch(resetLocationList());\n      dispatch(fetchClusterLocation(channelId, level, queryMapBounds));\n    }\n  };\n\n  const searchContent = () => {\n    dispatch(fetchContentList(channelId, query, searchType, queryMapBounds, page, false, fetchContentCallback));\n  };\n\n  const fetchContentCallback = (channelId, contentId) => {\n    dispatch(resetMapCenterChange());\n  };\n\n  return React.createElement(React.Fragment, null, !mobile ? React.createElement(DesktopHome, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }) : React.createElement(MobileHome, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }));\n};\n\nexport default MoobeHome;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/home/Home.jsx"],"names":["React","useEffect","fetchContentList","useDispatch","useSelector","DesktopHome","MobileHome","queryString","useMobile","useLocation","useParams","fetchChannel","forceCleanMarkerClusterer","resetMapCenterChange","isNil","_isNil","buildMoobeMapBounds","fetchLocation","resetLocationData","resetLocationList","fetchClusterLocation","resetClusterLocationData","NoticeModal","MoobeHome","channelId","state","map","mapLoading","searchOnBoundChange","parse","search","query","searchType","page","swLat","swLng","neLat","neLng","level","k","queryMapBounds","mobile","dispatch","searchLocation","searchContent","fetchContentCallback","contentId"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport {fetchContentList} from \"data/redux/action/content\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport DesktopHome from \"components/home/DesktopHome\";\nimport MobileHome from \"components/home/MobileHome\";\nimport queryString from 'query-string'\nimport {useMobile} from \"components/common/layout/WindowDimensions\";\nimport {useLocation, useParams} from \"react-router\";\nimport {fetchChannel} from \"data/redux/action/channel\";\nimport {forceCleanMarkerClusterer, resetMapCenterChange} from \"data/redux/action/map\";\nimport {isNil as _isNil} from 'lodash';\nimport {buildMoobeMapBounds} from \"data/util\";\nimport {fetchLocation, resetLocationData, resetLocationList} from \"data/redux/action/location\";\nimport {fetchClusterLocation, resetClusterLocationData} from \"data/redux/action/clusterLocation\";\nimport NoticeModal from \"components/notice/NoticeModal\";\n\nconst MoobeHome = () => {\n    const {channelId} = useParams();\n    const {mapLoading, searchOnBoundChange} = useSelector(state => state.map)\n    const {query, searchType, page, swLat, swLng, neLat, neLng, level, k} = queryString.parse(useLocation().search); // k for force refresh\n    const queryMapBounds = buildMoobeMapBounds(swLat, swLng, neLat, neLng);\n    const mobile = useMobile();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (mapLoading) {\n            return ;\n        }\n        dispatch(resetLocationData());\n        dispatch(fetchChannel(channelId));\n        searchLocation();\n        searchContent();\n    }, [channelId]);\n\n    useEffect(() => {\n        if (mapLoading || searchOnBoundChange) {\n            return ;\n        }\n        searchLocation()\n        return () => {\n            dispatch(forceCleanMarkerClusterer());\n            dispatch(resetLocationList());\n        }\n    }, [query, searchType, k])\n\n    useEffect(() => {\n        if (mapLoading || searchOnBoundChange) {\n            return ;\n        }\n        searchContent()\n    }, [query, searchType, page, k])\n\n    useEffect(() => {\n        if (mapLoading) {\n            return ;\n        }\n        dispatch(fetchChannel(channelId));\n        searchLocation();\n        searchContent();\n    }, [mapLoading])\n\n    const searchLocation = () => {\n        if ((!_isNil(level) && level < 6) || !_isNil(query)) {\n            dispatch(resetClusterLocationData());\n            dispatch(fetchLocation(channelId, query, searchType, queryMapBounds));\n        } else {\n            dispatch(resetLocationList());\n            dispatch(fetchClusterLocation(channelId, level, queryMapBounds))\n        }\n    }\n\n    const searchContent = () => {\n        dispatch(fetchContentList(channelId, query, searchType, queryMapBounds, page, false, fetchContentCallback));\n    }\n    const fetchContentCallback = (channelId, contentId) => {\n        dispatch(resetMapCenterChange());\n    };\n\n    return (\n        <>\n            {!mobile ? <DesktopHome /> : <MobileHome />}\n        </>\n    )\n};\n\nexport default MoobeHome;"]},"metadata":{},"sourceType":"module"}