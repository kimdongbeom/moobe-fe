{"ast":null,"code":"import axios from 'axios';\nimport { getContents, updateCommentLike } from \"data/api\";\nexport const COMMENT_RESET_COMMENT = 'COMMENT/RESET_COMMENT';\nexport const COMMENT_FETCH_MOOBE_STARTED = 'COMMENT/FETCH_MOOBE_STARTED';\nexport const COMMENT_FETCH_MOOBE_FINISHED = 'COMMENT/FETCH_MOOBE_FINISHED';\nexport const COMMENT_FETCH_MOOBE_SUCCESS = 'COMMENT/FETCH_MOOBE_SUCCESS';\nexport const COMMENT_FETCH_MOOBE_FAIL = 'COMMENT/FETCH_MOOBE_FAIL';\nexport const COMMENT_FETCH_YOUTUBE_STARTED = 'COMMENT/FETCH_YOUTUBE_STARTED';\nexport const COMMENT_FETCH_YOUTUBE_FINISHED = 'COMMENT/FETCH_YOUTUBE_FINISHED';\nexport const COMMENT_FETCH_YOUTUBE_SUCCESS = 'COMMENT/FETCH_YOUTUBE_SUCCESS';\nexport const COMMENT_FETCH_YOUTUBE_FAIL = 'COMMENT/FETCH_YOUTUBE_FAIL';\nexport const COMMENT_FETCH_COMMENT_LIKE_STARTED = 'COMMENT/FETCH_COMMENT_LIKE_STARTED';\nexport const COMMENT_FETCH_COMMENT_LIKE_FINISHED = 'COMMENT/FETCH_COMMENT_LIKE_FINISHED';\nexport const COMMENT_FETCH_COMMENT_LIKE_SUCCESS = 'COMMENT/FETCH_COMMENT_LIKE_SUCCESS';\nexport const COMMENT_FETCH_COMMENT_LIKE_FAIL = 'COMMENT/FETCH_COMMENT_LIKE_FAIL';\nexport const fetchYoutubeComment = (commentPage, commentMaxPage = 5) => {\n  if (commentPage >= commentMaxPage) {\n    return dispatch => {\n      /*do Nothing*/\n    };\n  }\n\n  return dispatch => {\n    dispatch(fetchYoutubeCommentStarted()); //TODO get comment from api\n\n    return getContents().then(response => {\n      dispatch(fetchYoutubeCommentSuccess({\n        data: response.data,\n        page: commentPage + 1\n      }));\n    }).catch(function (error) {\n      dispatch(fetchYoutubeCommentFail(error));\n    }).finally(() => {\n      dispatch(fetchYoutubeCommentFinished());\n    });\n  };\n};\nexport const fetchMoobeComment = (commentPage, commentMaxPage = 0) => {\n  if (commentPage >= commentMaxPage) {\n    return dispatch => {\n      /*do Nothing*/\n    };\n  }\n\n  return dispatch => {\n    dispatch(fetchMoobeCommentStarted()); //TODO get comment from api\n\n    return getContents().then(response => {\n      dispatch(fetchMoobeCommentSuccess({\n        data: response.data,\n        page: commentPage + 1\n      }));\n    }).catch(function (error) {\n      dispatch(fetchMoobeCommentDataFail(error));\n    }).finally(() => {\n      dispatch(fetchMoobeCommentFinished());\n    });\n  };\n};\nexport const fetchUpdateCommentLike = (email, commentId, like, successCallback, failedCallback) => {\n  return dispatch => {\n    dispatch(fetchCommentLikeStarted());\n    return updateCommentLike(email, commentId, like).then(response => {\n      //TODO check response data\n      dispatch(fetchCommentLikeSuccess());\n\n      if (successCallback) {\n        successCallback();\n      }\n    }).catch(error => {\n      dispatch(fetchCommentLikeFail());\n\n      if (failedCallback) {\n        failedCallback();\n      }\n    }).finally(() => {\n      dispatch(fetchCommentLikeFinished());\n    });\n  };\n};\nexport const resetComment = () => {\n  return {\n    type: COMMENT_RESET_COMMENT\n  };\n};\nexport const fetchMoobeCommentStarted = () => {\n  return {\n    type: COMMENT_FETCH_MOOBE_STARTED\n  };\n};\nexport const fetchMoobeCommentFinished = () => {\n  return {\n    type: COMMENT_FETCH_MOOBE_FINISHED\n  };\n};\nexport const fetchMoobeCommentSuccess = data => {\n  return {\n    type: COMMENT_FETCH_MOOBE_SUCCESS,\n    data\n  };\n};\nexport const fetchMoobeCommentDataFail = err => {\n  return {\n    type: COMMENT_FETCH_MOOBE_FAIL,\n    err\n  };\n};\nexport const fetchYoutubeCommentStarted = () => {\n  return {\n    type: COMMENT_FETCH_YOUTUBE_STARTED\n  };\n};\nexport const fetchYoutubeCommentFinished = () => {\n  return {\n    type: COMMENT_FETCH_YOUTUBE_FINISHED\n  };\n};\nexport const fetchYoutubeCommentSuccess = data => {\n  return {\n    type: COMMENT_FETCH_YOUTUBE_SUCCESS,\n    data\n  };\n};\nexport const fetchYoutubeCommentFail = err => {\n  return {\n    type: COMMENT_FETCH_YOUTUBE_FAIL,\n    err\n  };\n};\nexport const fetchCommentLikeStarted = () => {\n  return {\n    type: COMMENT_FETCH_COMMENT_LIKE_STARTED\n  };\n};\nexport const fetchCommentLikeFinished = () => {\n  return {\n    type: COMMENT_FETCH_COMMENT_LIKE_FINISHED\n  };\n};\nexport const fetchCommentLikeSuccess = () => {\n  return {\n    type: COMMENT_FETCH_COMMENT_LIKE_SUCCESS\n  };\n};\nexport const fetchCommentLikeFail = () => {\n  return {\n    type: COMMENT_FETCH_COMMENT_LIKE_FAIL\n  };\n};","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/redux/action/comment.js"],"names":["axios","getContents","updateCommentLike","COMMENT_RESET_COMMENT","COMMENT_FETCH_MOOBE_STARTED","COMMENT_FETCH_MOOBE_FINISHED","COMMENT_FETCH_MOOBE_SUCCESS","COMMENT_FETCH_MOOBE_FAIL","COMMENT_FETCH_YOUTUBE_STARTED","COMMENT_FETCH_YOUTUBE_FINISHED","COMMENT_FETCH_YOUTUBE_SUCCESS","COMMENT_FETCH_YOUTUBE_FAIL","COMMENT_FETCH_COMMENT_LIKE_STARTED","COMMENT_FETCH_COMMENT_LIKE_FINISHED","COMMENT_FETCH_COMMENT_LIKE_SUCCESS","COMMENT_FETCH_COMMENT_LIKE_FAIL","fetchYoutubeComment","commentPage","commentMaxPage","dispatch","fetchYoutubeCommentStarted","then","response","fetchYoutubeCommentSuccess","data","page","catch","error","fetchYoutubeCommentFail","finally","fetchYoutubeCommentFinished","fetchMoobeComment","fetchMoobeCommentStarted","fetchMoobeCommentSuccess","fetchMoobeCommentDataFail","fetchMoobeCommentFinished","fetchUpdateCommentLike","email","commentId","like","successCallback","failedCallback","fetchCommentLikeStarted","fetchCommentLikeSuccess","fetchCommentLikeFail","fetchCommentLikeFinished","resetComment","type","err"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {getContents, updateCommentLike} from \"data/api\";\n\n\nexport const COMMENT_RESET_COMMENT = 'COMMENT/RESET_COMMENT';\n\nexport const COMMENT_FETCH_MOOBE_STARTED = 'COMMENT/FETCH_MOOBE_STARTED';\nexport const COMMENT_FETCH_MOOBE_FINISHED = 'COMMENT/FETCH_MOOBE_FINISHED';\nexport const COMMENT_FETCH_MOOBE_SUCCESS = 'COMMENT/FETCH_MOOBE_SUCCESS';\nexport const COMMENT_FETCH_MOOBE_FAIL = 'COMMENT/FETCH_MOOBE_FAIL';\n\nexport const COMMENT_FETCH_YOUTUBE_STARTED = 'COMMENT/FETCH_YOUTUBE_STARTED';\nexport const COMMENT_FETCH_YOUTUBE_FINISHED = 'COMMENT/FETCH_YOUTUBE_FINISHED';\nexport const COMMENT_FETCH_YOUTUBE_SUCCESS = 'COMMENT/FETCH_YOUTUBE_SUCCESS';\nexport const COMMENT_FETCH_YOUTUBE_FAIL = 'COMMENT/FETCH_YOUTUBE_FAIL';\n\nexport const COMMENT_FETCH_COMMENT_LIKE_STARTED = 'COMMENT/FETCH_COMMENT_LIKE_STARTED';\nexport const COMMENT_FETCH_COMMENT_LIKE_FINISHED = 'COMMENT/FETCH_COMMENT_LIKE_FINISHED';\nexport const COMMENT_FETCH_COMMENT_LIKE_SUCCESS = 'COMMENT/FETCH_COMMENT_LIKE_SUCCESS';\nexport const COMMENT_FETCH_COMMENT_LIKE_FAIL = 'COMMENT/FETCH_COMMENT_LIKE_FAIL';\n\nexport const fetchYoutubeComment = (commentPage, commentMaxPage = 5) => {\n    if (commentPage >= commentMaxPage) {\n        return (dispatch) => {/*do Nothing*/};\n    }\n    return (dispatch) => {\n        dispatch(fetchYoutubeCommentStarted())\n        //TODO get comment from api\n        return getContents().then(response => {\n            dispatch(fetchYoutubeCommentSuccess({data: response.data, page: commentPage + 1}))\n        }).catch(function (error) {\n            dispatch(fetchYoutubeCommentFail(error))\n        }).finally(() => {\n            dispatch(fetchYoutubeCommentFinished())\n        })\n    }\n};\n\nexport const fetchMoobeComment = (commentPage, commentMaxPage = 0) => {\n    if (commentPage >= commentMaxPage) {\n        return (dispatch) => {/*do Nothing*/\n        };\n    }\n    return (dispatch) => {\n        dispatch(fetchMoobeCommentStarted());\n        //TODO get comment from api\n        return getContents().then(response => {\n            dispatch(fetchMoobeCommentSuccess({data: response.data, page: commentPage + 1}))\n        }).catch(function (error) {\n            dispatch(fetchMoobeCommentDataFail(error))\n        }).finally(() => {\n            dispatch(fetchMoobeCommentFinished())\n        })\n    }\n};\n\nexport const fetchUpdateCommentLike = (email, commentId, like, successCallback, failedCallback) => {\n    return (dispatch) => {\n        dispatch(fetchCommentLikeStarted());\n        return updateCommentLike(email, commentId, like).then(response => {\n            //TODO check response data\n            dispatch(fetchCommentLikeSuccess());\n            if (successCallback) {\n                successCallback();\n            }\n        }).catch((error) => {\n            dispatch(fetchCommentLikeFail());\n            if (failedCallback) {\n                failedCallback();\n            }\n        }).finally(() => {\n            dispatch(fetchCommentLikeFinished());\n        })\n    }\n};\n\nexport const resetComment = () => {\n    return {\n        type: COMMENT_RESET_COMMENT\n    }\n};\n\nexport const fetchMoobeCommentStarted = () => {\n    return {\n        type: COMMENT_FETCH_MOOBE_STARTED\n    }\n};\n\nexport const fetchMoobeCommentFinished = () => {\n    return {\n        type: COMMENT_FETCH_MOOBE_FINISHED\n    }\n};\n\nexport const fetchMoobeCommentSuccess = (data) => {\n    return {\n        type: COMMENT_FETCH_MOOBE_SUCCESS,\n        data\n    }\n};\n\nexport const fetchMoobeCommentDataFail = (err) => {\n    return {\n        type: COMMENT_FETCH_MOOBE_FAIL,\n        err\n    }\n};\n\nexport const fetchYoutubeCommentStarted = () => {\n    return {\n        type: COMMENT_FETCH_YOUTUBE_STARTED\n    }\n};\n\nexport const fetchYoutubeCommentFinished = () => {\n    return {\n        type: COMMENT_FETCH_YOUTUBE_FINISHED\n    }\n};\n\nexport const fetchYoutubeCommentSuccess = (data) => {\n    return {\n        type: COMMENT_FETCH_YOUTUBE_SUCCESS,\n        data\n    }\n};\n\nexport const fetchYoutubeCommentFail = (err) => {\n    return {\n        type: COMMENT_FETCH_YOUTUBE_FAIL,\n        err\n    }\n};\n\nexport const fetchCommentLikeStarted = () => {\n    return {\n        type: COMMENT_FETCH_COMMENT_LIKE_STARTED\n    }\n};\n\nexport const fetchCommentLikeFinished = () => {\n    return {\n        type: COMMENT_FETCH_COMMENT_LIKE_FINISHED\n    }\n};\nexport const fetchCommentLikeSuccess = () => {\n    return {\n        type: COMMENT_FETCH_COMMENT_LIKE_SUCCESS\n    }\n};\nexport const fetchCommentLikeFail = () => {\n    return {\n        type: COMMENT_FETCH_COMMENT_LIKE_FAIL\n    }\n};\n\n"]},"metadata":{},"sourceType":"module"}