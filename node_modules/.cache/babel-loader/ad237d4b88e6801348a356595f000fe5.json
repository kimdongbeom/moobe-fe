{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/home/Home.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { fetchContent, setActiveContent, showOverlayContent } from \"../../redux/action/content\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DesktopHome from \"./DesktopHome\";\nimport MobileHome from \"./MobileHome\";\nimport DesktopFooter from \"./DesktopFooter\";\nimport { BrowserView, isMobile, MobileView } from \"react-device-detect\";\nimport useWindowDimensions from \"../common/layout/WindowDimensions\";\nimport { useParams } from \"react-router\";\nimport { findIndex as _findIndex, isEmpty as _isEmpty, toString as _toString } from \"lodash\";\nimport { fetchChannel, setActiveChannel } from \"../../redux/action/channel\";\n\nconst MoobeHome = () => {\n  const _useParams = useParams(),\n        channelId = _useParams.channelId,\n        contentId = _useParams.contentId;\n\n  const _useState = useState(channelId),\n        _useState2 = _slicedToArray(_useState, 2),\n        prevChannelId = _useState2[0],\n        setPrevChannelId = _useState2[1];\n\n  const _useSelector = useSelector(state => state.channel),\n        channelList = _useSelector.channelList;\n\n  const _useSelector2 = useSelector(state => state.content),\n        contentList = _useSelector2.contentList;\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (_isEmpty(channelList)) {\n      //initial both channel list and content list\n      dispatch(fetchChannel(channelId));\n      dispatch(fetchContent(channelId, contentId, true));\n    } else if (prevChannelId != channelId) {\n      //if channelid change, change channel and init content list\n      dispatch(setActiveChannel(channelId));\n      dispatch(fetchContent(channelId, contentId, true));\n    } else {\n      // others only set active content\n      let contentIndex = _findIndex(contentList, content => _toString(content.id) === contentId);\n\n      if (contentIndex !== -1) {\n        let content = contentList[contentIndex];\n        dispatch(setActiveContent(content));\n        dispatch(showOverlayContent(content));\n      } else {\n        dispatch(setActiveContent(null)); // dispatch(showOverlayContent(null));\n      }\n    }\n\n    setPrevChannelId(channelId);\n  }, [channelId, contentId]); //update every location changed.\n\n  if (isMobile) {\n    useWindowDimensions(); //for responsive height in mobile web.\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(BrowserView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"columns is-marginless is-paddingless is-hidden-mobile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(DesktopHome, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })), React.createElement(DesktopFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }))), React.createElement(MobileView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"is-hidden-tablet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(MobileHome, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }))));\n};\n\nexport default MoobeHome;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/home/Home.jsx"],"names":["React","useEffect","useState","fetchContent","setActiveContent","showOverlayContent","useDispatch","useSelector","DesktopHome","MobileHome","DesktopFooter","BrowserView","isMobile","MobileView","useWindowDimensions","useParams","findIndex","_findIndex","isEmpty","_isEmpty","toString","_toString","fetchChannel","setActiveChannel","MoobeHome","channelId","contentId","prevChannelId","setPrevChannelId","state","channel","channelList","content","contentList","dispatch","contentIndex","id"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {fetchContent, setActiveContent, showOverlayContent} from \"../../redux/action/content\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport DesktopHome from \"./DesktopHome\";\nimport MobileHome from \"./MobileHome\";\nimport DesktopFooter from \"./DesktopFooter\";\nimport {BrowserView, isMobile, MobileView} from \"react-device-detect\";\nimport useWindowDimensions from \"../common/layout/WindowDimensions\";\nimport {useParams} from \"react-router\";\nimport {findIndex as _findIndex, isEmpty as _isEmpty, toString as _toString} from \"lodash\";\nimport {fetchChannel, setActiveChannel} from \"../../redux/action/channel\";\n\nconst MoobeHome = () => {\n    const {channelId, contentId} = useParams();\n    const [prevChannelId, setPrevChannelId] = useState(channelId)\n    const {channelList} = useSelector(state => state.channel)\n    const {contentList} = useSelector(state => state.content);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        if (_isEmpty(channelList)) { //initial both channel list and content list\n            dispatch(fetchChannel(channelId))\n            dispatch(fetchContent(channelId, contentId, true));\n        } else if (prevChannelId != channelId) { //if channelid change, change channel and init content list\n            dispatch(setActiveChannel(channelId));\n            dispatch(fetchContent(channelId, contentId, true));\n        } else { // others only set active content\n            let contentIndex = _findIndex(contentList, (content) => (_toString(content.id) === contentId))\n            if (contentIndex !== -1) {\n                let content = contentList[contentIndex]\n                dispatch(setActiveContent(content));\n                dispatch(showOverlayContent(content));\n            } else {\n                dispatch(setActiveContent(null));\n                // dispatch(showOverlayContent(null));\n            }\n        }\n        setPrevChannelId(channelId);\n    }, [channelId, contentId]); //update every location changed.\n\n    if (isMobile) {\n        useWindowDimensions() //for responsive height in mobile web.\n    }\n    return (\n        <>\n            <BrowserView>\n                <>\n                    <div className=\"columns is-marginless is-paddingless is-hidden-mobile\">\n                        <DesktopHome />\n                    </div>\n                    <DesktopFooter/>\n                </>\n            </BrowserView>\n            <MobileView>\n                <div className=\"is-hidden-tablet\">\n                    <MobileHome />\n                </div>\n            </MobileView>\n        </>\n    )\n};\n\nexport default MoobeHome;"]},"metadata":{},"sourceType":"module"}