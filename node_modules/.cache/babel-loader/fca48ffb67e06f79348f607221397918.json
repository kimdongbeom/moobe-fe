{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/MarkerClusterer.jsx\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { MapContext } from \"./KakaoMap\";\nexport const MarkerClustererContext = React.createContext({});\n\nconst MarkerClusterer = props => {\n  const _useContext = useContext(MapContext),\n        kakao = _useContext.kakao,\n        map = _useContext.map;\n\n  const _useState = useState({\n    clusterer: null\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  useEffect(() => {\n    const options = props.options;\n    const clusterer = new kakao.maps.MarkerClusterer(options);\n    clusterer.setMap(map);\n    kakao.maps.event.addListener(clusterer, \"clustered\", () => {});\n    setState({\n      clusterer\n    });\n    return () => {\n      clusterer.setMap(null);\n    };\n  }, []);\n  useEffect(() => {\n    const _props$options = props.options,\n          gridSize = _props$options.gridSize,\n          averageCenter = _props$options.averageCenter,\n          minLevel = _props$options.minLevel,\n          disableClickZoom = _props$options.disableClickZoom;\n    const clusterer = state.clusterer;\n    if (clusterer === null) return;\n    if (gridSize) clusterer.setGridSize(gridSize);\n    if (averageCenter) clusterer.setAverageCenter(averageCenter);\n    if (minLevel) clusterer.setMinLevel(minLevel);\n    if (disableClickZoom) clusterer.setDisableClickZoom(disableClickZoom);\n  }, [props.options]);\n\n  if (state.clusterer === null) {\n    return null;\n  } else {\n    return React.createElement(MarkerClustererContext.Provider, {\n      value: state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, state.clusterer === null ? null : props.children);\n  }\n};\n\nexport default MarkerClusterer;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/MarkerClusterer.jsx"],"names":["React","useContext","useState","useEffect","MapContext","MarkerClustererContext","createContext","MarkerClusterer","props","kakao","map","clusterer","state","setState","options","maps","setMap","event","addListener","gridSize","averageCenter","minLevel","disableClickZoom","setGridSize","setAverageCenter","setMinLevel","setDisableClickZoom","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAO,MAAMC,sBAAsB,GAAGL,KAAK,CAACM,aAAN,CAAoB,EAApB,CAA/B;;AAEP,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAAA,sBACNP,UAAU,CAACG,UAAD,CADJ;AAAA,QACrBK,KADqB,eACrBA,KADqB;AAAA,QACdC,GADc,eACdA,GADc;;AAAA,oBAEHR,QAAQ,CAAC;AAC/BS,IAAAA,SAAS,EAAE;AADoB,GAAD,CAFL;AAAA;AAAA,QAEtBC,KAFsB;AAAA,QAEfC,QAFe;;AAM7BV,EAAAA,SAAS,CAAC,MAAM;AAAA,UACJW,OADI,GACQN,KADR,CACJM,OADI;AAEZ,UAAMH,SAAS,GAAG,IAAIF,KAAK,CAACM,IAAN,CAAWR,eAAf,CAA+BO,OAA/B,CAAlB;AACAH,IAAAA,SAAS,CAACK,MAAV,CAAiBN,GAAjB;AACAD,IAAAA,KAAK,CAACM,IAAN,CAAWE,KAAX,CAAiBC,WAAjB,CAA6BP,SAA7B,EAAwC,WAAxC,EAAqD,MAAM,CAAE,CAA7D;AACAE,IAAAA,QAAQ,CAAC;AAAEF,MAAAA;AAAF,KAAD,CAAR;AACA,WAAO,MAAM;AACTA,MAAAA,SAAS,CAACK,MAAV,CAAiB,IAAjB;AACH,KAFD;AAGH,GATQ,EASN,EATM,CAAT;AAWAb,EAAAA,SAAS,CAAC,MAAM;AAAA,2BAMRK,KAAK,CAACM,OANE;AAAA,UAERK,QAFQ,kBAERA,QAFQ;AAAA,UAGRC,aAHQ,kBAGRA,aAHQ;AAAA,UAIRC,QAJQ,kBAIRA,QAJQ;AAAA,UAKRC,gBALQ,kBAKRA,gBALQ;AAAA,UAOJX,SAPI,GAOUC,KAPV,CAOJD,SAPI;AAQZ,QAAIA,SAAS,KAAK,IAAlB,EAAwB;AACxB,QAAIQ,QAAJ,EAAcR,SAAS,CAACY,WAAV,CAAsBJ,QAAtB;AACd,QAAIC,aAAJ,EAAmBT,SAAS,CAACa,gBAAV,CAA2BJ,aAA3B;AACnB,QAAIC,QAAJ,EAAcV,SAAS,CAACc,WAAV,CAAsBJ,QAAtB;AACd,QAAIC,gBAAJ,EAAsBX,SAAS,CAACe,mBAAV,CAA8BJ,gBAA9B;AACzB,GAbQ,EAaN,CAACd,KAAK,CAACM,OAAP,CAbM,CAAT;;AAeA,MAAIF,KAAK,CAACD,SAAN,KAAoB,IAAxB,EAA8B;AAC1B,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WACI,oBAAC,sBAAD,CAAwB,QAAxB;AAAiC,MAAA,KAAK,EAAEC,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,KAAK,CAACD,SAAN,KAAoB,IAApB,GAA2B,IAA3B,GAAkCH,KAAK,CAACmB,QAD7C,CADJ;AAKH;AACJ,CAzCD;;AA2CA,eAAepB,eAAf","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { MapContext } from \"./KakaoMap\";\n\nexport const MarkerClustererContext = React.createContext({});\n\nconst MarkerClusterer = props => {\n    const { kakao, map } = useContext(MapContext);\n    const [state, setState] = useState({\n        clusterer: null\n    });\n\n    useEffect(() => {\n        const { options } = props;\n        const clusterer = new kakao.maps.MarkerClusterer(options);\n        clusterer.setMap(map);\n        kakao.maps.event.addListener(clusterer, \"clustered\", () => {});\n        setState({ clusterer });\n        return () => {\n            clusterer.setMap(null);\n        };\n    }, []);\n\n    useEffect(() => {\n        const {\n            gridSize,\n            averageCenter,\n            minLevel,\n            disableClickZoom\n        } = props.options;\n        const { clusterer } = state;\n        if (clusterer === null) return;\n        if (gridSize) clusterer.setGridSize(gridSize);\n        if (averageCenter) clusterer.setAverageCenter(averageCenter);\n        if (minLevel) clusterer.setMinLevel(minLevel);\n        if (disableClickZoom) clusterer.setDisableClickZoom(disableClickZoom);\n    }, [props.options]);\n\n    if (state.clusterer === null) {\n        return null;\n    } else {\n        return (\n            <MarkerClustererContext.Provider value={state}>\n                {state.clusterer === null ? null : props.children}\n            </MarkerClustererContext.Provider>\n        );\n    }\n};\n\nexport default MarkerClusterer;"]},"metadata":{},"sourceType":"module"}