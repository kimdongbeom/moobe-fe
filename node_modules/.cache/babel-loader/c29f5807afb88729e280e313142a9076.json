{"ast":null,"code":"import { updateObject } from \"data/util\";\nimport { concat as _concat, map as _map } from \"lodash\";\nimport { CLUSTER_LOCATION_FETCH_LOCATION_ERROR, CLUSTER_LOCATION_FETCH_LOCATION_FINISHED, CLUSTER_LOCATION_FETCH_LOCATION_STARTED, CLUSTER_LOCATION_FETCH_LOCATION_SUCCESS, CLUSTER_LOCATION_RESET_LOCATION_DATA } from \"data/redux/action/clusterLocation\";\nimport MapClusterLocation from \"data/redux/model/MapClusterLocation\";\nimport MapLocation from \"data/redux/model/MapLocation\";\nconst initialMapClusterLocationState = {\n  mapClusterLocationList: [],\n  mapClusterLocationLoading: false,\n  mapClusterLocationMarkerList: [],\n  mapClusterLocationMarkerSize: 0\n};\n\nfunction fetchSuccess(mapClusterLocationState, response) {\n  const data = response.data;\n\n  let mapClusterLocationList = _map(data, result => new MapClusterLocation(result));\n\n  let mapClusterLocationMarkerList = _map(mapClusterLocationList, cluster => cluster.markerList).reduce((a, b) => _concat(a, b), []).map(m => new MapLocation(m));\n\n  let mapClusterLocationMarkerSize = mapClusterLocationMarkerList.length;\n  return updateObject(mapClusterLocationState, {\n    mapClusterLocationList,\n    mapClusterLocationMarkerList,\n    mapClusterLocationMarkerSize\n  });\n}\n\nexport default function (mapClusterLocationState = initialMapClusterLocationState, action) {\n  switch (action.type) {\n    case CLUSTER_LOCATION_RESET_LOCATION_DATA:\n      return updateObject(mapClusterLocationState, initialMapClusterLocationState);\n\n    case CLUSTER_LOCATION_FETCH_LOCATION_STARTED:\n      return updateObject(mapClusterLocationState, {\n        mapClusterLocationLoading: true\n      });\n\n    case CLUSTER_LOCATION_FETCH_LOCATION_SUCCESS:\n      return fetchSuccess(mapClusterLocationState, action.data);\n\n    case CLUSTER_LOCATION_FETCH_LOCATION_FINISHED:\n      return updateObject(mapClusterLocationState, {\n        mapClusterLocationLoading: false\n      });\n\n    case CLUSTER_LOCATION_FETCH_LOCATION_ERROR:\n      return updateObject(mapClusterLocationState, {\n        mapClusterLocationLoading: false\n      });\n\n    default:\n      return mapClusterLocationState;\n  }\n}","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/redux/reducers/mapClusterLocationReducer.js"],"names":["updateObject","concat","_concat","map","_map","CLUSTER_LOCATION_FETCH_LOCATION_ERROR","CLUSTER_LOCATION_FETCH_LOCATION_FINISHED","CLUSTER_LOCATION_FETCH_LOCATION_STARTED","CLUSTER_LOCATION_FETCH_LOCATION_SUCCESS","CLUSTER_LOCATION_RESET_LOCATION_DATA","MapClusterLocation","MapLocation","initialMapClusterLocationState","mapClusterLocationList","mapClusterLocationLoading","mapClusterLocationMarkerList","mapClusterLocationMarkerSize","fetchSuccess","mapClusterLocationState","response","data","result","cluster","markerList","reduce","a","b","m","length","action","type"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AACA,SAAQC,MAAM,IAAIC,OAAlB,EAA2BC,GAAG,IAAIC,IAAlC,QAA6C,QAA7C;AACA,SACIC,qCADJ,EAEIC,wCAFJ,EAGIC,uCAHJ,EAIIC,uCAJJ,EAKIC,oCALJ,QAMO,mCANP;AAOA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,MAAMC,8BAA8B,GAAG;AACnCC,EAAAA,sBAAsB,EAAE,EADW;AAEnCC,EAAAA,yBAAyB,EAAE,KAFQ;AAGnCC,EAAAA,4BAA4B,EAAE,EAHK;AAInCC,EAAAA,4BAA4B,EAAE;AAJK,CAAvC;;AAQA,SAASC,YAAT,CAAsBC,uBAAtB,EAA+CC,QAA/C,EAAyD;AAAA,QAC9CC,IAD8C,GACtCD,QADsC,CAC9CC,IAD8C;;AAErD,MAAIP,sBAAsB,GAAGT,IAAI,CAACgB,IAAD,EAAOC,MAAM,IAAI,IAAIX,kBAAJ,CAAuBW,MAAvB,CAAjB,CAAjC;;AACA,MAAIN,4BAA4B,GAAGX,IAAI,CAACS,sBAAD,EAAyBS,OAAO,IAAIA,OAAO,CAACC,UAA5C,CAAJ,CAA4DC,MAA5D,CAAmE,CAACC,CAAD,EAAIC,CAAJ,KAAUxB,OAAO,CAACuB,CAAD,EAAIC,CAAJ,CAApF,EAA4F,EAA5F,EAAgGvB,GAAhG,CAAoGwB,CAAC,IAAI,IAAIhB,WAAJ,CAAgBgB,CAAhB,CAAzG,CAAnC;;AACA,MAAIX,4BAA4B,GAAGD,4BAA4B,CAACa,MAAhE;AACA,SAAO5B,YAAY,CAACkB,uBAAD,EAA0B;AAACL,IAAAA,sBAAD;AAAyBE,IAAAA,4BAAzB;AAAuDC,IAAAA;AAAvD,GAA1B,CAAnB;AACH;;AAED,eAAe,UAASE,uBAAuB,GAAGN,8BAAnC,EAAmEiB,MAAnE,EAA2E;AACtF,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKrB,oCAAL;AAA4C,aAAOT,YAAY,CAACkB,uBAAD,EAA0BN,8BAA1B,CAAnB;;AAC5C,SAAKL,uCAAL;AAA+C,aAAOP,YAAY,CAACkB,uBAAD,EAA0B;AAACJ,QAAAA,yBAAyB,EAAE;AAA5B,OAA1B,CAAnB;;AAC/C,SAAKN,uCAAL;AAA+C,aAAOS,YAAY,CAACC,uBAAD,EAA0BW,MAAM,CAACT,IAAjC,CAAnB;;AAC/C,SAAKd,wCAAL;AAAgD,aAAON,YAAY,CAACkB,uBAAD,EAA0B;AAACJ,QAAAA,yBAAyB,EAAE;AAA5B,OAA1B,CAAnB;;AAChD,SAAKT,qCAAL;AAA6C,aAAOL,YAAY,CAACkB,uBAAD,EAA0B;AAACJ,QAAAA,yBAAyB,EAAE;AAA5B,OAA1B,CAAnB;;AAC7C;AAAU,aAAOI,uBAAP;AANd;AAQH","sourcesContent":["import {updateObject} from \"data/util\";\nimport {concat as _concat, map as _map} from \"lodash\";\nimport {\n    CLUSTER_LOCATION_FETCH_LOCATION_ERROR,\n    CLUSTER_LOCATION_FETCH_LOCATION_FINISHED,\n    CLUSTER_LOCATION_FETCH_LOCATION_STARTED,\n    CLUSTER_LOCATION_FETCH_LOCATION_SUCCESS,\n    CLUSTER_LOCATION_RESET_LOCATION_DATA\n} from \"data/redux/action/clusterLocation\";\nimport MapClusterLocation from \"data/redux/model/MapClusterLocation\";\nimport MapLocation from \"data/redux/model/MapLocation\";\n\nconst initialMapClusterLocationState = {\n    mapClusterLocationList: [],\n    mapClusterLocationLoading: false,\n    mapClusterLocationMarkerList: [],\n    mapClusterLocationMarkerSize: 0\n\n};\n\nfunction fetchSuccess(mapClusterLocationState, response) {\n    const {data} = response;\n    let mapClusterLocationList = _map(data, result => new MapClusterLocation(result));\n    let mapClusterLocationMarkerList = _map(mapClusterLocationList, cluster => cluster.markerList).reduce((a, b) => _concat(a, b), []).map(m => new MapLocation(m))\n    let mapClusterLocationMarkerSize = mapClusterLocationMarkerList.length\n    return updateObject(mapClusterLocationState, {mapClusterLocationList, mapClusterLocationMarkerList, mapClusterLocationMarkerSize})\n}\n\nexport default function(mapClusterLocationState = initialMapClusterLocationState, action) {\n    switch(action.type) {\n        case CLUSTER_LOCATION_RESET_LOCATION_DATA : return updateObject(mapClusterLocationState, initialMapClusterLocationState);\n        case CLUSTER_LOCATION_FETCH_LOCATION_STARTED : return updateObject(mapClusterLocationState, {mapClusterLocationLoading: true});\n        case CLUSTER_LOCATION_FETCH_LOCATION_SUCCESS : return fetchSuccess(mapClusterLocationState, action.data);\n        case CLUSTER_LOCATION_FETCH_LOCATION_FINISHED : return updateObject(mapClusterLocationState, {mapClusterLocationLoading: false});\n        case CLUSTER_LOCATION_FETCH_LOCATION_ERROR : return updateObject(mapClusterLocationState, {mapClusterLocationLoading: false});\n        default : return mapClusterLocationState;\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}