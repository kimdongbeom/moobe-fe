{"ast":null,"code":"import { getTodayNotices, getNotices } from \"data/api\";\nexport const NOTICE_FETCH_NOTICE_STARTED = 'NOTICE/FETCH_NOTICE_STARTED';\nexport const NOTICE_FETCH_NOTICE_FINISHED = 'NOTICE/FETCH_NOTICE_FINISHED';\nexport const NOTICE_FETCH_NOTICE_SUCCESS = 'NOTICE/FETCH_NOTICE_SUCCESS';\nexport const NOTICE_FETCH_TODAY_NOTICE_SUCCESS = 'NOTICE/FETCH_TODAY_NOTICE_SUCCESS';\nexport const NOTICE_FETCH_NOTICE_ERROR = 'NOTICE/FETCH_NOTICE_ERROR';\nexport const fetchTodayNotice = () => {\n  return dispatch => {\n    dispatch(fetchNoticeStarted());\n    return getTodayNotices().then(response => {\n      dispatch(fetchTodayNoticeSuccess({\n        data: response.data\n      }));\n    }).catch(function (error) {\n      dispatch(fetchNoticeFail(error));\n    }).finally(() => {\n      dispatch(fetchNoticeFinished());\n    });\n  };\n};\nexport const fetchNoticeList = () => {\n  return dispatch => {\n    dispatch(fetchNoticeStarted());\n    return getNotices().then(response => {\n      dispatch(fetchNoticeSuccess({\n        data: response.data\n      }));\n    }).catch(function (error) {\n      dispatch(fetchNoticeFail(error));\n    }).finally(() => {\n      dispatch(fetchNoticeFinished());\n    });\n  };\n};\nexport const fetchNoticeStarted = () => {\n  return {\n    type: NOTICE_FETCH_NOTICE_STARTED\n  };\n};\nexport const fetchNoticeFinished = () => {\n  return {\n    type: NOTICE_FETCH_NOTICE_FINISHED\n  };\n};\nexport const fetchNoticeSuccess = data => {\n  return {\n    type: NOTICE_FETCH_NOTICE_SUCCESS,\n    data: data\n  };\n};\nexport const fetchTodayNoticeSuccess = data => {\n  return {\n    type: NOTICE_FETCH_TODAY_NOTICE_SUCCESS,\n    data: data\n  };\n};\nexport const fetchNoticeFail = err => {\n  return {\n    type: NOTICE_FETCH_NOTICE_ERROR,\n    err\n  };\n};","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/redux/action/notice.js"],"names":["getTodayNotices","getNotices","NOTICE_FETCH_NOTICE_STARTED","NOTICE_FETCH_NOTICE_FINISHED","NOTICE_FETCH_NOTICE_SUCCESS","NOTICE_FETCH_TODAY_NOTICE_SUCCESS","NOTICE_FETCH_NOTICE_ERROR","fetchTodayNotice","dispatch","fetchNoticeStarted","then","response","fetchTodayNoticeSuccess","data","catch","error","fetchNoticeFail","finally","fetchNoticeFinished","fetchNoticeList","fetchNoticeSuccess","type","err"],"mappings":"AAAA,SAAQA,eAAR,EAAyBC,UAAzB,QAA0C,UAA1C;AAEA,OAAO,MAAMC,2BAA2B,GAAG,6BAApC;AACP,OAAO,MAAMC,4BAA4B,GAAG,8BAArC;AACP,OAAO,MAAMC,2BAA2B,GAAG,6BAApC;AACP,OAAO,MAAMC,iCAAiC,GAAG,mCAA1C;AACP,OAAO,MAAMC,yBAAyB,GAAG,2BAAlC;AAEP,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAClC,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACA,WAAOT,eAAe,GAAGU,IAAlB,CAAuBC,QAAQ,IAAI;AACtCH,MAAAA,QAAQ,CAACI,uBAAuB,CAAC;AAACC,QAAAA,IAAI,EAAEF,QAAQ,CAACE;AAAhB,OAAD,CAAxB,CAAR;AACH,KAFM,EAEJC,KAFI,CAEE,UAAUC,KAAV,EAAiB;AACtBP,MAAAA,QAAQ,CAACQ,eAAe,CAACD,KAAD,CAAhB,CAAR;AACH,KAJM,EAIJE,OAJI,CAII,MAAM;AACbT,MAAAA,QAAQ,CAACU,mBAAmB,EAApB,CAAR;AACH,KANM,CAAP;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMC,eAAe,GAAG,MAAM;AACjC,SAAQX,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACA,WAAOR,UAAU,GAAGS,IAAb,CAAkBC,QAAQ,IAAI;AACjCH,MAAAA,QAAQ,CAACY,kBAAkB,CAAC;AAACP,QAAAA,IAAI,EAAEF,QAAQ,CAACE;AAAhB,OAAD,CAAnB,CAAR;AACH,KAFM,EAEJC,KAFI,CAEE,UAAUC,KAAV,EAAiB;AACtBP,MAAAA,QAAQ,CAACQ,eAAe,CAACD,KAAD,CAAhB,CAAR;AACH,KAJM,EAIJE,OAJI,CAII,MAAM;AACbT,MAAAA,QAAQ,CAACU,mBAAmB,EAApB,CAAR;AACH,KANM,CAAP;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMT,kBAAkB,GAAG,MAAM;AACpC,SAAO;AACHY,IAAAA,IAAI,EAAEnB;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMgB,mBAAmB,GAAG,MAAM;AACrC,SAAO;AACHG,IAAAA,IAAI,EAAElB;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMiB,kBAAkB,GAAIP,IAAD,IAAU;AACxC,SAAO;AACHQ,IAAAA,IAAI,EAAEjB,2BADH;AAEHS,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAMD,uBAAuB,GAAIC,IAAD,IAAU;AAC7C,SAAO;AACHQ,IAAAA,IAAI,EAAEhB,iCADH;AAEHQ,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,eAAe,GAAIM,GAAD,IAAS;AACpC,SAAO;AACHD,IAAAA,IAAI,EAAEf,yBADH;AAEHgB,IAAAA;AAFG,GAAP;AAIH,CALM","sourcesContent":["import {getTodayNotices, getNotices} from \"data/api\";\n\nexport const NOTICE_FETCH_NOTICE_STARTED = 'NOTICE/FETCH_NOTICE_STARTED';\nexport const NOTICE_FETCH_NOTICE_FINISHED = 'NOTICE/FETCH_NOTICE_FINISHED';\nexport const NOTICE_FETCH_NOTICE_SUCCESS = 'NOTICE/FETCH_NOTICE_SUCCESS';\nexport const NOTICE_FETCH_TODAY_NOTICE_SUCCESS = 'NOTICE/FETCH_TODAY_NOTICE_SUCCESS';\nexport const NOTICE_FETCH_NOTICE_ERROR = 'NOTICE/FETCH_NOTICE_ERROR';\n\nexport const fetchTodayNotice = () => {\n    return (dispatch) => {\n        dispatch(fetchNoticeStarted());\n        return getTodayNotices().then(response => {\n            dispatch(fetchTodayNoticeSuccess({data: response.data}))\n        }).catch(function (error) {\n            dispatch(fetchNoticeFail(error))\n        }).finally(() => {\n            dispatch(fetchNoticeFinished())\n        })\n    }\n}\n\nexport const fetchNoticeList = () => {\n    return (dispatch) => {\n        dispatch(fetchNoticeStarted());\n        return getNotices().then(response => {\n            dispatch(fetchNoticeSuccess({data: response.data}))\n        }).catch(function (error) {\n            dispatch(fetchNoticeFail(error))\n        }).finally(() => {\n            dispatch(fetchNoticeFinished())\n        });\n    }\n};\n\nexport const fetchNoticeStarted = () => {\n    return {\n        type: NOTICE_FETCH_NOTICE_STARTED\n    }\n}\n\nexport const fetchNoticeFinished = () => {\n    return {\n        type: NOTICE_FETCH_NOTICE_FINISHED\n    }\n}\n\nexport const fetchNoticeSuccess = (data) => {\n    return {\n        type: NOTICE_FETCH_NOTICE_SUCCESS,\n        data: data\n    }\n}\n\nexport const fetchTodayNoticeSuccess = (data) => {\n    return {\n        type: NOTICE_FETCH_TODAY_NOTICE_SUCCESS,\n        data: data\n    }\n}\n\nexport const fetchNoticeFail = (err) => {\n    return {\n        type: NOTICE_FETCH_NOTICE_ERROR,\n        err\n    }\n}"]},"metadata":{},"sourceType":"module"}