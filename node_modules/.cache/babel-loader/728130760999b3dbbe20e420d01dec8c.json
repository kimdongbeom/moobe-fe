{"ast":null,"code":"import { updateObject } from \"data/util\";\nimport { map as _map } from \"lodash\";\nimport { LOCATION_FETCH_LOCATION_ERROR, LOCATION_FETCH_LOCATION_FINISHED, LOCATION_FETCH_LOCATION_STARTED, LOCATION_FETCH_LOCATION_SUCCESS, LOCATION_RESET_LOCATION_DATA, LOCATION_RESET_LOCATION_LIST, LOCATION_SET_FOCUSED_LOCATION } from \"data/redux/action/location\";\nimport MapLocation from \"data/redux/model/MapLocation\";\nconst initialMapLocationState = {\n  mapLocationList: [],\n  mapLocationLoading: false,\n  focusedMapLocation: null\n};\n\nfunction fetchSuccess(mapLocationState, response) {\n  const data = response.data;\n\n  let mapLocationList = _map(data, result => new MapLocation(result));\n\n  return updateObject(mapLocationState, {\n    mapLocationList: mapLocationList\n  });\n}\n\nexport default function (mapLocationState = initialMapLocationState, action) {\n  switch (action.type) {\n    case LOCATION_RESET_LOCATION_DATA:\n      return updateObject(mapLocationState, initialMapLocationState);\n\n    case LOCATION_RESET_LOCATION_LIST:\n      return updateObject(mapLocationState, {\n        mapLocationList: []\n      });\n\n    case LOCATION_FETCH_LOCATION_STARTED:\n      return updateObject(mapLocationState, {\n        mapLocationLoading: true\n      });\n\n    case LOCATION_FETCH_LOCATION_SUCCESS:\n      return fetchSuccess(mapLocationState, action.data);\n\n    case LOCATION_FETCH_LOCATION_FINISHED:\n      return updateObject(mapLocationState, {\n        mapLocationLoading: false\n      });\n\n    case LOCATION_FETCH_LOCATION_ERROR:\n      return updateObject(mapLocationState, {\n        mapLocationLoading: false\n      });\n\n    case LOCATION_SET_FOCUSED_LOCATION:\n      return updateObject(mapLocationState, {\n        focusedMapLocation: action.data\n      });\n\n    default:\n      return mapLocationState;\n  }\n}","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/data/redux/reducers/mapLocationReducer.js"],"names":["updateObject","map","_map","LOCATION_FETCH_LOCATION_ERROR","LOCATION_FETCH_LOCATION_FINISHED","LOCATION_FETCH_LOCATION_STARTED","LOCATION_FETCH_LOCATION_SUCCESS","LOCATION_RESET_LOCATION_DATA","LOCATION_RESET_LOCATION_LIST","LOCATION_SET_FOCUSED_LOCATION","MapLocation","initialMapLocationState","mapLocationList","mapLocationLoading","focusedMapLocation","fetchSuccess","mapLocationState","response","data","result","action","type"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AACA,SAAQC,GAAG,IAAIC,IAAf,QAA0B,QAA1B;AACA,SACIC,6BADJ,EAEIC,gCAFJ,EAGIC,+BAHJ,EAIIC,+BAJJ,EAKIC,4BALJ,EAKkCC,4BALlC,EAKgEC,6BALhE,QAMO,4BANP;AAOA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,MAAMC,uBAAuB,GAAG;AAC5BC,EAAAA,eAAe,EAAE,EADW;AAE5BC,EAAAA,kBAAkB,EAAE,KAFQ;AAG5BC,EAAAA,kBAAkB,EAAE;AAHQ,CAAhC;;AAMA,SAASC,YAAT,CAAsBC,gBAAtB,EAAwCC,QAAxC,EAAkD;AAAA,QACvCC,IADuC,GAC/BD,QAD+B,CACvCC,IADuC;;AAE9C,MAAIN,eAAe,GAAGV,IAAI,CAACgB,IAAD,EAAOC,MAAM,IAAI,IAAIT,WAAJ,CAAgBS,MAAhB,CAAjB,CAA1B;;AACA,SAAOnB,YAAY,CAACgB,gBAAD,EAAmB;AAACJ,IAAAA,eAAe,EAAEA;AAAlB,GAAnB,CAAnB;AACH;;AAED,eAAe,UAASI,gBAAgB,GAAGL,uBAA5B,EAAqDS,MAArD,EAA6D;AACxE,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKd,4BAAL;AAAoC,aAAOP,YAAY,CAACgB,gBAAD,EAAmBL,uBAAnB,CAAnB;;AACpC,SAAKH,4BAAL;AAAoC,aAAOR,YAAY,CAACgB,gBAAD,EAAmB;AAACJ,QAAAA,eAAe,EAAE;AAAlB,OAAnB,CAAnB;;AACpC,SAAKP,+BAAL;AAAuC,aAAOL,YAAY,CAACgB,gBAAD,EAAmB;AAACH,QAAAA,kBAAkB,EAAE;AAArB,OAAnB,CAAnB;;AACvC,SAAKP,+BAAL;AAAuC,aAAOS,YAAY,CAACC,gBAAD,EAAmBI,MAAM,CAACF,IAA1B,CAAnB;;AACvC,SAAKd,gCAAL;AAAwC,aAAOJ,YAAY,CAACgB,gBAAD,EAAmB;AAACH,QAAAA,kBAAkB,EAAE;AAArB,OAAnB,CAAnB;;AACxC,SAAKV,6BAAL;AAAqC,aAAOH,YAAY,CAACgB,gBAAD,EAAmB;AAACH,QAAAA,kBAAkB,EAAE;AAArB,OAAnB,CAAnB;;AACrC,SAAKJ,6BAAL;AAAqC,aAAOT,YAAY,CAACgB,gBAAD,EAAmB;AAACF,QAAAA,kBAAkB,EAAEM,MAAM,CAACF;AAA5B,OAAnB,CAAnB;;AACrC;AAAU,aAAOF,gBAAP;AARd;AAUH","sourcesContent":["import {updateObject} from \"data/util\";\nimport {map as _map} from \"lodash\";\nimport {\n    LOCATION_FETCH_LOCATION_ERROR,\n    LOCATION_FETCH_LOCATION_FINISHED,\n    LOCATION_FETCH_LOCATION_STARTED,\n    LOCATION_FETCH_LOCATION_SUCCESS,\n    LOCATION_RESET_LOCATION_DATA, LOCATION_RESET_LOCATION_LIST, LOCATION_SET_FOCUSED_LOCATION\n} from \"data/redux/action/location\";\nimport MapLocation from \"data/redux/model/MapLocation\";\n\nconst initialMapLocationState = {\n    mapLocationList: [],\n    mapLocationLoading: false,\n    focusedMapLocation: null\n};\n\nfunction fetchSuccess(mapLocationState, response) {\n    const {data} = response;\n    let mapLocationList = _map(data, result => new MapLocation(result));\n    return updateObject(mapLocationState, {mapLocationList: mapLocationList})\n}\n\nexport default function(mapLocationState = initialMapLocationState, action) {\n    switch(action.type) {\n        case LOCATION_RESET_LOCATION_DATA : return updateObject(mapLocationState, initialMapLocationState);\n        case LOCATION_RESET_LOCATION_LIST : return updateObject(mapLocationState, {mapLocationList: []});\n        case LOCATION_FETCH_LOCATION_STARTED : return updateObject(mapLocationState, {mapLocationLoading: true});\n        case LOCATION_FETCH_LOCATION_SUCCESS : return fetchSuccess(mapLocationState, action.data);\n        case LOCATION_FETCH_LOCATION_FINISHED : return updateObject(mapLocationState, {mapLocationLoading: false});\n        case LOCATION_FETCH_LOCATION_ERROR : return updateObject(mapLocationState, {mapLocationLoading: false});\n        case LOCATION_SET_FOCUSED_LOCATION : return updateObject(mapLocationState, {focusedMapLocation: action.data});\n        default : return mapLocationState;\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}