{"ast":null,"code":"var _jsxFileName = \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/MoobeKakaoMap.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport LoadingOverlay from \"react-loading-overlay\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport withJs from \"./WithJs\";\nimport withKakaoMap from \"./WithKakaoMap\";\nimport KakaoMap from \"./KakaoMap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setMapCenter, setMapLoading } from \"../../../redux/action/map\";\nimport { LoadingSpinner } from \"../layout/PresentUtil\";\nimport { setContentLoading } from \"../../../redux/action/content\";\nimport { isNil as _isNil } from 'lodash';\nconst Kakao = withJs(`//dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.REACT_APP_KAKAO_API_KEY}&libraries=services,clusterer,drawing&autoload=false`)(withKakaoMap(KakaoMap));\n\nconst MoobeKakaoMap = props => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(state => state.content),\n        activeContent = _useSelector.activeContent;\n\n  useEffect(() => {\n    //TODO initial lat lng with user location;\n    let lat = 36.836043243885264,\n        lng = 127.14584352312745;\n    dispatch(setMapCenter({\n      lat,\n      lng\n    }));\n    dispatch(setMapLoading(true));\n  }, []);\n  useEffect(() => {\n    if (!_isNil(activeContent)) {\n      dispatch(setMapCenter({\n        lat: activeContent.store.latitude,\n        lng: activeContent.store.longitude\n      }));\n    }\n  }, [activeContent]);\n\n  const _useSelector2 = useSelector(state => state.map),\n        centerLat = _useSelector2.centerLat,\n        centerLng = _useSelector2.centerLng;\n\n  return React.createElement(React.Fragment, null, React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Kakao, {\n    className: props.className,\n    options: {\n      lat: centerLat,\n      lng: centerLng,\n      level: 3,\n      zoom: \"TOPRIGHT\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, props.children)));\n};\n\nconst Loading = props => {\n  const _useSelector3 = useSelector(state => state.map),\n        mapLoading = _useSelector3.mapLoading,\n        errorMapLoading = _useSelector3.errorMapLoading;\n\n  const _useSelector4 = useSelector(state => state.content),\n        contentLoading = _useSelector4.contentLoading;\n\n  const _useState = useState(false),\n        clean = _useState.clean,\n        setClean = _useState.setClean;\n\n  const loadingText = () => errorMapLoading ? \"지도를 불러오는데에 실패했습니다. 일시적인 문제일 수 있습니다. 페이지를 다시 로딩 해 주세요.\" : \"Loading...\";\n\n  const loadingSpinner = () => errorMapLoading ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faTimesCircle,\n    size: \"3x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })) : React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    color: \"#FFF\",\n    loading: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    return () => {\n      dispatch(setContentLoading(false));\n      dispatch(setMapLoading(false));\n    };\n  }, []);\n  return React.createElement(LoadingOverlay, {\n    className: \"box column is-full kakao-map is-fullheight-with-navbar-tablet is-fullheight-with-navbar-mobile is-paddingless\",\n    active: !clean && (mapLoading || contentLoading || errorMapLoading),\n    spinner: loadingSpinner(),\n    text: loadingText(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default MoobeKakaoMap;","map":{"version":3,"sources":["/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/src/components/common/map/MoobeKakaoMap.jsx"],"names":["React","useEffect","useState","LoadingOverlay","FontAwesomeIcon","faTimesCircle","withJs","withKakaoMap","KakaoMap","useDispatch","useSelector","setMapCenter","setMapLoading","LoadingSpinner","setContentLoading","isNil","_isNil","Kakao","process","env","REACT_APP_KAKAO_API_KEY","MoobeKakaoMap","props","dispatch","state","content","activeContent","lat","lng","store","latitude","longitude","map","centerLat","centerLng","className","level","zoom","children","Loading","mapLoading","errorMapLoading","contentLoading","clean","setClean","loadingText","loadingSpinner"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport LoadingOverlay from \"react-loading-overlay\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faTimesCircle} from '@fortawesome/free-solid-svg-icons'\nimport withJs from \"./WithJs\";\nimport withKakaoMap from \"./WithKakaoMap\";\nimport KakaoMap from \"./KakaoMap\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setMapCenter, setMapLoading} from \"../../../redux/action/map\";\nimport {LoadingSpinner} from \"../layout/PresentUtil\";\nimport {setContentLoading} from \"../../../redux/action/content\";\nimport {isNil as _isNil} from 'lodash'\n\nconst Kakao = withJs(\n    `//dapi.kakao.com/v2/maps/sdk.js?appkey=${\n        process.env.REACT_APP_KAKAO_API_KEY\n    }&libraries=services,clusterer,drawing&autoload=false`\n)(withKakaoMap(KakaoMap));\n\nconst MoobeKakaoMap = (props) => {\n    const dispatch = useDispatch();\n    const {activeContent} = useSelector(state => state.content)\n    useEffect(() => {\n        //TODO initial lat lng with user location;\n        let lat = 36.836043243885264, lng = 127.14584352312745;\n        dispatch(setMapCenter({lat, lng}));\n        dispatch(setMapLoading(true));\n    }, []);\n    useEffect(() => {\n        if (!_isNil(activeContent)) {\n            dispatch(setMapCenter({lat: activeContent.store.latitude, lng: activeContent.store.longitude}));\n        }\n    }, [activeContent])\n\n    const {centerLat, centerLng} = useSelector(state => state.map);\n    return (\n        <>\n            <Loading>\n                <Kakao className={props.className}\n                        options={{lat: centerLat, lng: centerLng, level: 3, zoom: \"TOPRIGHT\"}} >\n                    {props.children}\n                </Kakao>\n            </Loading>\n        </>\n    )\n};\n\nconst Loading = (props) => {\n    const {mapLoading, errorMapLoading} = useSelector(state => state.map);\n    const {contentLoading} = useSelector(state => state.content);\n    const {clean, setClean} = useState(false)\n    const loadingText = () => errorMapLoading ? \"지도를 불러오는데에 실패했습니다. 일시적인 문제일 수 있습니다. 페이지를 다시 로딩 해 주세요.\" : \"Loading...\";\n    const loadingSpinner = () => errorMapLoading ? <h2><FontAwesomeIcon icon={faTimesCircle} size='3x' /></h2>\n        : <h6><LoadingSpinner color={\"#FFF\"} loading={true} /></h6>;\n    const dispatch = useDispatch()\n    useEffect(() => {\n        return () => {\n            dispatch(setContentLoading(false));\n            dispatch(setMapLoading(false));\n        }\n    }, []);\n    return (\n        <LoadingOverlay\n            className={\"box column is-full kakao-map is-fullheight-with-navbar-tablet is-fullheight-with-navbar-mobile is-paddingless\"}\n            active={!clean && (mapLoading || contentLoading || errorMapLoading)}\n            spinner={loadingSpinner()}\n            text={loadingText()}\n        >\n            {props.children}\n        </LoadingOverlay>\n    )\n};\n\nexport default MoobeKakaoMap;"]},"metadata":{},"sourceType":"module"}