{"ast":null,"code":"import _slicedToArray from \"/Users/nhnent/IdeaProjects/moobe/src/main/webapps/moobe-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nexport const uuid = (prefix = '') => prefix + ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));\nexport const deepMerge = (...sources) => {\n  let acc = {};\n\n  for (const source of sources) {\n    if (source instanceof Array) {\n      if (!(acc instanceof Array)) {\n        acc = [];\n      }\n\n      acc = [...acc, ...source];\n    } else if (source instanceof Object) {\n      for (let _ref of Object.entries(source)) {\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        let key = _ref2[0];\n        let value = _ref2[1];\n\n        if (value instanceof Object && key in acc) {\n          value = deepMerge(acc[key], value);\n        }\n\n        acc = { ...acc,\n          [key]: value\n        };\n      }\n    }\n  }\n\n  return acc;\n};\nexport const detectSupportsPassive = () => {\n  let supportsPassive = false;\n\n  try {\n    let opts = Object.defineProperty({}, 'passive', {\n      get() {\n        supportsPassive = true;\n      }\n\n    });\n    window.addEventListener('testPassive', null, opts);\n    window.removeEventListener('testPassive', null, opts);\n  } catch (e) {}\n\n  return supportsPassive;\n};","map":null,"metadata":{},"sourceType":"module"}